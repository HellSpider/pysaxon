/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/SaxonProcessor.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/SchemaValidator.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XPathProcessor.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmAtomicValue.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmItem.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmNode.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmValue.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XsltProcessor.h"
        ],
        "include_dirs": [
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API",
            "/usr/lib/jvm/java-8-openjdk-amd64/include",
            "/usr/lib/jvm/java-8-openjdk-amd64/include/linux"
        ],
        "language": "c++",
        "libraries": [
            "saxonhec"
        ],
        "library_dirs": [
            "/opt/saxon-HEC-v1.0.1",
            "/usr/lib"
        ],
        "runtime_library_dirs": [
            "/opt/saxon-HEC-v1.0.1",
            "/usr/lib"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pysaxon__xdm
#define __PYX_HAVE_API__pysaxon__xdm
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include "SaxonProcessor.h"
#include "XdmValue.h"
#include "XdmItem.h"
#include "XdmNode.h"
#include "XdmAtomicValue.h"
#include "XPathProcessor.h"
#include "XsltProcessor.h"
#include "SchemaValidator.h"
#include "stdio.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pysaxon/xdm.pyx",
  "stringsource",
  "pysaxon/sxn.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor;
struct __pyx_obj_7pysaxon_3sxn_XPathProcessor;
struct __pyx_obj_7pysaxon_3sxn_XsltProcessor;
struct __pyx_obj_7pysaxon_3xdm_Value;
struct __pyx_obj_7pysaxon_3xdm_Item;
struct __pyx_obj_7pysaxon_3xdm_Node;
struct __pyx_obj_7pysaxon_3xdm_AtomicValue;

/* "sxn.pxd":3
 * cimport cpp
 * 
 * cdef class SaxonProcessor:             # <<<<<<<<<<<<<<
 *     cdef cpp.SaxonProcessor *thisptr
 *     cdef int _init
 */
struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor {
  PyObject_HEAD
  SaxonProcessor *thisptr;
  int _init;
};


/* "sxn.pxd":7
 *     cdef int _init
 * 
 * cdef class XPathProcessor:             # <<<<<<<<<<<<<<
 *     cdef cpp.XPathProcessor *thisptr
 * 
 */
struct __pyx_obj_7pysaxon_3sxn_XPathProcessor {
  PyObject_HEAD
  XPathProcessor *thisptr;
};


/* "sxn.pxd":10
 *     cdef cpp.XPathProcessor *thisptr
 * 
 * cdef class XsltProcessor:             # <<<<<<<<<<<<<<
 *     cdef cpp.XsltProcessor *thisptr
 */
struct __pyx_obj_7pysaxon_3sxn_XsltProcessor {
  PyObject_HEAD
  XsltProcessor *thisptr;
};


/* "pysaxon/xdm.pxd":4
 * 
 * 
 * cdef class Value:             # <<<<<<<<<<<<<<
 *     cdef cpp.XdmValue *thisptr
 *     cdef int _size, _cntr
 */
struct __pyx_obj_7pysaxon_3xdm_Value {
  PyObject_HEAD
  XdmValue *thisptr;
  int _size;
  int _cntr;
};


/* "pysaxon/xdm.pxd":9
 * 
 * 
 * cdef class Item(Value):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pysaxon_3xdm_Item {
  struct __pyx_obj_7pysaxon_3xdm_Value __pyx_base;
};


/* "pysaxon/xdm.pxd":13
 * 
 * 
 * cdef class Node(Item):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pysaxon_3xdm_Node {
  struct __pyx_obj_7pysaxon_3xdm_Item __pyx_base;
};


/* "pysaxon/xdm.pxd":17
 * 
 * 
 * cdef class AtomicValue(Item):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pysaxon_3xdm_AtomicValue {
  struct __pyx_obj_7pysaxon_3xdm_Item __pyx_base;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XDM_TYPE(XDM_TYPE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XDM_NODE_KIND(XDM_NODE_KIND value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'pysaxon.cpp' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'pysaxon.sxn' */
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_SaxonProcessor = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_XPathProcessor = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_XsltProcessor = 0;

/* Module declarations from 'pysaxon.xdm' */
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_Value = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_Item = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_Node = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_AtomicValue = 0;
static PyObject *__pyx_f_7pysaxon_3xdm_make_item(XdmItem *, char *); /*proto*/
static PyObject *__pyx_f_7pysaxon_3xdm_make_node(XdmNode *, char *); /*proto*/
static void __pyx_f_7pysaxon_3xdm_print_ptr(char *, void *); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pysaxon.xdm"
int __pyx_module_is_main_pysaxon__xdm = 0;

/* Implementation of 'pysaxon.xdm' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_range;
static const char __pyx_k__4[] = "";
static const char __pyx_k_av[] = "av";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_ITEM[] = "ITEM";
static const char __pyx_k_NODE[] = "NODE";
static const char __pyx_k_TEXT[] = "TEXT";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_VALUE[] = "VALUE";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_COMMENT[] = "COMMENT";
static const char __pyx_k_ELEMENT[] = "ELEMENT";
static const char __pyx_k_UNKNOWN[] = "UNKNOWN";
static const char __pyx_k_comment[] = "comment";
static const char __pyx_k_element[] = "element";
static const char __pyx_k_or_None[] = "or None";
static const char __pyx_k_unknown[] = "unknown";
static const char __pyx_k_DOCUMENT[] = "DOCUMENT";
static const char __pyx_k_document[] = "document";
static const char __pyx_k_ATTRIBUTE[] = "ATTRIBUTE";
static const char __pyx_k_NAMESPACE[] = "NAMESPACE";
static const char __pyx_k_attribute[] = "attribute";
static const char __pyx_k_namespace[] = "namespace";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_ATOMIC_VALUE[] = "ATOMIC_VALUE";
static const char __pyx_k_In_Item_size[] = "In Item.size";
static const char __pyx_k_FUNCTION_ITEM[] = "FUNCTION_ITEM";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_Unknown_node_kind_d[] = "Unknown node kind: %d";
static const char __pyx_k_In_Item_getStringValue[] = "In Item.getStringValue()";
static const char __pyx_k_Item_at_d_out_of_range[] = "Item at %d out of range";
static const char __pyx_k_PROCESSING_INSTRUCTION[] = "PROCESSING_INSTRUCTION";
static const char __pyx_k_processing_instruction[] = "processing-instruction";
static const char __pyx_k_SaxonProcessor_object_is_NULL[] = "SaxonProcessor object is NULL";
static const char __pyx_k_xdm_AtomicValue_object_s_pointer[] = "xdm.AtomicValue object's pointer is NULL";
static const char __pyx_k_xdm_Item_object_s_pointer_is_NUL[] = "xdm.Item object's pointer is NULL";
static const char __pyx_k_xdm_Node_object_s_pointer_is_NUL[] = "xdm.Node object's pointer is NULL";
static PyObject *__pyx_n_s_ATOMIC_VALUE;
static PyObject *__pyx_n_s_ATTRIBUTE;
static PyObject *__pyx_n_s_COMMENT;
static PyObject *__pyx_n_s_DOCUMENT;
static PyObject *__pyx_n_s_ELEMENT;
static PyObject *__pyx_n_s_FUNCTION_ITEM;
static PyObject *__pyx_n_s_ITEM;
static PyObject *__pyx_kp_s_In_Item_getStringValue;
static PyObject *__pyx_kp_s_In_Item_size;
static PyObject *__pyx_kp_s_Item_at_d_out_of_range;
static PyObject *__pyx_n_s_NAMESPACE;
static PyObject *__pyx_n_s_NODE;
static PyObject *__pyx_n_s_PROCESSING_INSTRUCTION;
static PyObject *__pyx_kp_s_SaxonProcessor_object_is_NULL;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TEXT;
static PyObject *__pyx_n_s_UNKNOWN;
static PyObject *__pyx_kp_s_Unknown_node_kind_d;
static PyObject *__pyx_n_s_VALUE;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_b__4;
static PyObject *__pyx_n_s_attribute;
static PyObject *__pyx_n_s_av;
static PyObject *__pyx_n_s_comment;
static PyObject *__pyx_n_s_document;
static PyObject *__pyx_n_s_element;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_namespace;
static PyObject *__pyx_kp_b_or_None;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_kp_s_processing_instruction;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_unknown;
static PyObject *__pyx_kp_s_xdm_AtomicValue_object_s_pointer;
static PyObject *__pyx_kp_s_xdm_Item_object_s_pointer_is_NUL;
static PyObject *__pyx_kp_s_xdm_Node_object_s_pointer_is_NUL;
static int __pyx_pf_7pysaxon_3xdm_5Value___cinit__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static void __pyx_pf_7pysaxon_3xdm_5Value_2__dealloc__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_4type___get__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3xdm_5Value_9processor___set__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self, struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_4size___get__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_4getHead(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_6itemAt(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_8checkFailures(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_10__iter__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_12__next__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self); /* proto */
static void __pyx_pf_7pysaxon_3xdm_4Item___dealloc__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_4type___get__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_8isAtomic___get__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_4size___get__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_2itemAt(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self, int __pyx_v_n); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_4getStringValue(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self, struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_proc); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_6__iter__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_8__next__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3xdm_11AtomicValue___cinit__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_av); /* proto */
static void __pyx_pf_7pysaxon_3xdm_11AtomicValue_2__dealloc__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_11AtomicValue_4type___get__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3xdm_11AtomicValue_4type_2__set__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self, std::string __pyx_v_ty); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_11AtomicValue_8isAtomic___get__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self); /* proto */
static void __pyx_pf_7pysaxon_3xdm_4Node___dealloc__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_8isAtomic___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_4type___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_4kind___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_4name___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_7baseuri___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_6parent___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_2getAttributeValue(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_15attribute_count___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_14children_count___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_10attributes___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_8children___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7pysaxon_3xdm_Value(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3xdm_Item(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3xdm_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3xdm_AtomicValue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;

/* "pysaxon/xdm.pyx":23
 * 
 * 
 * cdef void print_ptr(char *msg, void *ptr):             # <<<<<<<<<<<<<<
 *     printf('%s = %p\n', msg, ptr)
 * 
 */

static void __pyx_f_7pysaxon_3xdm_print_ptr(char *__pyx_v_msg, void *__pyx_v_ptr) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_ptr", 0);

  /* "pysaxon/xdm.pyx":24
 * 
 * cdef void print_ptr(char *msg, void *ptr):
 *     printf('%s = %p\n', msg, ptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  printf(((char const *)"%s = %p\n"), __pyx_v_msg, __pyx_v_ptr);

  /* "pysaxon/xdm.pyx":23
 * 
 * 
 * cdef void print_ptr(char *msg, void *ptr):             # <<<<<<<<<<<<<<
 *     printf('%s = %p\n', msg, ptr)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/xdm.pyx":27
 * 
 * 
 * cdef object make_item(cpp.XdmItem *ptr, char *when_null):             # <<<<<<<<<<<<<<
 *     """make_item(XdmItem *ptr, char *when_null)
 * 
 */

static PyObject *__pyx_f_7pysaxon_3xdm_make_item(XdmItem *__pyx_v_ptr, char *__pyx_v_when_null) {
  struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("make_item", 0);

  /* "pysaxon/xdm.pyx":37
 *     """
 *     cdef Item i
 *     if ptr is NULL:             # <<<<<<<<<<<<<<
 *         if when_null == b'or None':
 *             return None
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":38
 *     cdef Item i
 *     if ptr is NULL:
 *         if when_null == b'or None':             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_when_null); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_t_2, __pyx_kp_b_or_None, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "pysaxon/xdm.pyx":39
 *     if ptr is NULL:
 *         if when_null == b'or None':
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("xdm.Item object's pointer is NULL")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;

      /* "pysaxon/xdm.pyx":38
 *     cdef Item i
 *     if ptr is NULL:
 *         if when_null == b'or None':             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
    }

    /* "pysaxon/xdm.pyx":41
 *             return None
 *         else:
 *             raise ValueError("xdm.Item object's pointer is NULL")             # <<<<<<<<<<<<<<
 *     else:
 *         i = Item()
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 41, __pyx_L1_error)
    }

    /* "pysaxon/xdm.pyx":37
 *     """
 *     cdef Item i
 *     if ptr is NULL:             # <<<<<<<<<<<<<<
 *         if when_null == b'or None':
 *             return None
 */
  }

  /* "pysaxon/xdm.pyx":43
 *             raise ValueError("xdm.Item object's pointer is NULL")
 *     else:
 *         i = Item()             # <<<<<<<<<<<<<<
 *         i.thisptr = <cpp.XdmValue*>ptr
 *         return i
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Item), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_i = ((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pysaxon/xdm.pyx":44
 *     else:
 *         i = Item()
 *         i.thisptr = <cpp.XdmValue*>ptr             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
    __pyx_v_i->__pyx_base.thisptr = ((XdmValue *)__pyx_v_ptr);

    /* "pysaxon/xdm.pyx":45
 *         i = Item()
 *         i.thisptr = <cpp.XdmValue*>ptr
 *         return i             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;
  }

  /* "pysaxon/xdm.pyx":27
 * 
 * 
 * cdef object make_item(cpp.XdmItem *ptr, char *when_null):             # <<<<<<<<<<<<<<
 *     """make_item(XdmItem *ptr, char *when_null)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.make_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":48
 * 
 * 
 * cdef object make_node(cpp.XdmNode *ptr, char *when_null):             # <<<<<<<<<<<<<<
 *     """make_node(XdmNode *ptr, char *when_null)
 * 
 */

static PyObject *__pyx_f_7pysaxon_3xdm_make_node(XdmNode *__pyx_v_ptr, char *__pyx_v_when_null) {
  struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("make_node", 0);

  /* "pysaxon/xdm.pyx":58
 *     """
 *     cdef Node n
 *     if ptr is NULL:             # <<<<<<<<<<<<<<
 *         if when_null == b'or None':
 *             return None
 */
  __pyx_t_1 = ((__pyx_v_ptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":59
 *     cdef Node n
 *     if ptr is NULL:
 *         if when_null == b'or None':             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_v_when_null); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = (__Pyx_PyBytes_Equals(__pyx_t_2, __pyx_kp_b_or_None, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 59, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_1) {

      /* "pysaxon/xdm.pyx":60
 *     if ptr is NULL:
 *         if when_null == b'or None':
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("xdm.Node object's pointer is NULL")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_None);
      __pyx_r = Py_None;
      goto __pyx_L0;

      /* "pysaxon/xdm.pyx":59
 *     cdef Node n
 *     if ptr is NULL:
 *         if when_null == b'or None':             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
    }

    /* "pysaxon/xdm.pyx":62
 *             return None
 *         else:
 *             raise ValueError("xdm.Node object's pointer is NULL")             # <<<<<<<<<<<<<<
 *     else:
 *         n = Node()
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 62, __pyx_L1_error)
    }

    /* "pysaxon/xdm.pyx":58
 *     """
 *     cdef Node n
 *     if ptr is NULL:             # <<<<<<<<<<<<<<
 *         if when_null == b'or None':
 *             return None
 */
  }

  /* "pysaxon/xdm.pyx":64
 *             raise ValueError("xdm.Node object's pointer is NULL")
 *     else:
 *         n = Node()             # <<<<<<<<<<<<<<
 *         n.thisptr = <cpp.XdmValue*>ptr
 *         return n
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_n = ((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "pysaxon/xdm.pyx":65
 *     else:
 *         n = Node()
 *         n.thisptr = <cpp.XdmValue*>ptr             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
    __pyx_v_n->__pyx_base.__pyx_base.thisptr = ((XdmValue *)__pyx_v_ptr);

    /* "pysaxon/xdm.pyx":66
 *         n = Node()
 *         n.thisptr = <cpp.XdmValue*>ptr
 *         return n             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;
  }

  /* "pysaxon/xdm.pyx":48
 * 
 * 
 * cdef object make_node(cpp.XdmNode *ptr, char *when_null):             # <<<<<<<<<<<<<<
 *     """make_node(XdmNode *ptr, char *when_null)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.make_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":72
 *     """XdmValue extension type."""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         if type(self) == AtomicValue:
 *             return
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3xdm_5Value_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pysaxon_3xdm_5Value_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value___cinit__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3xdm_5Value___cinit__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pysaxon/xdm.pyx":73
 * 
 *     def __cinit__(self):
 *         if type(self) == AtomicValue:             # <<<<<<<<<<<<<<
 *             return
 *         self.thisptr = NULL
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))), ((PyObject *)__pyx_ptype_7pysaxon_3xdm_AtomicValue), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":74
 *     def __cinit__(self):
 *         if type(self) == AtomicValue:
 *             return             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 *         self._size = 0
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "pysaxon/xdm.pyx":73
 * 
 *     def __cinit__(self):
 *         if type(self) == AtomicValue:             # <<<<<<<<<<<<<<
 *             return
 *         self.thisptr = NULL
 */
  }

  /* "pysaxon/xdm.pyx":75
 *         if type(self) == AtomicValue:
 *             return
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         self._size = 0
 *         self._cntr = 0
 */
  __pyx_v_self->thisptr = NULL;

  /* "pysaxon/xdm.pyx":76
 *             return
 *         self.thisptr = NULL
 *         self._size = 0             # <<<<<<<<<<<<<<
 *         self._cntr = 0
 * 
 */
  __pyx_v_self->_size = 0;

  /* "pysaxon/xdm.pyx":77
 *         self.thisptr = NULL
 *         self._size = 0
 *         self._cntr = 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->_cntr = 0;

  /* "pysaxon/xdm.pyx":72
 *     """XdmValue extension type."""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         if type(self) == AtomicValue:
 *             return
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.xdm.Value.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":79
 *         self._cntr = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             self.thisptr.releaseXdmValue()
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3xdm_5Value_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3xdm_5Value_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3xdm_5Value_2__dealloc__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3xdm_5Value_2__dealloc__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/xdm.pyx":80
 * 
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             self.thisptr.releaseXdmValue()
 *             del self.thisptr
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":81
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:
 *             self.thisptr.releaseXdmValue()             # <<<<<<<<<<<<<<
 *             del self.thisptr
 *             self.thisptr = NULL
 */
    try {
      __pyx_v_self->thisptr->releaseXdmValue();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 81, __pyx_L1_error)
    }

    /* "pysaxon/xdm.pyx":82
 *         if self.thisptr is not NULL:
 *             self.thisptr.releaseXdmValue()
 *             del self.thisptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_self->thisptr;

    /* "pysaxon/xdm.pyx":83
 *             self.thisptr.releaseXdmValue()
 *             del self.thisptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
    __pyx_v_self->thisptr = NULL;

    /* "pysaxon/xdm.pyx":80
 * 
 *     def __dealloc__(self):
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             self.thisptr.releaseXdmValue()
 *             del self.thisptr
 */
  }

  /* "pysaxon/xdm.pyx":79
 *         self._cntr = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr is not NULL:
 *             self.thisptr.releaseXdmValue()
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("pysaxon.xdm.Value.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/xdm.pyx":86
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>self.thisptr.getType()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_4type___get__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_4type___get__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XDM_TYPE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":87
 *     property type:
 *         def __get__(self):
 *             return <cpp.XDM_TYPE>self.thisptr.getType()             # <<<<<<<<<<<<<<
 * 
 *     property processor:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getType();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 87, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_XDM_TYPE(((XDM_TYPE)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":86
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>self.thisptr.getType()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Value.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":91
 *     property processor:
 *         """Set SaxonProcessor for this xdm.Value object."""
 *         def __set__(self, SaxonProcessor p not None):             # <<<<<<<<<<<<<<
 *             if p.thisptr is NULL:
 *                 raise ValueError('SaxonProcessor object is NULL')
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3xdm_5Value_9processor_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p); /*proto*/
static int __pyx_pw_7pysaxon_3xdm_5Value_9processor_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_p) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p), __pyx_ptype_7pysaxon_3sxn_SaxonProcessor, 0, "p", 0))) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_9processor___set__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self), ((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_p));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3xdm_5Value_9processor___set__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self, struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_p) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pysaxon/xdm.pyx":92
 *         """Set SaxonProcessor for this xdm.Value object."""
 *         def __set__(self, SaxonProcessor p not None):
 *             if p.thisptr is NULL:             # <<<<<<<<<<<<<<
 *                 raise ValueError('SaxonProcessor object is NULL')
 *             self.thisptr.setProcessor(p.thisptr)
 */
  __pyx_t_1 = ((__pyx_v_p->thisptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":93
 *         def __set__(self, SaxonProcessor p not None):
 *             if p.thisptr is NULL:
 *                 raise ValueError('SaxonProcessor object is NULL')             # <<<<<<<<<<<<<<
 *             self.thisptr.setProcessor(p.thisptr)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 93, __pyx_L1_error)

    /* "pysaxon/xdm.pyx":92
 *         """Set SaxonProcessor for this xdm.Value object."""
 *         def __set__(self, SaxonProcessor p not None):
 *             if p.thisptr is NULL:             # <<<<<<<<<<<<<<
 *                 raise ValueError('SaxonProcessor object is NULL')
 *             self.thisptr.setProcessor(p.thisptr)
 */
  }

  /* "pysaxon/xdm.pyx":94
 *             if p.thisptr is NULL:
 *                 raise ValueError('SaxonProcessor object is NULL')
 *             self.thisptr.setProcessor(p.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  try {
    __pyx_v_self->thisptr->setProcessor(__pyx_v_p->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 94, __pyx_L1_error)
  }

  /* "pysaxon/xdm.pyx":91
 *     property processor:
 *         """Set SaxonProcessor for this xdm.Value object."""
 *         def __set__(self, SaxonProcessor p not None):             # <<<<<<<<<<<<<<
 *             if p.thisptr is NULL:
 *                 raise ValueError('SaxonProcessor object is NULL')
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Value.processor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":97
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.size()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_4size___get__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_4size___get__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":98
 *     property size:
 *         def __get__(self):
 *             return self.thisptr.size()             # <<<<<<<<<<<<<<
 * 
 *     def getHead(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->size();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 98, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":97
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.size()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Value.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":100
 *             return self.thisptr.size()
 * 
 *     def getHead(self):             # <<<<<<<<<<<<<<
 *         """Get the first item in the sequence.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_5getHead(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_5Value_4getHead[] = "Get the first item in the sequence.\n\n        None is returned when the sequence is empty.\n        ";
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_5getHead(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHead (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_4getHead(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_4getHead(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  XdmItem *__pyx_v_iptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XdmItem *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getHead", 0);

  /* "pysaxon/xdm.pyx":106
 *         """
 *         cdef cpp.XdmItem *iptr
 *         iptr = self.thisptr.getHead()             # <<<<<<<<<<<<<<
 *         return make_item(iptr, b'or None')
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getHead();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 106, __pyx_L1_error)
  }
  __pyx_v_iptr = __pyx_t_1;

  /* "pysaxon/xdm.pyx":107
 *         cdef cpp.XdmItem *iptr
 *         iptr = self.thisptr.getHead()
 *         return make_item(iptr, b'or None')             # <<<<<<<<<<<<<<
 * 
 *     def itemAt(self, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pysaxon_3xdm_make_item(__pyx_v_iptr, ((char *)"or None")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":100
 *             return self.thisptr.size()
 * 
 *     def getHead(self):             # <<<<<<<<<<<<<<
 *         """Get the first item in the sequence.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Value.getHead", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":109
 *         return make_item(iptr, b'or None')
 * 
 *     def itemAt(self, int n):             # <<<<<<<<<<<<<<
 *         """Get the n'th item in the value, counting from zero.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_7itemAt(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_5Value_6itemAt[] = "Get the n'th item in the value, counting from zero.\n\n        If n is less than zero, or greater than or equal to the number of items\n        in the value, then raise a ValueError exception.\n        ";
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_7itemAt(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itemAt (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_int(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.xdm.Value.itemAt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_6itemAt(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self), ((int)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_6itemAt(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self, int __pyx_v_n) {
  XdmItem *__pyx_v_iptr;
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  XdmItem *__pyx_t_6;
  __Pyx_RefNannySetupContext("itemAt", 0);

  /* "pysaxon/xdm.pyx":115
 *         in the value, then raise a ValueError exception.
 *         """
 *         cdef cpp.XdmItem *iptr = NULL             # <<<<<<<<<<<<<<
 *         cdef int size = self.size
 *         if not (0 <= n < size):
 */
  __pyx_v_iptr = NULL;

  /* "pysaxon/xdm.pyx":116
 *         """
 *         cdef cpp.XdmItem *iptr = NULL
 *         cdef int size = self.size             # <<<<<<<<<<<<<<
 *         if not (0 <= n < size):
 *             raise ValueError('Item at %d out of range' % n)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_2;

  /* "pysaxon/xdm.pyx":117
 *         cdef cpp.XdmItem *iptr = NULL
 *         cdef int size = self.size
 *         if not (0 <= n < size):             # <<<<<<<<<<<<<<
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = self.thisptr.itemAt(n)
 */
  __pyx_t_3 = (0 <= __pyx_v_n);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_n < __pyx_v_size);
  }
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "pysaxon/xdm.pyx":118
 *         cdef int size = self.size
 *         if not (0 <= n < size):
 *             raise ValueError('Item at %d out of range' % n)             # <<<<<<<<<<<<<<
 *         iptr = self.thisptr.itemAt(n)
 *         return make_item(iptr, b'or error')
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Item_at_d_out_of_range, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 118, __pyx_L1_error)

    /* "pysaxon/xdm.pyx":117
 *         cdef cpp.XdmItem *iptr = NULL
 *         cdef int size = self.size
 *         if not (0 <= n < size):             # <<<<<<<<<<<<<<
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = self.thisptr.itemAt(n)
 */
  }

  /* "pysaxon/xdm.pyx":119
 *         if not (0 <= n < size):
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = self.thisptr.itemAt(n)             # <<<<<<<<<<<<<<
 *         return make_item(iptr, b'or error')
 * 
 */
  try {
    __pyx_t_6 = __pyx_v_self->thisptr->itemAt(__pyx_v_n);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 119, __pyx_L1_error)
  }
  __pyx_v_iptr = __pyx_t_6;

  /* "pysaxon/xdm.pyx":120
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = self.thisptr.itemAt(n)
 *         return make_item(iptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 *     def checkFailures(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_7pysaxon_3xdm_make_item(__pyx_v_iptr, ((char *)"or error")); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":109
 *         return make_item(iptr, b'or None')
 * 
 *     def itemAt(self, int n):             # <<<<<<<<<<<<<<
 *         """Get the n'th item in the value, counting from zero.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pysaxon.xdm.Value.itemAt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":122
 *         return make_item(iptr, b'or error')
 * 
 *     def checkFailures(self):             # <<<<<<<<<<<<<<
 *         cdef const_char *temp
 *         temp = (<cpp.XdmValue*>self.thisptr).checkFailures()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_9checkFailures(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_9checkFailures(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkFailures (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_8checkFailures(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_8checkFailures(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  const char *__pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("checkFailures", 0);

  /* "pysaxon/xdm.pyx":124
 *     def checkFailures(self):
 *         cdef const_char *temp
 *         temp = (<cpp.XdmValue*>self.thisptr).checkFailures()             # <<<<<<<<<<<<<<
 *         if temp == NULL:
 *             return b''
 */
  try {
    __pyx_t_1 = ((XdmValue *)__pyx_v_self->thisptr)->checkFailures();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 124, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_1;

  /* "pysaxon/xdm.pyx":125
 *         cdef const_char *temp
 *         temp = (<cpp.XdmValue*>self.thisptr).checkFailures()
 *         if temp == NULL:             # <<<<<<<<<<<<<<
 *             return b''
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_temp == NULL) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":126
 *         temp = (<cpp.XdmValue*>self.thisptr).checkFailures()
 *         if temp == NULL:
 *             return b''             # <<<<<<<<<<<<<<
 *         else:
 *             return <bytes>temp
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_b__4);
    __pyx_r = __pyx_kp_b__4;
    goto __pyx_L0;

    /* "pysaxon/xdm.pyx":125
 *         cdef const_char *temp
 *         temp = (<cpp.XdmValue*>self.thisptr).checkFailures()
 *         if temp == NULL:             # <<<<<<<<<<<<<<
 *             return b''
 *         else:
 */
  }

  /* "pysaxon/xdm.pyx":128
 *             return b''
 *         else:
 *             return <bytes>temp             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_temp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject*)__pyx_t_3));
    __pyx_r = __pyx_t_3;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pysaxon/xdm.pyx":122
 *         return make_item(iptr, b'or error')
 * 
 *     def checkFailures(self):             # <<<<<<<<<<<<<<
 *         cdef const_char *temp
 *         temp = (<cpp.XdmValue*>self.thisptr).checkFailures()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.xdm.Value.checkFailures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":130
 *             return <bytes>temp
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """Iterator to support XdmValue.itemAt() functionality."""
 *         self._size = self.size
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_11__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_5Value_10__iter__[] = "Iterator to support XdmValue.itemAt() functionality.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7pysaxon_3xdm_5Value_10__iter__;
#endif
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_11__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_10__iter__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_10__iter__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pysaxon/xdm.pyx":132
 *     def __iter__(self):
 *         """Iterator to support XdmValue.itemAt() functionality."""
 *         self._size = self.size             # <<<<<<<<<<<<<<
 *         self._cntr = 0
 *         return self
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->_size = __pyx_t_2;

  /* "pysaxon/xdm.pyx":133
 *         """Iterator to support XdmValue.itemAt() functionality."""
 *         self._size = self.size
 *         self._cntr = 0             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->_cntr = 0;

  /* "pysaxon/xdm.pyx":134
 *         self._size = self.size
 *         self._cntr = 0
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":130
 *             return <bytes>temp
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """Iterator to support XdmValue.itemAt() functionality."""
 *         self._size = self.size
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.xdm.Value.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":136
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         """Get the value's items sequentially from the first one."""
 *         if self._cntr >= self._size:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_13__next__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_5Value_12__next__[] = "Get the value's items sequentially from the first one.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7pysaxon_3xdm_5Value_12__next__;
#endif
static PyObject *__pyx_pw_7pysaxon_3xdm_5Value_13__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_5Value_12__next__(((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_5Value_12__next__(struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_self) {
  XdmItem *__pyx_v_iptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  XdmItem *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pysaxon/xdm.pyx":138
 *     def __next__(self):
 *         """Get the value's items sequentially from the first one."""
 *         if self._cntr >= self._size:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->_cntr >= __pyx_v_self->_size) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":139
 *         """Get the value's items sequentially from the first one."""
 *         if self._cntr >= self._size:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmItem *iptr = NULL
 *         iptr = self.thisptr.itemAt(self._cntr)
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 139, __pyx_L1_error)

    /* "pysaxon/xdm.pyx":138
 *     def __next__(self):
 *         """Get the value's items sequentially from the first one."""
 *         if self._cntr >= self._size:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL
 */
  }

  /* "pysaxon/xdm.pyx":140
 *         if self._cntr >= self._size:
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL             # <<<<<<<<<<<<<<
 *         iptr = self.thisptr.itemAt(self._cntr)
 *         self._cntr += 1
 */
  __pyx_v_iptr = NULL;

  /* "pysaxon/xdm.pyx":141
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL
 *         iptr = self.thisptr.itemAt(self._cntr)             # <<<<<<<<<<<<<<
 *         self._cntr += 1
 *         return make_item(iptr, b'or error')
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->itemAt(__pyx_v_self->_cntr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_v_iptr = __pyx_t_2;

  /* "pysaxon/xdm.pyx":142
 *         cdef cpp.XdmItem *iptr = NULL
 *         iptr = self.thisptr.itemAt(self._cntr)
 *         self._cntr += 1             # <<<<<<<<<<<<<<
 *         return make_item(iptr, b'or error')
 * 
 */
  __pyx_v_self->_cntr = (__pyx_v_self->_cntr + 1);

  /* "pysaxon/xdm.pyx":143
 *         iptr = self.thisptr.itemAt(self._cntr)
 *         self._cntr += 1
 *         return make_item(iptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7pysaxon_3xdm_make_item(__pyx_v_iptr, ((char *)"or error")); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":136
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         """Get the value's items sequentially from the first one."""
 *         if self._cntr >= self._size:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.xdm.Value.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":149
 *     """XdmItem extension type."""
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmItem *ptr
 *         if self.thisptr is not NULL:
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3xdm_4Item_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3xdm_4Item_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3xdm_4Item___dealloc__(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3xdm_4Item___dealloc__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self) {
  XdmItem *__pyx_v_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/xdm.pyx":151
 *     def __dealloc__(self):
 *         cdef cpp.XdmItem *ptr
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             ptr = <cpp.XdmItem*>self.thisptr
 *             del ptr
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":152
 *         cdef cpp.XdmItem *ptr
 *         if self.thisptr is not NULL:
 *             ptr = <cpp.XdmItem*>self.thisptr             # <<<<<<<<<<<<<<
 *             del ptr
 *             self.thisptr = NULL
 */
    __pyx_v_ptr = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr);

    /* "pysaxon/xdm.pyx":153
 *         if self.thisptr is not NULL:
 *             ptr = <cpp.XdmItem*>self.thisptr
 *             del ptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_ptr;

    /* "pysaxon/xdm.pyx":154
 *             ptr = <cpp.XdmItem*>self.thisptr
 *             del ptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
    __pyx_v_self->__pyx_base.thisptr = NULL;

    /* "pysaxon/xdm.pyx":151
 *     def __dealloc__(self):
 *         cdef cpp.XdmItem *ptr
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             ptr = <cpp.XdmItem*>self.thisptr
 *             del ptr
 */
  }

  /* "pysaxon/xdm.pyx":149
 *     """XdmItem extension type."""
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmItem *ptr
 *         if self.thisptr is not NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/xdm.pyx":157
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>(<cpp.XdmItem*>self.thisptr).getType()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_4type___get__(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_4type___get__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XDM_TYPE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":158
 *     property type:
 *         def __get__(self):
 *             return <cpp.XDM_TYPE>(<cpp.XdmItem*>self.thisptr).getType()             # <<<<<<<<<<<<<<
 * 
 *     property isAtomic:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr)->getType();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 158, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_XDM_TYPE(((XDM_TYPE)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":157
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>(<cpp.XdmItem*>self.thisptr).getType()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Item.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":161
 * 
 *     property isAtomic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>(<cpp.XdmItem*>self.thisptr).isAtomic()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_8isAtomic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_8isAtomic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_8isAtomic___get__(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_8isAtomic___get__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":162
 *     property isAtomic:
 *         def __get__(self):
 *             return <bint>(<cpp.XdmItem*>self.thisptr).isAtomic()             # <<<<<<<<<<<<<<
 * 
 *     property size:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr)->isAtomic();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 162, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":161
 * 
 *     property isAtomic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>(<cpp.XdmItem*>self.thisptr).isAtomic()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Item.isAtomic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":165
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cpp.XdmItem *ptr = <cpp.XdmItem*>self.thisptr
 *             print 'In Item.size'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_4size___get__(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_4size___get__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self) {
  XdmItem *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":166
 *     property size:
 *         def __get__(self):
 *             cdef cpp.XdmItem *ptr = <cpp.XdmItem*>self.thisptr             # <<<<<<<<<<<<<<
 *             print 'In Item.size'
 *             print_ptr('XdmItem*', self.thisptr)
 */
  __pyx_v_ptr = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr);

  /* "pysaxon/xdm.pyx":167
 *         def __get__(self):
 *             cdef cpp.XdmItem *ptr = <cpp.XdmItem*>self.thisptr
 *             print 'In Item.size'             # <<<<<<<<<<<<<<
 *             print_ptr('XdmItem*', self.thisptr)
 *             return ptr.size()
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_Item_size) < 0) __PYX_ERR(0, 167, __pyx_L1_error)

  /* "pysaxon/xdm.pyx":168
 *             cdef cpp.XdmItem *ptr = <cpp.XdmItem*>self.thisptr
 *             print 'In Item.size'
 *             print_ptr('XdmItem*', self.thisptr)             # <<<<<<<<<<<<<<
 *             return ptr.size()
 * 
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"XdmItem*"), __pyx_v_self->__pyx_base.thisptr);

  /* "pysaxon/xdm.pyx":169
 *             print 'In Item.size'
 *             print_ptr('XdmItem*', self.thisptr)
 *             return ptr.size()             # <<<<<<<<<<<<<<
 * 
 *     def itemAt(self, int n):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_ptr->size();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 169, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":165
 * 
 *     property size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cpp.XdmItem *ptr = <cpp.XdmItem*>self.thisptr
 *             print 'In Item.size'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Item.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":171
 *             return ptr.size()
 * 
 *     def itemAt(self, int n):             # <<<<<<<<<<<<<<
 *         """Get the n'th item in the value, counting from zero.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_3itemAt(PyObject *__pyx_v_self, PyObject *__pyx_arg_n); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_4Item_2itemAt[] = "Get the n'th item in the value, counting from zero.\n\n        If n is less than zero, or greater than or equal to the number of items\n        in the value, then raise a ValueError exception.\n        ";
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_3itemAt(PyObject *__pyx_v_self, PyObject *__pyx_arg_n) {
  int __pyx_v_n;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("itemAt (wrapper)", 0);
  assert(__pyx_arg_n); {
    __pyx_v_n = __Pyx_PyInt_As_int(__pyx_arg_n); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 171, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.xdm.Item.itemAt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_2itemAt(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self), ((int)__pyx_v_n));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_2itemAt(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self, int __pyx_v_n) {
  XdmItem *__pyx_v_iptr;
  int __pyx_v_size;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  XdmItem *__pyx_t_6;
  __Pyx_RefNannySetupContext("itemAt", 0);

  /* "pysaxon/xdm.pyx":177
 *         in the value, then raise a ValueError exception.
 *         """
 *         cdef cpp.XdmItem *iptr = NULL             # <<<<<<<<<<<<<<
 *         cdef int size = self.size
 *         if not (0 <= n < size):
 */
  __pyx_v_iptr = NULL;

  /* "pysaxon/xdm.pyx":178
 *         """
 *         cdef cpp.XdmItem *iptr = NULL
 *         cdef int size = self.size             # <<<<<<<<<<<<<<
 *         if not (0 <= n < size):
 *             raise ValueError('Item at %d out of range' % n)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_size = __pyx_t_2;

  /* "pysaxon/xdm.pyx":179
 *         cdef cpp.XdmItem *iptr = NULL
 *         cdef int size = self.size
 *         if not (0 <= n < size):             # <<<<<<<<<<<<<<
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(n)
 */
  __pyx_t_3 = (0 <= __pyx_v_n);
  if (__pyx_t_3) {
    __pyx_t_3 = (__pyx_v_n < __pyx_v_size);
  }
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "pysaxon/xdm.pyx":180
 *         cdef int size = self.size
 *         if not (0 <= n < size):
 *             raise ValueError('Item at %d out of range' % n)             # <<<<<<<<<<<<<<
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(n)
 *         return make_item(iptr, b'or error')
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_n); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Item_at_d_out_of_range, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 180, __pyx_L1_error)

    /* "pysaxon/xdm.pyx":179
 *         cdef cpp.XdmItem *iptr = NULL
 *         cdef int size = self.size
 *         if not (0 <= n < size):             # <<<<<<<<<<<<<<
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(n)
 */
  }

  /* "pysaxon/xdm.pyx":181
 *         if not (0 <= n < size):
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(n)             # <<<<<<<<<<<<<<
 *         return make_item(iptr, b'or error')
 * 
 */
  try {
    __pyx_t_6 = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr)->itemAt(__pyx_v_n);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 181, __pyx_L1_error)
  }
  __pyx_v_iptr = __pyx_t_6;

  /* "pysaxon/xdm.pyx":182
 *             raise ValueError('Item at %d out of range' % n)
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(n)
 *         return make_item(iptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 *     def getStringValue(self, SaxonProcessor proc not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __pyx_f_7pysaxon_3xdm_make_item(__pyx_v_iptr, ((char *)"or error")); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":171
 *             return ptr.size()
 * 
 *     def itemAt(self, int n):             # <<<<<<<<<<<<<<
 *         """Get the n'th item in the value, counting from zero.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pysaxon.xdm.Item.itemAt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":184
 *         return make_item(iptr, b'or error')
 * 
 *     def getStringValue(self, SaxonProcessor proc not None):             # <<<<<<<<<<<<<<
 *         """Get item's string value or None."""
 *         cdef const_char *temp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_5getStringValue(PyObject *__pyx_v_self, PyObject *__pyx_v_proc); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_4Item_4getStringValue[] = "Get item's string value or None.";
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_5getStringValue(PyObject *__pyx_v_self, PyObject *__pyx_v_proc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStringValue (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_proc), __pyx_ptype_7pysaxon_3sxn_SaxonProcessor, 0, "proc", 0))) __PYX_ERR(0, 184, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_4getStringValue(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self), ((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_proc));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_4getStringValue(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self, struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_proc) {
  const char *__pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getStringValue", 0);

  /* "pysaxon/xdm.pyx":187
 *         """Get item's string value or None."""
 *         cdef const_char *temp
 *         print 'In Item.getStringValue()'             # <<<<<<<<<<<<<<
 *         print_ptr('XdmItem*', self.thisptr)
 *         print_ptr('SaxonProcessor*', proc.thisptr)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_Item_getStringValue) < 0) __PYX_ERR(0, 187, __pyx_L1_error)

  /* "pysaxon/xdm.pyx":188
 *         cdef const_char *temp
 *         print 'In Item.getStringValue()'
 *         print_ptr('XdmItem*', self.thisptr)             # <<<<<<<<<<<<<<
 *         print_ptr('SaxonProcessor*', proc.thisptr)
 *         temp = (<cpp.XdmItem*>self.thisptr).getStringValue(proc.thisptr)
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"XdmItem*"), __pyx_v_self->__pyx_base.thisptr);

  /* "pysaxon/xdm.pyx":189
 *         print 'In Item.getStringValue()'
 *         print_ptr('XdmItem*', self.thisptr)
 *         print_ptr('SaxonProcessor*', proc.thisptr)             # <<<<<<<<<<<<<<
 *         temp = (<cpp.XdmItem*>self.thisptr).getStringValue(proc.thisptr)
 *         if temp is NULL:
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"SaxonProcessor*"), __pyx_v_proc->thisptr);

  /* "pysaxon/xdm.pyx":190
 *         print_ptr('XdmItem*', self.thisptr)
 *         print_ptr('SaxonProcessor*', proc.thisptr)
 *         temp = (<cpp.XdmItem*>self.thisptr).getStringValue(proc.thisptr)             # <<<<<<<<<<<<<<
 *         if temp is NULL:
 *             return None
 */
  try {
    __pyx_t_1 = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr)->getStringValue(__pyx_v_proc->thisptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 190, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_1;

  /* "pysaxon/xdm.pyx":191
 *         print_ptr('SaxonProcessor*', proc.thisptr)
 *         temp = (<cpp.XdmItem*>self.thisptr).getStringValue(proc.thisptr)
 *         if temp is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_temp == NULL) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":192
 *         temp = (<cpp.XdmItem*>self.thisptr).getStringValue(proc.thisptr)
 *         if temp is NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             return temp
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/xdm.pyx":191
 *         print_ptr('SaxonProcessor*', proc.thisptr)
 *         temp = (<cpp.XdmItem*>self.thisptr).getStringValue(proc.thisptr)
 *         if temp is NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "pysaxon/xdm.pyx":194
 *             return None
 *         else:
 *             return temp             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_temp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pysaxon/xdm.pyx":184
 *         return make_item(iptr, b'or error')
 * 
 *     def getStringValue(self, SaxonProcessor proc not None):             # <<<<<<<<<<<<<<
 *         """Get item's string value or None."""
 *         cdef const_char *temp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.xdm.Item.getStringValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":196
 *             return temp
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """Iterator to support XdmItem.itemAt() functionality."""
 *         self._size = self.size
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_7__iter__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_4Item_6__iter__[] = "Iterator to support XdmItem.itemAt() functionality.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7pysaxon_3xdm_4Item_6__iter__;
#endif
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_7__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_6__iter__(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_6__iter__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "pysaxon/xdm.pyx":198
 *     def __iter__(self):
 *         """Iterator to support XdmItem.itemAt() functionality."""
 *         self._size = self.size             # <<<<<<<<<<<<<<
 *         self._cntr = 0
 *         return self
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->__pyx_base._size = __pyx_t_2;

  /* "pysaxon/xdm.pyx":199
 *         """Iterator to support XdmItem.itemAt() functionality."""
 *         self._size = self.size
 *         self._cntr = 0             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->__pyx_base._cntr = 0;

  /* "pysaxon/xdm.pyx":200
 *         self._size = self.size
 *         self._cntr = 0
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":196
 *             return temp
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         """Iterator to support XdmItem.itemAt() functionality."""
 *         self._size = self.size
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.xdm.Item.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":202
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         """Get the n'th item in the value's sequence, counting from zero."""
 *         if self._cntr >= self._size:
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_9__next__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_4Item_8__next__[] = "Get the n'th item in the value's sequence, counting from zero.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7pysaxon_3xdm_4Item_8__next__;
#endif
static PyObject *__pyx_pw_7pysaxon_3xdm_4Item_9__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Item_8__next__(((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Item_8__next__(struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_self) {
  XdmItem *__pyx_v_iptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  XdmItem *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "pysaxon/xdm.pyx":204
 *     def __next__(self):
 *         """Get the n'th item in the value's sequence, counting from zero."""
 *         if self._cntr >= self._size:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base._cntr >= __pyx_v_self->__pyx_base._size) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":205
 *         """Get the n'th item in the value's sequence, counting from zero."""
 *         if self._cntr >= self._size:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmItem *iptr = NULL
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(self._cntr)
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    __PYX_ERR(0, 205, __pyx_L1_error)

    /* "pysaxon/xdm.pyx":204
 *     def __next__(self):
 *         """Get the n'th item in the value's sequence, counting from zero."""
 *         if self._cntr >= self._size:             # <<<<<<<<<<<<<<
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL
 */
  }

  /* "pysaxon/xdm.pyx":206
 *         if self._cntr >= self._size:
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL             # <<<<<<<<<<<<<<
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(self._cntr)
 *         self._cntr += 1
 */
  __pyx_v_iptr = NULL;

  /* "pysaxon/xdm.pyx":207
 *             raise StopIteration
 *         cdef cpp.XdmItem *iptr = NULL
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(self._cntr)             # <<<<<<<<<<<<<<
 *         self._cntr += 1
 *         return make_item(iptr, b'or error')
 */
  try {
    __pyx_t_2 = ((XdmItem *)__pyx_v_self->__pyx_base.thisptr)->itemAt(__pyx_v_self->__pyx_base._cntr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 207, __pyx_L1_error)
  }
  __pyx_v_iptr = __pyx_t_2;

  /* "pysaxon/xdm.pyx":208
 *         cdef cpp.XdmItem *iptr = NULL
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(self._cntr)
 *         self._cntr += 1             # <<<<<<<<<<<<<<
 *         return make_item(iptr, b'or error')
 * 
 */
  __pyx_v_self->__pyx_base._cntr = (__pyx_v_self->__pyx_base._cntr + 1);

  /* "pysaxon/xdm.pyx":209
 *         iptr = (<cpp.XdmItem*>self.thisptr).itemAt(self._cntr)
 *         self._cntr += 1
 *         return make_item(iptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __pyx_f_7pysaxon_3xdm_make_item(__pyx_v_iptr, ((char *)"or error")); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":202
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         """Get the n'th item in the value's sequence, counting from zero."""
 *         if self._cntr >= self._size:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.xdm.Item.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":215
 *     """XdmAtomicValue extension type."""
 * 
 *     def __cinit__(self, AtomicValue av=None):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmAtomicValue *avptr = NULL
 *         if av is None:
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3xdm_11AtomicValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pysaxon_3xdm_11AtomicValue_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_av = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_av,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_av);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 215, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_av = ((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 215, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.xdm.AtomicValue.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_av), __pyx_ptype_7pysaxon_3xdm_AtomicValue, 1, "av", 0))) __PYX_ERR(0, 215, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3xdm_11AtomicValue___cinit__(((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)__pyx_v_self), __pyx_v_av);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3xdm_11AtomicValue___cinit__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_av) {
  XdmAtomicValue *__pyx_v_avptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  XdmAtomicValue *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pysaxon/xdm.pyx":216
 * 
 *     def __cinit__(self, AtomicValue av=None):
 *         cdef cpp.XdmAtomicValue *avptr = NULL             # <<<<<<<<<<<<<<
 *         if av is None:
 *             avptr = new cpp.XdmAtomicValue()
 */
  __pyx_v_avptr = NULL;

  /* "pysaxon/xdm.pyx":217
 *     def __cinit__(self, AtomicValue av=None):
 *         cdef cpp.XdmAtomicValue *avptr = NULL
 *         if av is None:             # <<<<<<<<<<<<<<
 *             avptr = new cpp.XdmAtomicValue()
 *         else:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_av) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":218
 *         cdef cpp.XdmAtomicValue *avptr = NULL
 *         if av is None:
 *             avptr = new cpp.XdmAtomicValue()             # <<<<<<<<<<<<<<
 *         else:
 *             avptr = new cpp.XdmAtomicValue((<cpp.XdmAtomicValue*>av.thisptr)[0])
 */
    try {
      __pyx_t_3 = new XdmAtomicValue();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    __pyx_v_avptr = __pyx_t_3;

    /* "pysaxon/xdm.pyx":217
 *     def __cinit__(self, AtomicValue av=None):
 *         cdef cpp.XdmAtomicValue *avptr = NULL
 *         if av is None:             # <<<<<<<<<<<<<<
 *             avptr = new cpp.XdmAtomicValue()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pysaxon/xdm.pyx":220
 *             avptr = new cpp.XdmAtomicValue()
 *         else:
 *             avptr = new cpp.XdmAtomicValue((<cpp.XdmAtomicValue*>av.thisptr)[0])             # <<<<<<<<<<<<<<
 * 
 *         if avptr is NULL:
 */
  /*else*/ {
    try {
      __pyx_t_3 = new XdmAtomicValue((((XdmAtomicValue *)__pyx_v_av->__pyx_base.__pyx_base.thisptr)[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 220, __pyx_L1_error)
    }
    __pyx_v_avptr = __pyx_t_3;
  }
  __pyx_L3:;

  /* "pysaxon/xdm.pyx":222
 *             avptr = new cpp.XdmAtomicValue((<cpp.XdmAtomicValue*>av.thisptr)[0])
 * 
 *         if avptr is NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError("xdm.AtomicValue object's pointer is NULL")
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_avptr == NULL) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":223
 * 
 *         if avptr is NULL:
 *             raise ValueError("xdm.AtomicValue object's pointer is NULL")             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = <cpp.XdmValue*>avptr
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 223, __pyx_L1_error)

    /* "pysaxon/xdm.pyx":222
 *             avptr = new cpp.XdmAtomicValue((<cpp.XdmAtomicValue*>av.thisptr)[0])
 * 
 *         if avptr is NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError("xdm.AtomicValue object's pointer is NULL")
 *         else:
 */
  }

  /* "pysaxon/xdm.pyx":225
 *             raise ValueError("xdm.AtomicValue object's pointer is NULL")
 *         else:
 *             self.thisptr = <cpp.XdmValue*>avptr             # <<<<<<<<<<<<<<
 *             self._size = 0
 *             self._cntr = 0
 */
  /*else*/ {
    __pyx_v_self->__pyx_base.__pyx_base.thisptr = ((XdmValue *)__pyx_v_avptr);

    /* "pysaxon/xdm.pyx":226
 *         else:
 *             self.thisptr = <cpp.XdmValue*>avptr
 *             self._size = 0             # <<<<<<<<<<<<<<
 *             self._cntr = 0
 * 
 */
    __pyx_v_self->__pyx_base.__pyx_base._size = 0;

    /* "pysaxon/xdm.pyx":227
 *             self.thisptr = <cpp.XdmValue*>avptr
 *             self._size = 0
 *             self._cntr = 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.__pyx_base._cntr = 0;
  }

  /* "pysaxon/xdm.pyx":215
 *     """XdmAtomicValue extension type."""
 * 
 *     def __cinit__(self, AtomicValue av=None):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmAtomicValue *avptr = NULL
 *         if av is None:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pysaxon.xdm.AtomicValue.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":229
 *             self._cntr = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmAtomicValue *ptr
 *         if self.thisptr is not NULL:
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3xdm_11AtomicValue_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3xdm_11AtomicValue_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3xdm_11AtomicValue_2__dealloc__(((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3xdm_11AtomicValue_2__dealloc__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self) {
  XdmAtomicValue *__pyx_v_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/xdm.pyx":231
 *     def __dealloc__(self):
 *         cdef cpp.XdmAtomicValue *ptr
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             ptr = <cpp.XdmAtomicValue*>self.thisptr
 *             del ptr
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":232
 *         cdef cpp.XdmAtomicValue *ptr
 *         if self.thisptr is not NULL:
 *             ptr = <cpp.XdmAtomicValue*>self.thisptr             # <<<<<<<<<<<<<<
 *             del ptr
 *             self.thisptr = NULL
 */
    __pyx_v_ptr = ((XdmAtomicValue *)__pyx_v_self->__pyx_base.__pyx_base.thisptr);

    /* "pysaxon/xdm.pyx":233
 *         if self.thisptr is not NULL:
 *             ptr = <cpp.XdmAtomicValue*>self.thisptr
 *             del ptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_ptr;

    /* "pysaxon/xdm.pyx":234
 *             ptr = <cpp.XdmAtomicValue*>self.thisptr
 *             del ptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
    __pyx_v_self->__pyx_base.__pyx_base.thisptr = NULL;

    /* "pysaxon/xdm.pyx":231
 *     def __dealloc__(self):
 *         cdef cpp.XdmAtomicValue *ptr
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             ptr = <cpp.XdmAtomicValue*>self.thisptr
 *             del ptr
 */
  }

  /* "pysaxon/xdm.pyx":229
 *             self._cntr = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmAtomicValue *ptr
 *         if self.thisptr is not NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/xdm.pyx":237
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>(<cpp.XdmAtomicValue*>self.thisptr).getType()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_11AtomicValue_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_11AtomicValue_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_11AtomicValue_4type___get__(((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_11AtomicValue_4type___get__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XDM_TYPE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":238
 *     property type:
 *         def __get__(self):
 *             return <cpp.XDM_TYPE>(<cpp.XdmAtomicValue*>self.thisptr).getType()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, string ty):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmAtomicValue *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getType();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 238, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_XDM_TYPE(((XDM_TYPE)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":237
 * 
 *     property type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>(<cpp.XdmAtomicValue*>self.thisptr).getType()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.AtomicValue.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":240
 *             return <cpp.XDM_TYPE>(<cpp.XdmAtomicValue*>self.thisptr).getType()
 * 
 *         def __set__(self, string ty):             # <<<<<<<<<<<<<<
 *             (<cpp.XdmAtomicValue*>self.thisptr).setType(ty)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3xdm_11AtomicValue_4type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ty); /*proto*/
static int __pyx_pw_7pysaxon_3xdm_11AtomicValue_4type_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_ty) {
  std::string __pyx_v_ty;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_ty); {
    __pyx_v_ty = __pyx_convert_string_from_py_std__in_string(__pyx_arg_ty); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.xdm.AtomicValue.type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3xdm_11AtomicValue_4type_2__set__(((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)__pyx_v_self), ((std::string)__pyx_v_ty));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3xdm_11AtomicValue_4type_2__set__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self, std::string __pyx_v_ty) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pysaxon/xdm.pyx":241
 * 
 *         def __set__(self, string ty):
 *             (<cpp.XdmAtomicValue*>self.thisptr).setType(ty)             # <<<<<<<<<<<<<<
 * 
 *     property isAtomic:
 */
  try {
    ((XdmAtomicValue *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->setType(__pyx_v_ty);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 241, __pyx_L1_error)
  }

  /* "pysaxon/xdm.pyx":240
 *             return <cpp.XDM_TYPE>(<cpp.XdmAtomicValue*>self.thisptr).getType()
 * 
 *         def __set__(self, string ty):             # <<<<<<<<<<<<<<
 *             (<cpp.XdmAtomicValue*>self.thisptr).setType(ty)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.xdm.AtomicValue.type.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":244
 * 
 *     property isAtomic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>(<cpp.XdmAtomicValue*>self.thisptr).isAtomic()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_11AtomicValue_8isAtomic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_11AtomicValue_8isAtomic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_11AtomicValue_8isAtomic___get__(((struct __pyx_obj_7pysaxon_3xdm_AtomicValue *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_11AtomicValue_8isAtomic___get__(struct __pyx_obj_7pysaxon_3xdm_AtomicValue *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":245
 *     property isAtomic:
 *         def __get__(self):
 *             return <bint>(<cpp.XdmAtomicValue*>self.thisptr).isAtomic()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((((XdmAtomicValue *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->isAtomic() != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":244
 * 
 *     property isAtomic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>(<cpp.XdmAtomicValue*>self.thisptr).isAtomic()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.xdm.AtomicValue.isAtomic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":251
 *     """XdmNode extension type."""
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmNode *ptr
 *         if self.thisptr is not NULL:
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3xdm_4Node_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3xdm_4Node_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3xdm_4Node___dealloc__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3xdm_4Node___dealloc__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  XdmNode *__pyx_v_ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/xdm.pyx":253
 *     def __dealloc__(self):
 *         cdef cpp.XdmNode *ptr
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             ptr = <cpp.XdmNode*>self.thisptr
 *             del ptr
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/xdm.pyx":254
 *         cdef cpp.XdmNode *ptr
 *         if self.thisptr is not NULL:
 *             ptr = <cpp.XdmNode*>self.thisptr             # <<<<<<<<<<<<<<
 *             del ptr
 *             self.thisptr = NULL
 */
    __pyx_v_ptr = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr);

    /* "pysaxon/xdm.pyx":255
 *         if self.thisptr is not NULL:
 *             ptr = <cpp.XdmNode*>self.thisptr
 *             del ptr             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 * 
 */
    delete __pyx_v_ptr;

    /* "pysaxon/xdm.pyx":256
 *             ptr = <cpp.XdmNode*>self.thisptr
 *             del ptr
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     property isAtomic:
 */
    __pyx_v_self->__pyx_base.__pyx_base.thisptr = NULL;

    /* "pysaxon/xdm.pyx":253
 *     def __dealloc__(self):
 *         cdef cpp.XdmNode *ptr
 *         if self.thisptr is not NULL:             # <<<<<<<<<<<<<<
 *             ptr = <cpp.XdmNode*>self.thisptr
 *             del ptr
 */
  }

  /* "pysaxon/xdm.pyx":251
 *     """XdmNode extension type."""
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmNode *ptr
 *         if self.thisptr is not NULL:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/xdm.pyx":259
 * 
 *     property isAtomic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>(<cpp.XdmNode*>self.thisptr).isAtomic()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_8isAtomic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_8isAtomic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_8isAtomic___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_8isAtomic___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":260
 *     property isAtomic:
 *         def __get__(self):
 *             return <bint>(<cpp.XdmNode*>self.thisptr).isAtomic()             # <<<<<<<<<<<<<<
 * 
 *     property type:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->isAtomic();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 260, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":259
 * 
 *     property isAtomic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>(<cpp.XdmNode*>self.thisptr).isAtomic()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Node.isAtomic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":264
 *     property type:
 *         """Type (XDM_TYPE value) of the node."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>(<cpp.XdmNode*>self.thisptr).getType()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_4type___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_4type___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XDM_TYPE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":265
 *         """Type (XDM_TYPE value) of the node."""
 *         def __get__(self):
 *             return <cpp.XDM_TYPE>(<cpp.XdmNode*>self.thisptr).getType()             # <<<<<<<<<<<<<<
 * 
 *     property kind:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getType();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 265, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_XDM_TYPE(((XDM_TYPE)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":264
 *     property type:
 *         """Type (XDM_TYPE value) of the node."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <cpp.XDM_TYPE>(<cpp.XdmNode*>self.thisptr).getType()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Node.type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":269
 *     property kind:
 *         """Node's kind (XDM_NODE_KIND) as an all-lowercase string."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef str kind
 *             cdef cpp.XDM_NODE_KIND nk
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_4kind_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_4kind_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_4kind___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_4kind___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_v_kind = 0;
  XDM_NODE_KIND __pyx_v_nk;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XDM_NODE_KIND __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":272
 *             cdef str kind
 *             cdef cpp.XDM_NODE_KIND nk
 *             nk = (<cpp.XdmNode*>self.thisptr).getNodeKind()             # <<<<<<<<<<<<<<
 *             if nk == cpp.DOCUMENT:
 *                 kind = 'document'
 */
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getNodeKind();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __pyx_v_nk = __pyx_t_1;

  /* "pysaxon/xdm.pyx":273
 *             cdef cpp.XDM_NODE_KIND nk
 *             nk = (<cpp.XdmNode*>self.thisptr).getNodeKind()
 *             if nk == cpp.DOCUMENT:             # <<<<<<<<<<<<<<
 *                 kind = 'document'
 *             elif nk == cpp.ELEMENT:
 */
  switch (__pyx_v_nk) {
    case DOCUMENT:

    /* "pysaxon/xdm.pyx":274
 *             nk = (<cpp.XdmNode*>self.thisptr).getNodeKind()
 *             if nk == cpp.DOCUMENT:
 *                 kind = 'document'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.ELEMENT:
 *                 kind = 'element'
 */
    __Pyx_INCREF(__pyx_n_s_document);
    __pyx_v_kind = __pyx_n_s_document;

    /* "pysaxon/xdm.pyx":273
 *             cdef cpp.XDM_NODE_KIND nk
 *             nk = (<cpp.XdmNode*>self.thisptr).getNodeKind()
 *             if nk == cpp.DOCUMENT:             # <<<<<<<<<<<<<<
 *                 kind = 'document'
 *             elif nk == cpp.ELEMENT:
 */
    break;

    /* "pysaxon/xdm.pyx":275
 *             if nk == cpp.DOCUMENT:
 *                 kind = 'document'
 *             elif nk == cpp.ELEMENT:             # <<<<<<<<<<<<<<
 *                 kind = 'element'
 *             elif nk == cpp.ATTRIBUTE:
 */
    case ELEMENT:

    /* "pysaxon/xdm.pyx":276
 *                 kind = 'document'
 *             elif nk == cpp.ELEMENT:
 *                 kind = 'element'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.ATTRIBUTE:
 *                 kind = 'attribute'
 */
    __Pyx_INCREF(__pyx_n_s_element);
    __pyx_v_kind = __pyx_n_s_element;

    /* "pysaxon/xdm.pyx":275
 *             if nk == cpp.DOCUMENT:
 *                 kind = 'document'
 *             elif nk == cpp.ELEMENT:             # <<<<<<<<<<<<<<
 *                 kind = 'element'
 *             elif nk == cpp.ATTRIBUTE:
 */
    break;

    /* "pysaxon/xdm.pyx":277
 *             elif nk == cpp.ELEMENT:
 *                 kind = 'element'
 *             elif nk == cpp.ATTRIBUTE:             # <<<<<<<<<<<<<<
 *                 kind = 'attribute'
 *             elif nk == cpp.TEXT:
 */
    case ATTRIBUTE:

    /* "pysaxon/xdm.pyx":278
 *                 kind = 'element'
 *             elif nk == cpp.ATTRIBUTE:
 *                 kind = 'attribute'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.TEXT:
 *                 kind = 'text'
 */
    __Pyx_INCREF(__pyx_n_s_attribute);
    __pyx_v_kind = __pyx_n_s_attribute;

    /* "pysaxon/xdm.pyx":277
 *             elif nk == cpp.ELEMENT:
 *                 kind = 'element'
 *             elif nk == cpp.ATTRIBUTE:             # <<<<<<<<<<<<<<
 *                 kind = 'attribute'
 *             elif nk == cpp.TEXT:
 */
    break;

    /* "pysaxon/xdm.pyx":279
 *             elif nk == cpp.ATTRIBUTE:
 *                 kind = 'attribute'
 *             elif nk == cpp.TEXT:             # <<<<<<<<<<<<<<
 *                 kind = 'text'
 *             elif nk == cpp.COMMENT:
 */
    case TEXT:

    /* "pysaxon/xdm.pyx":280
 *                 kind = 'attribute'
 *             elif nk == cpp.TEXT:
 *                 kind = 'text'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.COMMENT:
 *                 kind = 'comment'
 */
    __Pyx_INCREF(__pyx_n_s_text);
    __pyx_v_kind = __pyx_n_s_text;

    /* "pysaxon/xdm.pyx":279
 *             elif nk == cpp.ATTRIBUTE:
 *                 kind = 'attribute'
 *             elif nk == cpp.TEXT:             # <<<<<<<<<<<<<<
 *                 kind = 'text'
 *             elif nk == cpp.COMMENT:
 */
    break;

    /* "pysaxon/xdm.pyx":281
 *             elif nk == cpp.TEXT:
 *                 kind = 'text'
 *             elif nk == cpp.COMMENT:             # <<<<<<<<<<<<<<
 *                 kind = 'comment'
 *             elif nk == cpp.PROCESSING_INSTRUCTION:
 */
    case COMMENT:

    /* "pysaxon/xdm.pyx":282
 *                 kind = 'text'
 *             elif nk == cpp.COMMENT:
 *                 kind = 'comment'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.PROCESSING_INSTRUCTION:
 *                 kind = 'processing-instruction'
 */
    __Pyx_INCREF(__pyx_n_s_comment);
    __pyx_v_kind = __pyx_n_s_comment;

    /* "pysaxon/xdm.pyx":281
 *             elif nk == cpp.TEXT:
 *                 kind = 'text'
 *             elif nk == cpp.COMMENT:             # <<<<<<<<<<<<<<
 *                 kind = 'comment'
 *             elif nk == cpp.PROCESSING_INSTRUCTION:
 */
    break;

    /* "pysaxon/xdm.pyx":283
 *             elif nk == cpp.COMMENT:
 *                 kind = 'comment'
 *             elif nk == cpp.PROCESSING_INSTRUCTION:             # <<<<<<<<<<<<<<
 *                 kind = 'processing-instruction'
 *             elif nk == cpp.NAMESPACE:
 */
    case PROCESSING_INSTRUCTION:

    /* "pysaxon/xdm.pyx":284
 *                 kind = 'comment'
 *             elif nk == cpp.PROCESSING_INSTRUCTION:
 *                 kind = 'processing-instruction'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.NAMESPACE:
 *                 kind = 'namespace'
 */
    __Pyx_INCREF(__pyx_kp_s_processing_instruction);
    __pyx_v_kind = __pyx_kp_s_processing_instruction;

    /* "pysaxon/xdm.pyx":283
 *             elif nk == cpp.COMMENT:
 *                 kind = 'comment'
 *             elif nk == cpp.PROCESSING_INSTRUCTION:             # <<<<<<<<<<<<<<
 *                 kind = 'processing-instruction'
 *             elif nk == cpp.NAMESPACE:
 */
    break;

    /* "pysaxon/xdm.pyx":285
 *             elif nk == cpp.PROCESSING_INSTRUCTION:
 *                 kind = 'processing-instruction'
 *             elif nk == cpp.NAMESPACE:             # <<<<<<<<<<<<<<
 *                 kind = 'namespace'
 *             elif nk == cpp.UNKNOWN:
 */
    case NAMESPACE:

    /* "pysaxon/xdm.pyx":286
 *                 kind = 'processing-instruction'
 *             elif nk == cpp.NAMESPACE:
 *                 kind = 'namespace'             # <<<<<<<<<<<<<<
 *             elif nk == cpp.UNKNOWN:
 *                 kind = 'unknown'
 */
    __Pyx_INCREF(__pyx_n_s_namespace);
    __pyx_v_kind = __pyx_n_s_namespace;

    /* "pysaxon/xdm.pyx":285
 *             elif nk == cpp.PROCESSING_INSTRUCTION:
 *                 kind = 'processing-instruction'
 *             elif nk == cpp.NAMESPACE:             # <<<<<<<<<<<<<<
 *                 kind = 'namespace'
 *             elif nk == cpp.UNKNOWN:
 */
    break;

    /* "pysaxon/xdm.pyx":287
 *             elif nk == cpp.NAMESPACE:
 *                 kind = 'namespace'
 *             elif nk == cpp.UNKNOWN:             # <<<<<<<<<<<<<<
 *                 kind = 'unknown'
 *             else:
 */
    case UNKNOWN:

    /* "pysaxon/xdm.pyx":288
 *                 kind = 'namespace'
 *             elif nk == cpp.UNKNOWN:
 *                 kind = 'unknown'             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError('Unknown node kind: %d' % nk)
 */
    __Pyx_INCREF(__pyx_n_s_unknown);
    __pyx_v_kind = __pyx_n_s_unknown;

    /* "pysaxon/xdm.pyx":287
 *             elif nk == cpp.NAMESPACE:
 *                 kind = 'namespace'
 *             elif nk == cpp.UNKNOWN:             # <<<<<<<<<<<<<<
 *                 kind = 'unknown'
 *             else:
 */
    break;
    default:

    /* "pysaxon/xdm.pyx":290
 *                 kind = 'unknown'
 *             else:
 *                 raise ValueError('Unknown node kind: %d' % nk)             # <<<<<<<<<<<<<<
 *             return kind
 * 
 */
    __pyx_t_2 = __Pyx_PyInt_From_XDM_NODE_KIND(__pyx_v_nk); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Unknown_node_kind_d, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 290, __pyx_L1_error)
    break;
  }

  /* "pysaxon/xdm.pyx":291
 *             else:
 *                 raise ValueError('Unknown node kind: %d' % nk)
 *             return kind             # <<<<<<<<<<<<<<
 * 
 *     property name:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_kind);
  __pyx_r = __pyx_v_kind;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":269
 *     property kind:
 *         """Node's kind (XDM_NODE_KIND) as an all-lowercase string."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef str kind
 *             cdef cpp.XDM_NODE_KIND nk
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.xdm.Node.kind.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":299
 *         return None.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getNodeName()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_4name___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_4name___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  const char *__pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":301
 *         def __get__(self):
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getNodeName()             # <<<<<<<<<<<<<<
 *             if temp == NULL:
 *                 return None
 */
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getNodeName();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 301, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_1;

  /* "pysaxon/xdm.pyx":302
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getNodeName()
 *             if temp == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_2 = ((__pyx_v_temp == NULL) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":303
 *             temp = (<cpp.XdmNode*>self.thisptr).getNodeName()
 *             if temp == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 temp
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/xdm.pyx":302
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getNodeName()
 *             if temp == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "pysaxon/xdm.pyx":305
 *                 return None
 *             else:
 *                 temp             # <<<<<<<<<<<<<<
 * 
 *     property baseuri:
 */
  /*else*/ {
    __pyx_v_temp;
  }

  /* "pysaxon/xdm.pyx":299
 *         return None.
 *         """
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getNodeName()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.xdm.Node.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":309
 *     property baseuri:
 *         """Get node's base URI or None."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getBaseUri()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_7baseuri_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_7baseuri_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_7baseuri___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_7baseuri___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  const char *__pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":311
 *         def __get__(self):
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getBaseUri()             # <<<<<<<<<<<<<<
 *             if temp == NULL:
 *                 return None
 */
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getBaseUri();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 311, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_1;

  /* "pysaxon/xdm.pyx":312
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getBaseUri()
 *             if temp == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_2 = ((__pyx_v_temp == NULL) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":313
 *             temp = (<cpp.XdmNode*>self.thisptr).getBaseUri()
 *             if temp == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 temp
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/xdm.pyx":312
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getBaseUri()
 *             if temp == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "pysaxon/xdm.pyx":315
 *                 return None
 *             else:
 *                 temp             # <<<<<<<<<<<<<<
 * 
 *     # Causes ImportError due to missing symbol.
 */
  /*else*/ {
    __pyx_v_temp;
  }

  /* "pysaxon/xdm.pyx":309
 *     property baseuri:
 *         """Get node's base URI or None."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef const_char *temp
 *             temp = (<cpp.XdmNode*>self.thisptr).getBaseUri()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.xdm.Node.baseuri.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":333
 *     property parent:
 *         """Get node's parent node."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cpp.XdmNode *nptr = NULL
 *             nptr = (<cpp.XdmNode*>self.thisptr).getParent()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_6parent___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_6parent___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  XdmNode *__pyx_v_nptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XdmNode *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":334
 *         """Get node's parent node."""
 *         def __get__(self):
 *             cdef cpp.XdmNode *nptr = NULL             # <<<<<<<<<<<<<<
 *             nptr = (<cpp.XdmNode*>self.thisptr).getParent()
 *             return make_node(nptr, b'or None')
 */
  __pyx_v_nptr = NULL;

  /* "pysaxon/xdm.pyx":335
 *         def __get__(self):
 *             cdef cpp.XdmNode *nptr = NULL
 *             nptr = (<cpp.XdmNode*>self.thisptr).getParent()             # <<<<<<<<<<<<<<
 *             return make_node(nptr, b'or None')
 * 
 */
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getParent();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 335, __pyx_L1_error)
  }
  __pyx_v_nptr = __pyx_t_1;

  /* "pysaxon/xdm.pyx":336
 *             cdef cpp.XdmNode *nptr = NULL
 *             nptr = (<cpp.XdmNode*>self.thisptr).getParent()
 *             return make_node(nptr, b'or None')             # <<<<<<<<<<<<<<
 * 
 *     def getAttributeValue(self, char *name):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pysaxon_3xdm_make_node(__pyx_v_nptr, ((char *)"or None")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":333
 *     property parent:
 *         """Get node's parent node."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef cpp.XdmNode *nptr = NULL
 *             nptr = (<cpp.XdmNode*>self.thisptr).getParent()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Node.parent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":338
 *             return make_node(nptr, b'or None')
 * 
 *     def getAttributeValue(self, char *name):             # <<<<<<<<<<<<<<
 *         """Get attribute's value as a bytes object or None."""
 *         cdef const_char *temp
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_3getAttributeValue(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_7pysaxon_3xdm_4Node_2getAttributeValue[] = "Get attribute's value as a bytes object or None.";
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_3getAttributeValue(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAttributeValue (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 338, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.xdm.Node.getAttributeValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_2getAttributeValue(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self), ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_2getAttributeValue(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self, char *__pyx_v_name) {
  const char *__pyx_v_temp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("getAttributeValue", 0);

  /* "pysaxon/xdm.pyx":341
 *         """Get attribute's value as a bytes object or None."""
 *         cdef const_char *temp
 *         temp = (<cpp.XdmNode*>self.thisptr).getAttributeValue(name)             # <<<<<<<<<<<<<<
 *         if temp == NULL:
 *             return None
 */
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getAttributeValue(__pyx_v_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 341, __pyx_L1_error)
  }
  __pyx_v_temp = __pyx_t_1;

  /* "pysaxon/xdm.pyx":342
 *         cdef const_char *temp
 *         temp = (<cpp.XdmNode*>self.thisptr).getAttributeValue(name)
 *         if temp == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_2 = ((__pyx_v_temp == NULL) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/xdm.pyx":343
 *         temp = (<cpp.XdmNode*>self.thisptr).getAttributeValue(name)
 *         if temp == NULL:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             temp
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/xdm.pyx":342
 *         cdef const_char *temp
 *         temp = (<cpp.XdmNode*>self.thisptr).getAttributeValue(name)
 *         if temp == NULL:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  }

  /* "pysaxon/xdm.pyx":345
 *             return None
 *         else:
 *             temp             # <<<<<<<<<<<<<<
 * 
 *     property attribute_count:
 */
  /*else*/ {
    __pyx_v_temp;
  }

  /* "pysaxon/xdm.pyx":338
 *             return make_node(nptr, b'or None')
 * 
 *     def getAttributeValue(self, char *name):             # <<<<<<<<<<<<<<
 *         """Get attribute's value as a bytes object or None."""
 *         cdef const_char *temp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.xdm.Node.getAttributeValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":349
 *     property attribute_count:
 *         """Get the number of the node's attributes."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<cpp.XdmNode*>self.thisptr).getAttributeCount()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_15attribute_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_15attribute_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_15attribute_count___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_15attribute_count___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":350
 *         """Get the number of the node's attributes."""
 *         def __get__(self):
 *             return (<cpp.XdmNode*>self.thisptr).getAttributeCount()             # <<<<<<<<<<<<<<
 * 
 *     property children_count:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getAttributeCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 350, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":349
 *     property attribute_count:
 *         """Get the number of the node's attributes."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<cpp.XdmNode*>self.thisptr).getAttributeCount()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Node.attribute_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":354
 *     property children_count:
 *         """Get the number of the node's children."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<cpp.XdmNode*>self.thisptr).getChildCount()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_14children_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_14children_count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_14children_count___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_14children_count___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":355
 *         """Get the number of the node's children."""
 *         def __get__(self):
 *             return (<cpp.XdmNode*>self.thisptr).getChildCount()             # <<<<<<<<<<<<<<
 * 
 *     property attributes:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getChildCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 355, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":354
 *     property children_count:
 *         """Get the number of the node's children."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return (<cpp.XdmNode*>self.thisptr).getChildCount()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.xdm.Node.children_count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":359
 *     property attributes:
 *         """Get node's attributes as a list of Node objects."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef list nodes = []
 *             cdef cpp.XdmNode **n
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_10attributes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_10attributes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_10attributes___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_10attributes___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_v_nodes = 0;
  XdmNode **__pyx_v_n;
  int __pyx_v_count;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  XdmNode **__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":360
 *         """Get node's attributes as a list of Node objects."""
 *         def __get__(self):
 *             cdef list nodes = []             # <<<<<<<<<<<<<<
 *             cdef cpp.XdmNode **n
 *             cdef int count, i
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":364
 *             cdef int count, i
 * 
 *             count = (<cpp.XdmNode*>self.thisptr).getAttributeCount()             # <<<<<<<<<<<<<<
 *             if count > 0:
 *                 n = (<cpp.XdmNode*>self.thisptr).getAttributeNodes()
 */
  try {
    __pyx_t_2 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getAttributeCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 364, __pyx_L1_error)
  }
  __pyx_v_count = __pyx_t_2;

  /* "pysaxon/xdm.pyx":365
 * 
 *             count = (<cpp.XdmNode*>self.thisptr).getAttributeCount()
 *             if count > 0:             # <<<<<<<<<<<<<<
 *                 n = (<cpp.XdmNode*>self.thisptr).getAttributeNodes()
 *                 for i in range(count):
 */
  __pyx_t_3 = ((__pyx_v_count > 0) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/xdm.pyx":366
 *             count = (<cpp.XdmNode*>self.thisptr).getAttributeCount()
 *             if count > 0:
 *                 n = (<cpp.XdmNode*>self.thisptr).getAttributeNodes()             # <<<<<<<<<<<<<<
 *                 for i in range(count):
 *                     nodes.append(make_node(n[i], b'or error'))
 */
    try {
      __pyx_t_4 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getAttributeNodes();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 366, __pyx_L1_error)
    }
    __pyx_v_n = __pyx_t_4;

    /* "pysaxon/xdm.pyx":367
 *             if count > 0:
 *                 n = (<cpp.XdmNode*>self.thisptr).getAttributeNodes()
 *                 for i in range(count):             # <<<<<<<<<<<<<<
 *                     nodes.append(make_node(n[i], b'or error'))
 * 
 */
    __pyx_t_2 = __pyx_v_count;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_2; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "pysaxon/xdm.pyx":368
 *                 n = (<cpp.XdmNode*>self.thisptr).getAttributeNodes()
 *                 for i in range(count):
 *                     nodes.append(make_node(n[i], b'or error'))             # <<<<<<<<<<<<<<
 * 
 *             return nodes
 */
      __pyx_t_1 = __pyx_f_7pysaxon_3xdm_make_node((__pyx_v_n[__pyx_v_i]), ((char *)"or error")); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_nodes, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pysaxon/xdm.pyx":365
 * 
 *             count = (<cpp.XdmNode*>self.thisptr).getAttributeCount()
 *             if count > 0:             # <<<<<<<<<<<<<<
 *                 n = (<cpp.XdmNode*>self.thisptr).getAttributeNodes()
 *                 for i in range(count):
 */
  }

  /* "pysaxon/xdm.pyx":370
 *                     nodes.append(make_node(n[i], b'or error'))
 * 
 *             return nodes             # <<<<<<<<<<<<<<
 * 
 *     property children:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_nodes);
  __pyx_r = __pyx_v_nodes;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":359
 *     property attributes:
 *         """Get node's attributes as a list of Node objects."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef list nodes = []
 *             cdef cpp.XdmNode **n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.xdm.Node.attributes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/xdm.pyx":374
 *     property children:
 *         """Get node's children as a list of Node objects."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef list nodes = []
 *             cdef cpp.XdmNode **n
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_8children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3xdm_4Node_8children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3xdm_4Node_8children___get__(((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3xdm_4Node_8children___get__(struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_self) {
  PyObject *__pyx_v_nodes = 0;
  XdmNode **__pyx_v_n;
  int __pyx_v_count;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  XdmNode **__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/xdm.pyx":375
 *         """Get node's children as a list of Node objects."""
 *         def __get__(self):
 *             cdef list nodes = []             # <<<<<<<<<<<<<<
 *             cdef cpp.XdmNode **n
 *             cdef int count, i
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_nodes = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":379
 *             cdef int count, i
 * 
 *             count = (<cpp.XdmNode*>self.thisptr).getChildCount()             # <<<<<<<<<<<<<<
 *             if count > 0:
 *                 n = (<cpp.XdmNode*>self.thisptr).getChildren()
 */
  try {
    __pyx_t_2 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getChildCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 379, __pyx_L1_error)
  }
  __pyx_v_count = __pyx_t_2;

  /* "pysaxon/xdm.pyx":380
 * 
 *             count = (<cpp.XdmNode*>self.thisptr).getChildCount()
 *             if count > 0:             # <<<<<<<<<<<<<<
 *                 n = (<cpp.XdmNode*>self.thisptr).getChildren()
 *                 for i in range(count):
 */
  __pyx_t_3 = ((__pyx_v_count > 0) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/xdm.pyx":381
 *             count = (<cpp.XdmNode*>self.thisptr).getChildCount()
 *             if count > 0:
 *                 n = (<cpp.XdmNode*>self.thisptr).getChildren()             # <<<<<<<<<<<<<<
 *                 for i in range(count):
 *                     nodes.append(make_node(n[i], b'or error'))
 */
    try {
      __pyx_t_4 = ((XdmNode *)__pyx_v_self->__pyx_base.__pyx_base.thisptr)->getChildren();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 381, __pyx_L1_error)
    }
    __pyx_v_n = __pyx_t_4;

    /* "pysaxon/xdm.pyx":382
 *             if count > 0:
 *                 n = (<cpp.XdmNode*>self.thisptr).getChildren()
 *                 for i in range(count):             # <<<<<<<<<<<<<<
 *                     nodes.append(make_node(n[i], b'or error'))
 * 
 */
    __pyx_t_2 = __pyx_v_count;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_2; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "pysaxon/xdm.pyx":383
 *                 n = (<cpp.XdmNode*>self.thisptr).getChildren()
 *                 for i in range(count):
 *                     nodes.append(make_node(n[i], b'or error'))             # <<<<<<<<<<<<<<
 * 
 *             return nodes
 */
      __pyx_t_1 = __pyx_f_7pysaxon_3xdm_make_node((__pyx_v_n[__pyx_v_i]), ((char *)"or error")); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_nodes, __pyx_t_1); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(0, 383, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "pysaxon/xdm.pyx":380
 * 
 *             count = (<cpp.XdmNode*>self.thisptr).getChildCount()
 *             if count > 0:             # <<<<<<<<<<<<<<
 *                 n = (<cpp.XdmNode*>self.thisptr).getChildren()
 *                 for i in range(count):
 */
  }

  /* "pysaxon/xdm.pyx":385
 *                     nodes.append(make_node(n[i], b'or error'))
 * 
 *             return nodes             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_nodes);
  __pyx_r = __pyx_v_nodes;
  goto __pyx_L0;

  /* "pysaxon/xdm.pyx":374
 *     property children:
 *         """Get node's children as a list of Node objects."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef list nodes = []
 *             cdef cpp.XdmNode **n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.xdm.Node.children.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nodes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7pysaxon_3xdm_Value(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pysaxon_3xdm_5Value_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3xdm_Value(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3xdm_5Value_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_5Value_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_5Value_4type_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3xdm_5Value_processor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7pysaxon_3xdm_5Value_9processor_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_5Value_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_5Value_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_7pysaxon_3xdm_Value[] = {
  {"getHead", (PyCFunction)__pyx_pw_7pysaxon_3xdm_5Value_5getHead, METH_NOARGS, __pyx_doc_7pysaxon_3xdm_5Value_4getHead},
  {"itemAt", (PyCFunction)__pyx_pw_7pysaxon_3xdm_5Value_7itemAt, METH_O, __pyx_doc_7pysaxon_3xdm_5Value_6itemAt},
  {"checkFailures", (PyCFunction)__pyx_pw_7pysaxon_3xdm_5Value_9checkFailures, METH_NOARGS, 0},
  {"__next__", (PyCFunction)__pyx_pw_7pysaxon_3xdm_5Value_13__next__, METH_NOARGS|METH_COEXIST, __pyx_doc_7pysaxon_3xdm_5Value_12__next__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3xdm_Value[] = {
  {(char *)"type", __pyx_getprop_7pysaxon_3xdm_5Value_type, 0, (char *)0, 0},
  {(char *)"processor", 0, __pyx_setprop_7pysaxon_3xdm_5Value_processor, (char *)"Set SaxonProcessor for this xdm.Value object.", 0},
  {(char *)"size", __pyx_getprop_7pysaxon_3xdm_5Value_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3xdm_Value = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.xdm.Value", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3xdm_Value), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3xdm_Value, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "XdmValue extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7pysaxon_3xdm_5Value_11__iter__, /*tp_iter*/
  __pyx_pw_7pysaxon_3xdm_5Value_13__next__, /*tp_iternext*/
  __pyx_methods_7pysaxon_3xdm_Value, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3xdm_Value, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3xdm_Value, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3xdm_Item(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_7pysaxon_3xdm_Value(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3xdm_Item(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3xdm_4Item_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_7pysaxon_3xdm_Value(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Item_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Item_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Item_isAtomic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Item_8isAtomic_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Item_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Item_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_7pysaxon_3xdm_Item[] = {
  {"itemAt", (PyCFunction)__pyx_pw_7pysaxon_3xdm_4Item_3itemAt, METH_O, __pyx_doc_7pysaxon_3xdm_4Item_2itemAt},
  {"getStringValue", (PyCFunction)__pyx_pw_7pysaxon_3xdm_4Item_5getStringValue, METH_O, __pyx_doc_7pysaxon_3xdm_4Item_4getStringValue},
  {"__next__", (PyCFunction)__pyx_pw_7pysaxon_3xdm_4Item_9__next__, METH_NOARGS|METH_COEXIST, __pyx_doc_7pysaxon_3xdm_4Item_8__next__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3xdm_Item[] = {
  {(char *)"type", __pyx_getprop_7pysaxon_3xdm_4Item_type, 0, (char *)0, 0},
  {(char *)"isAtomic", __pyx_getprop_7pysaxon_3xdm_4Item_isAtomic, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop_7pysaxon_3xdm_4Item_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3xdm_Item = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.xdm.Item", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3xdm_Item), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3xdm_Item, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "XdmItem extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_7pysaxon_3xdm_4Item_7__iter__, /*tp_iter*/
  __pyx_pw_7pysaxon_3xdm_4Item_9__next__, /*tp_iternext*/
  __pyx_methods_7pysaxon_3xdm_Item, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3xdm_Item, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3xdm_Item, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3xdm_Node(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_7pysaxon_3xdm_Item(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3xdm_Node(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3xdm_4Node_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_7pysaxon_3xdm_Item(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_isAtomic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_8isAtomic_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_4type_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_kind(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_4kind_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_4name_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_baseuri(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_7baseuri_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_6parent_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_attribute_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_15attribute_count_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_children_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_14children_count_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_attributes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_10attributes_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_4Node_children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_4Node_8children_1__get__(o);
}

static PyMethodDef __pyx_methods_7pysaxon_3xdm_Node[] = {
  {"getAttributeValue", (PyCFunction)__pyx_pw_7pysaxon_3xdm_4Node_3getAttributeValue, METH_O, __pyx_doc_7pysaxon_3xdm_4Node_2getAttributeValue},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3xdm_Node[] = {
  {(char *)"isAtomic", __pyx_getprop_7pysaxon_3xdm_4Node_isAtomic, 0, (char *)0, 0},
  {(char *)"type", __pyx_getprop_7pysaxon_3xdm_4Node_type, 0, (char *)"Type (XDM_TYPE value) of the node.", 0},
  {(char *)"kind", __pyx_getprop_7pysaxon_3xdm_4Node_kind, 0, (char *)"Node's kind (XDM_NODE_KIND) as an all-lowercase string.", 0},
  {(char *)"name", __pyx_getprop_7pysaxon_3xdm_4Node_name, 0, (char *)"Get the name of the node, as a string in the form of a EQName.\n\n        In the case of unnamed nodes (for example, text and comment nodes)\n        return None.\n        ", 0},
  {(char *)"baseuri", __pyx_getprop_7pysaxon_3xdm_4Node_baseuri, 0, (char *)"Get node's base URI or None.", 0},
  {(char *)"parent", __pyx_getprop_7pysaxon_3xdm_4Node_parent, 0, (char *)"Get node's parent node.", 0},
  {(char *)"attribute_count", __pyx_getprop_7pysaxon_3xdm_4Node_attribute_count, 0, (char *)"Get the number of the node's attributes.", 0},
  {(char *)"children_count", __pyx_getprop_7pysaxon_3xdm_4Node_children_count, 0, (char *)"Get the number of the node's children.", 0},
  {(char *)"attributes", __pyx_getprop_7pysaxon_3xdm_4Node_attributes, 0, (char *)"Get node's attributes as a list of Node objects.", 0},
  {(char *)"children", __pyx_getprop_7pysaxon_3xdm_4Node_children, 0, (char *)"Get node's children as a list of Node objects.", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3xdm_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.xdm.Node", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3xdm_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3xdm_Node, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "XdmNode extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7pysaxon_3xdm_4Item_7__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7pysaxon_3xdm_4Item_9__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  __pyx_methods_7pysaxon_3xdm_Node, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3xdm_Node, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3xdm_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3xdm_AtomicValue(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_7pysaxon_3xdm_Item(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pysaxon_3xdm_11AtomicValue_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3xdm_AtomicValue(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3xdm_11AtomicValue_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_7pysaxon_3xdm_Item(o);
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_11AtomicValue_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_11AtomicValue_4type_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3xdm_11AtomicValue_type(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7pysaxon_3xdm_11AtomicValue_4type_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7pysaxon_3xdm_11AtomicValue_isAtomic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3xdm_11AtomicValue_8isAtomic_1__get__(o);
}

static PyMethodDef __pyx_methods_7pysaxon_3xdm_AtomicValue[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3xdm_AtomicValue[] = {
  {(char *)"type", __pyx_getprop_7pysaxon_3xdm_11AtomicValue_type, __pyx_setprop_7pysaxon_3xdm_11AtomicValue_type, (char *)0, 0},
  {(char *)"isAtomic", __pyx_getprop_7pysaxon_3xdm_11AtomicValue_isAtomic, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3xdm_AtomicValue = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.xdm.AtomicValue", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3xdm_AtomicValue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3xdm_AtomicValue, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "XdmAtomicValue extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7pysaxon_3xdm_4Item_7__iter__, /*tp_iter*/
  #else
  0, /*tp_iter*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_7pysaxon_3xdm_4Item_9__next__, /*tp_iternext*/
  #else
  0, /*tp_iternext*/
  #endif
  __pyx_methods_7pysaxon_3xdm_AtomicValue, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3xdm_AtomicValue, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3xdm_AtomicValue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "xdm",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ATOMIC_VALUE, __pyx_k_ATOMIC_VALUE, sizeof(__pyx_k_ATOMIC_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_ATTRIBUTE, __pyx_k_ATTRIBUTE, sizeof(__pyx_k_ATTRIBUTE), 0, 0, 1, 1},
  {&__pyx_n_s_COMMENT, __pyx_k_COMMENT, sizeof(__pyx_k_COMMENT), 0, 0, 1, 1},
  {&__pyx_n_s_DOCUMENT, __pyx_k_DOCUMENT, sizeof(__pyx_k_DOCUMENT), 0, 0, 1, 1},
  {&__pyx_n_s_ELEMENT, __pyx_k_ELEMENT, sizeof(__pyx_k_ELEMENT), 0, 0, 1, 1},
  {&__pyx_n_s_FUNCTION_ITEM, __pyx_k_FUNCTION_ITEM, sizeof(__pyx_k_FUNCTION_ITEM), 0, 0, 1, 1},
  {&__pyx_n_s_ITEM, __pyx_k_ITEM, sizeof(__pyx_k_ITEM), 0, 0, 1, 1},
  {&__pyx_kp_s_In_Item_getStringValue, __pyx_k_In_Item_getStringValue, sizeof(__pyx_k_In_Item_getStringValue), 0, 0, 1, 0},
  {&__pyx_kp_s_In_Item_size, __pyx_k_In_Item_size, sizeof(__pyx_k_In_Item_size), 0, 0, 1, 0},
  {&__pyx_kp_s_Item_at_d_out_of_range, __pyx_k_Item_at_d_out_of_range, sizeof(__pyx_k_Item_at_d_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_NAMESPACE, __pyx_k_NAMESPACE, sizeof(__pyx_k_NAMESPACE), 0, 0, 1, 1},
  {&__pyx_n_s_NODE, __pyx_k_NODE, sizeof(__pyx_k_NODE), 0, 0, 1, 1},
  {&__pyx_n_s_PROCESSING_INSTRUCTION, __pyx_k_PROCESSING_INSTRUCTION, sizeof(__pyx_k_PROCESSING_INSTRUCTION), 0, 0, 1, 1},
  {&__pyx_kp_s_SaxonProcessor_object_is_NULL, __pyx_k_SaxonProcessor_object_is_NULL, sizeof(__pyx_k_SaxonProcessor_object_is_NULL), 0, 0, 1, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TEXT, __pyx_k_TEXT, sizeof(__pyx_k_TEXT), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN, __pyx_k_UNKNOWN, sizeof(__pyx_k_UNKNOWN), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_node_kind_d, __pyx_k_Unknown_node_kind_d, sizeof(__pyx_k_Unknown_node_kind_d), 0, 0, 1, 0},
  {&__pyx_n_s_VALUE, __pyx_k_VALUE, sizeof(__pyx_k_VALUE), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_b__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 0, 0},
  {&__pyx_n_s_attribute, __pyx_k_attribute, sizeof(__pyx_k_attribute), 0, 0, 1, 1},
  {&__pyx_n_s_av, __pyx_k_av, sizeof(__pyx_k_av), 0, 0, 1, 1},
  {&__pyx_n_s_comment, __pyx_k_comment, sizeof(__pyx_k_comment), 0, 0, 1, 1},
  {&__pyx_n_s_document, __pyx_k_document, sizeof(__pyx_k_document), 0, 0, 1, 1},
  {&__pyx_n_s_element, __pyx_k_element, sizeof(__pyx_k_element), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_namespace, __pyx_k_namespace, sizeof(__pyx_k_namespace), 0, 0, 1, 1},
  {&__pyx_kp_b_or_None, __pyx_k_or_None, sizeof(__pyx_k_or_None), 0, 0, 0, 0},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_kp_s_processing_instruction, __pyx_k_processing_instruction, sizeof(__pyx_k_processing_instruction), 0, 0, 1, 0},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_unknown, __pyx_k_unknown, sizeof(__pyx_k_unknown), 0, 0, 1, 1},
  {&__pyx_kp_s_xdm_AtomicValue_object_s_pointer, __pyx_k_xdm_AtomicValue_object_s_pointer, sizeof(__pyx_k_xdm_AtomicValue_object_s_pointer), 0, 0, 1, 0},
  {&__pyx_kp_s_xdm_Item_object_s_pointer_is_NUL, __pyx_k_xdm_Item_object_s_pointer_is_NUL, sizeof(__pyx_k_xdm_Item_object_s_pointer_is_NUL), 0, 0, 1, 0},
  {&__pyx_kp_s_xdm_Node_object_s_pointer_is_NUL, __pyx_k_xdm_Node_object_s_pointer_is_NUL, sizeof(__pyx_k_xdm_Node_object_s_pointer_is_NUL), 0, 0, 1, 0},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 139, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 367, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pysaxon/xdm.pyx":41
 *             return None
 *         else:
 *             raise ValueError("xdm.Item object's pointer is NULL")             # <<<<<<<<<<<<<<
 *     else:
 *         i = Item()
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_xdm_Item_object_s_pointer_is_NUL); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pysaxon/xdm.pyx":62
 *             return None
 *         else:
 *             raise ValueError("xdm.Node object's pointer is NULL")             # <<<<<<<<<<<<<<
 *     else:
 *         n = Node()
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_xdm_Node_object_s_pointer_is_NUL); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pysaxon/xdm.pyx":93
 *         def __set__(self, SaxonProcessor p not None):
 *             if p.thisptr is NULL:
 *                 raise ValueError('SaxonProcessor object is NULL')             # <<<<<<<<<<<<<<
 *             self.thisptr.setProcessor(p.thisptr)
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_SaxonProcessor_object_is_NULL); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pysaxon/xdm.pyx":223
 * 
 *         if avptr is NULL:
 *             raise ValueError("xdm.AtomicValue object's pointer is NULL")             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = <cpp.XdmValue*>avptr
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_xdm_AtomicValue_object_s_pointer); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initxdm(void); /*proto*/
PyMODINIT_FUNC initxdm(void)
#else
PyMODINIT_FUNC PyInit_xdm(void); /*proto*/
PyMODINIT_FUNC PyInit_xdm(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_xdm(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("xdm", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pysaxon__xdm) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pysaxon.xdm")) {
      if (unlikely(PyDict_SetItemString(modules, "pysaxon.xdm", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("make_item", (void (*)(void))__pyx_f_7pysaxon_3xdm_make_item, "PyObject *(XdmItem *, char *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_node", (void (*)(void))__pyx_f_7pysaxon_3xdm_make_node, "PyObject *(XdmNode *, char *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("print_ptr", (void (*)(void))__pyx_f_7pysaxon_3xdm_print_ptr, "void (char *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7pysaxon_3xdm_Value) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_type_7pysaxon_3xdm_Value.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pysaxon_3xdm_Value, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 69, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pysaxon_3xdm_5Value_10__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pysaxon_3xdm_5Value_10__iter__.doc = __pyx_doc_7pysaxon_3xdm_5Value_10__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pysaxon_3xdm_5Value_10__iter__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pysaxon_3xdm_Value, "__next__"); if (unlikely(!wrapper)) __PYX_ERR(0, 69, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pysaxon_3xdm_5Value_12__next__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pysaxon_3xdm_5Value_12__next__.doc = __pyx_doc_7pysaxon_3xdm_5Value_12__next__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pysaxon_3xdm_5Value_12__next__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "Value", (PyObject *)&__pyx_type_7pysaxon_3xdm_Value) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_Value = &__pyx_type_7pysaxon_3xdm_Value;
  __pyx_type_7pysaxon_3xdm_Item.tp_base = __pyx_ptype_7pysaxon_3xdm_Value;
  if (PyType_Ready(&__pyx_type_7pysaxon_3xdm_Item) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_type_7pysaxon_3xdm_Item.tp_print = 0;
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pysaxon_3xdm_Item, "__iter__"); if (unlikely(!wrapper)) __PYX_ERR(0, 146, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pysaxon_3xdm_4Item_6__iter__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pysaxon_3xdm_4Item_6__iter__.doc = __pyx_doc_7pysaxon_3xdm_4Item_6__iter__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pysaxon_3xdm_4Item_6__iter__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7pysaxon_3xdm_Item, "__next__"); if (unlikely(!wrapper)) __PYX_ERR(0, 146, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7pysaxon_3xdm_4Item_8__next__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7pysaxon_3xdm_4Item_8__next__.doc = __pyx_doc_7pysaxon_3xdm_4Item_8__next__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7pysaxon_3xdm_4Item_8__next__;
    }
  }
  #endif
  if (PyObject_SetAttrString(__pyx_m, "Item", (PyObject *)&__pyx_type_7pysaxon_3xdm_Item) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_Item = &__pyx_type_7pysaxon_3xdm_Item;
  __pyx_type_7pysaxon_3xdm_Node.tp_base = __pyx_ptype_7pysaxon_3xdm_Item;
  if (PyType_Ready(&__pyx_type_7pysaxon_3xdm_Node) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_type_7pysaxon_3xdm_Node.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_7pysaxon_3xdm_Node) < 0) __PYX_ERR(0, 248, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_Node = &__pyx_type_7pysaxon_3xdm_Node;
  __pyx_type_7pysaxon_3xdm_AtomicValue.tp_base = __pyx_ptype_7pysaxon_3xdm_Item;
  if (PyType_Ready(&__pyx_type_7pysaxon_3xdm_AtomicValue) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_type_7pysaxon_3xdm_AtomicValue.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "AtomicValue", (PyObject *)&__pyx_type_7pysaxon_3xdm_AtomicValue) < 0) __PYX_ERR(0, 212, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_AtomicValue = &__pyx_type_7pysaxon_3xdm_AtomicValue;
  /*--- Type import code ---*/
  __pyx_ptype_7pysaxon_3sxn_SaxonProcessor = __Pyx_ImportType("pysaxon.sxn", "SaxonProcessor", sizeof(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor), 1); if (unlikely(!__pyx_ptype_7pysaxon_3sxn_SaxonProcessor)) __PYX_ERR(2, 3, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3sxn_XPathProcessor = __Pyx_ImportType("pysaxon.sxn", "XPathProcessor", sizeof(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor), 1); if (unlikely(!__pyx_ptype_7pysaxon_3sxn_XPathProcessor)) __PYX_ERR(2, 7, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3sxn_XsltProcessor = __Pyx_ImportType("pysaxon.sxn", "XsltProcessor", sizeof(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor), 1); if (unlikely(!__pyx_ptype_7pysaxon_3sxn_XsltProcessor)) __PYX_ERR(2, 10, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pysaxon/xdm.pyx":7
 * 
 * # Constants
 * VALUE = cpp.XDM_VALUE             # <<<<<<<<<<<<<<
 * ITEM = cpp.XDM_ITEM
 * NODE = cpp.XDM_NODE
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_TYPE(XDM_VALUE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VALUE, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":8
 * # Constants
 * VALUE = cpp.XDM_VALUE
 * ITEM = cpp.XDM_ITEM             # <<<<<<<<<<<<<<
 * NODE = cpp.XDM_NODE
 * ATOMIC_VALUE = cpp.XDM_ATOMIC_VALUE
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_TYPE(XDM_ITEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ITEM, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":9
 * VALUE = cpp.XDM_VALUE
 * ITEM = cpp.XDM_ITEM
 * NODE = cpp.XDM_NODE             # <<<<<<<<<<<<<<
 * ATOMIC_VALUE = cpp.XDM_ATOMIC_VALUE
 * FUNCTION_ITEM = cpp.XDM_FUNCTION_ITEM
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_TYPE(XDM_NODE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NODE, __pyx_t_1) < 0) __PYX_ERR(0, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":10
 * ITEM = cpp.XDM_ITEM
 * NODE = cpp.XDM_NODE
 * ATOMIC_VALUE = cpp.XDM_ATOMIC_VALUE             # <<<<<<<<<<<<<<
 * FUNCTION_ITEM = cpp.XDM_FUNCTION_ITEM
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_TYPE(XDM_ATOMIC_VALUE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ATOMIC_VALUE, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":11
 * NODE = cpp.XDM_NODE
 * ATOMIC_VALUE = cpp.XDM_ATOMIC_VALUE
 * FUNCTION_ITEM = cpp.XDM_FUNCTION_ITEM             # <<<<<<<<<<<<<<
 * 
 * DOCUMENT = cpp.DOCUMENT
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_TYPE(XDM_FUNCTION_ITEM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FUNCTION_ITEM, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":13
 * FUNCTION_ITEM = cpp.XDM_FUNCTION_ITEM
 * 
 * DOCUMENT = cpp.DOCUMENT             # <<<<<<<<<<<<<<
 * ELEMENT = cpp.ELEMENT
 * ATTRIBUTE = cpp.ATTRIBUTE
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(DOCUMENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DOCUMENT, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":14
 * 
 * DOCUMENT = cpp.DOCUMENT
 * ELEMENT = cpp.ELEMENT             # <<<<<<<<<<<<<<
 * ATTRIBUTE = cpp.ATTRIBUTE
 * TEXT = cpp.TEXT
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(ELEMENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ELEMENT, __pyx_t_1) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":15
 * DOCUMENT = cpp.DOCUMENT
 * ELEMENT = cpp.ELEMENT
 * ATTRIBUTE = cpp.ATTRIBUTE             # <<<<<<<<<<<<<<
 * TEXT = cpp.TEXT
 * COMMENT = cpp.COMMENT
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(ATTRIBUTE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ATTRIBUTE, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":16
 * ELEMENT = cpp.ELEMENT
 * ATTRIBUTE = cpp.ATTRIBUTE
 * TEXT = cpp.TEXT             # <<<<<<<<<<<<<<
 * COMMENT = cpp.COMMENT
 * PROCESSING_INSTRUCTION = cpp.PROCESSING_INSTRUCTION
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(TEXT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TEXT, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":17
 * ATTRIBUTE = cpp.ATTRIBUTE
 * TEXT = cpp.TEXT
 * COMMENT = cpp.COMMENT             # <<<<<<<<<<<<<<
 * PROCESSING_INSTRUCTION = cpp.PROCESSING_INSTRUCTION
 * NAMESPACE = cpp.NAMESPACE
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(COMMENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMMENT, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":18
 * TEXT = cpp.TEXT
 * COMMENT = cpp.COMMENT
 * PROCESSING_INSTRUCTION = cpp.PROCESSING_INSTRUCTION             # <<<<<<<<<<<<<<
 * NAMESPACE = cpp.NAMESPACE
 * UNKNOWN = cpp.UNKNOWN
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(PROCESSING_INSTRUCTION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PROCESSING_INSTRUCTION, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":19
 * COMMENT = cpp.COMMENT
 * PROCESSING_INSTRUCTION = cpp.PROCESSING_INSTRUCTION
 * NAMESPACE = cpp.NAMESPACE             # <<<<<<<<<<<<<<
 * UNKNOWN = cpp.UNKNOWN
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(NAMESPACE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NAMESPACE, __pyx_t_1) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":20
 * PROCESSING_INSTRUCTION = cpp.PROCESSING_INSTRUCTION
 * NAMESPACE = cpp.NAMESPACE
 * UNKNOWN = cpp.UNKNOWN             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_XDM_NODE_KIND(UNKNOWN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UNKNOWN, __pyx_t_1) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/xdm.pyx":1
 * from libcpp.string cimport string             # <<<<<<<<<<<<<<
 * from libc.string cimport const_char
 * from libc.stdio cimport printf
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pysaxon.xdm", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pysaxon.xdm");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseArgTupleInvalid */
  static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
  static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
  static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* RaiseDoubleKeywords */
  static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
  static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XDM_TYPE(XDM_TYPE value) {
    const XDM_TYPE neg_one = (XDM_TYPE) -1, const_zero = (XDM_TYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XDM_TYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XDM_TYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(XDM_TYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(XDM_TYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XDM_TYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(XDM_TYPE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_XDM_NODE_KIND(XDM_NODE_KIND value) {
    const XDM_NODE_KIND neg_one = (XDM_NODE_KIND) -1, const_zero = (XDM_NODE_KIND) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(XDM_NODE_KIND) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XDM_NODE_KIND) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(XDM_NODE_KIND) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(XDM_NODE_KIND) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(XDM_NODE_KIND) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(XDM_NODE_KIND),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* ModuleImport */
  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
