/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/SaxonProcessor.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/SchemaValidator.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XPathProcessor.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmAtomicValue.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmItem.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmNode.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XdmValue.h",
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API/XsltProcessor.h"
        ],
        "include_dirs": [
            "/opt/saxon-HEC-v1.0.1/Saxon.C.API",
            "/usr/lib/jvm/java-8-openjdk-amd64/include",
            "/usr/lib/jvm/java-8-openjdk-amd64/include/linux"
        ],
        "language": "c++",
        "libraries": [
            "saxonhec"
        ],
        "library_dirs": [
            "/opt/saxon-HEC-v1.0.1",
            "/usr/lib"
        ],
        "runtime_library_dirs": [
            "/opt/saxon-HEC-v1.0.1",
            "/usr/lib"
        ]
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pysaxon__sxn
#define __PYX_HAVE_API__pysaxon__sxn
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include "SaxonProcessor.h"
#include "XdmValue.h"
#include "XdmItem.h"
#include "XdmNode.h"
#include "XdmAtomicValue.h"
#include "XPathProcessor.h"
#include "XsltProcessor.h"
#include "SchemaValidator.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pysaxon/sxn.pyx",
  "stringsource",
  "pysaxon/xdm.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_7pysaxon_3xdm_Value;
struct __pyx_obj_7pysaxon_3xdm_Item;
struct __pyx_obj_7pysaxon_3xdm_Node;
struct __pyx_obj_7pysaxon_3xdm_AtomicValue;
struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor;
struct __pyx_obj_7pysaxon_3sxn_XPathProcessor;
struct __pyx_obj_7pysaxon_3sxn_XsltProcessor;
struct __pyx_obj_7pysaxon_3sxn_MyException;
struct __pyx_obj_7pysaxon_3sxn_SaxonApiException;

/* "xdm.pxd":4
 * 
 * 
 * cdef class Value:             # <<<<<<<<<<<<<<
 *     cdef cpp.XdmValue *thisptr
 *     cdef int _size, _cntr
 */
struct __pyx_obj_7pysaxon_3xdm_Value {
  PyObject_HEAD
  XdmValue *thisptr;
  int _size;
  int _cntr;
};


/* "xdm.pxd":9
 * 
 * 
 * cdef class Item(Value):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pysaxon_3xdm_Item {
  struct __pyx_obj_7pysaxon_3xdm_Value __pyx_base;
};


/* "xdm.pxd":13
 * 
 * 
 * cdef class Node(Item):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pysaxon_3xdm_Node {
  struct __pyx_obj_7pysaxon_3xdm_Item __pyx_base;
};


/* "xdm.pxd":17
 * 
 * 
 * cdef class AtomicValue(Item):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_7pysaxon_3xdm_AtomicValue {
  struct __pyx_obj_7pysaxon_3xdm_Item __pyx_base;
};


/* "pysaxon/sxn.pxd":3
 * cimport cpp
 * 
 * cdef class SaxonProcessor:             # <<<<<<<<<<<<<<
 *     cdef cpp.SaxonProcessor *thisptr
 *     cdef int _init
 */
struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor {
  PyObject_HEAD
  SaxonProcessor *thisptr;
  int _init;
};


/* "pysaxon/sxn.pxd":7
 *     cdef int _init
 * 
 * cdef class XPathProcessor:             # <<<<<<<<<<<<<<
 *     cdef cpp.XPathProcessor *thisptr
 * 
 */
struct __pyx_obj_7pysaxon_3sxn_XPathProcessor {
  PyObject_HEAD
  XPathProcessor *thisptr;
};


/* "pysaxon/sxn.pxd":10
 *     cdef cpp.XPathProcessor *thisptr
 * 
 * cdef class XsltProcessor:             # <<<<<<<<<<<<<<
 *     cdef cpp.XsltProcessor *thisptr
 */
struct __pyx_obj_7pysaxon_3sxn_XsltProcessor {
  PyObject_HEAD
  XsltProcessor *thisptr;
};


/* "pysaxon/sxn.pyx":11
 * @cython.final       # not subclassable
 * @cython.internal    # not in the module dict
 * cdef class MyException:             # <<<<<<<<<<<<<<
 *     """MyException extension type"""
 * 
 */
struct __pyx_obj_7pysaxon_3sxn_MyException {
  PyObject_HEAD
  MyException e;
};


/* "pysaxon/sxn.pyx":53
 * @cython.final       # not subclassable
 * @cython.internal    # not in the module dict
 * cdef class SaxonApiException:             # <<<<<<<<<<<<<<
 *     """Saxon API Exception extension type."""
 * 
 */
struct __pyx_obj_7pysaxon_3sxn_SaxonApiException {
  PyObject_HEAD
  SaxonApiException *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'pysaxon.cpp' */

/* Module declarations from 'cython' */

/* Module declarations from 'pysaxon.xdm' */
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_Value = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_Item = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_Node = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3xdm_AtomicValue = 0;
static PyObject *(*__pyx_f_7pysaxon_3xdm_make_item)(XdmItem *, char *); /*proto*/
static PyObject *(*__pyx_f_7pysaxon_3xdm_make_node)(XdmNode *, char *); /*proto*/
static void (*__pyx_f_7pysaxon_3xdm_print_ptr)(char *, void *); /*proto*/

/* Module declarations from 'pysaxon.sxn' */
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_SaxonProcessor = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_XPathProcessor = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_XsltProcessor = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_MyException = 0;
static PyTypeObject *__pyx_ptype_7pysaxon_3sxn_SaxonApiException = 0;
static int __pyx_v_7pysaxon_3sxn__init;
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static PyObject *__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(std::map<std::string,std::string>  const &); /*proto*/
#define __Pyx_MODULE_NAME "pysaxon.sxn"
int __pyx_module_is_main_pysaxon__sxn = 0;

/* Implementation of 'pysaxon.sxn' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static const char __pyx_k__5[] = "";
static const char __pyx_k_cwd[] = "cwd";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_raw[] = "raw";
static const char __pyx_k_uri[] = "uri";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_init[] = "init";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_proc[] = "proc";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_what[] = "what";
static const char __pyx_k_xslt[] = "xslt";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_init_2[] = "init =";
static const char __pyx_k_prefix[] = "prefix";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_what_2[] = "what =";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_global__init[] = "global _init =";
static const char __pyx_k_Calling_release[] = "Calling release()";
static const char __pyx_k_In_SaxonProcessor___cinit[] = "In SaxonProcessor.__cinit__()";
static const char __pyx_k_Destroying_C_SaxonProcessor[] = "Destroying C++ SaxonProcessor*";
static const char __pyx_k_In_SaxonProcessor___dealloc[] = "In SaxonProcessor.__dealloc__()";
static const char __pyx_k_Define_extension_types_for_MyExc[] = "Define extension types for MyException, SaxonApiException, and\nSaxonProcessor.";
static const char __pyx_k_Failed_to_create_XsltProcessor_o[] = "Failed to create XsltProcessor object";
static const char __pyx_k_In_SaxonProcessor_newXPathProces[] = "In SaxonProcessor.newXPathProcessor()";
static const char __pyx_k_In_SaxonProcessor_parseXmlFromSt[] = "In SaxonProcessor.parseXmlFromString()";
static const char __pyx_k_In_XPathProcessor_evaluate_singl[] = "In XPathProcessor.evaluate_single()";
static const char __pyx_k_In_XPathProcessor_setContextItem[] = "In XPathProcessor.setContextItem()";
static const char __pyx_k_Only_one_init_SaxonProcessor_obj[] = "Only one \"init\" SaxonProcessor object allowed";
static const char __pyx_k_Only_xdm_Item_or_xdm_Node_object[] = "Only xdm.Item or xdm.Node objects can set context";
static const char __pyx_k_SaxonProcessor_init_object_never[] = "SaxonProcessor \"init\" object never created";
static PyObject *__pyx_kp_s_Calling_release;
static PyObject *__pyx_kp_s_Destroying_C_SaxonProcessor;
static PyObject *__pyx_kp_s_Failed_to_create_XsltProcessor_o;
static PyObject *__pyx_kp_s_In_SaxonProcessor___cinit;
static PyObject *__pyx_kp_s_In_SaxonProcessor___dealloc;
static PyObject *__pyx_kp_s_In_SaxonProcessor_newXPathProces;
static PyObject *__pyx_kp_s_In_SaxonProcessor_parseXmlFromSt;
static PyObject *__pyx_kp_s_In_XPathProcessor_evaluate_singl;
static PyObject *__pyx_kp_s_In_XPathProcessor_setContextItem;
static PyObject *__pyx_kp_s_Only_one_init_SaxonProcessor_obj;
static PyObject *__pyx_kp_s_Only_xdm_Item_or_xdm_Node_object;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_SaxonProcessor_init_object_never;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_b__5;
static PyObject *__pyx_n_s_cwd;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_global__init;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_s_init_2;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_out;
static PyObject *__pyx_n_s_prefix;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_proc;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_raw;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_uri;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_what;
static PyObject *__pyx_kp_s_what_2;
static PyObject *__pyx_n_s_xslt;
static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_9errorCode___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_12errorMessage___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_10linenumber___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_6isType___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_8isStatic___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_8isGlobal___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_17SaxonApiException___cinit__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self); /* proto */
static void __pyx_pf_7pysaxon_3sxn_17SaxonApiException_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_4__copy__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_6clear(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_5count___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_8__getitem__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self, int __pyx_v_i); /* proto */
static int __pyx_pf_7pysaxon_3sxn_14SaxonProcessor___cinit__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, PyObject *__pyx_v_what, PyObject *__pyx_v_init); /* proto */
static void __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_17exceptionOccurred___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_4exceptionClear(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_6getException(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_8setcwd(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_2__set__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_dir); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_10setConfigurationProperty(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_12clearConfigurationProperties(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_7version___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_14parseXmlFromString(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_xml); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_16parseXmlFromFile(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_xmlfile); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18parseXmlFromUri(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_20newXPathProcessor(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_22newXsltProcessor(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_24getStringValue(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_it); /* proto */
static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor___cinit__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_proc, PyObject *__pyx_v_cwd, int __pyx_v_raw); /* proto */
static void __pyx_pf_7pysaxon_3sxn_14XPathProcessor_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_4setcwd(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_6setBaseURI(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_8declareNamespace(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_prefix, char *__pyx_v_uri); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10evaluate(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_xpath); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_12evaluate_single(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_xpath); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_14evaluate_bool(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_xpath); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_16setContextItem(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_it); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_18setContextFile(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_20setParameter(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_name, struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_22removeParameter(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10parameters___get__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10parameters_2__del__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_24setProperty(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10properties___get__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10properties_2__del__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_26exceptionOccurred(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10exceptions___get__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10exceptions_2__del__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor___cinit__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static void __pyx_pf_7pysaxon_3sxn_13XsltProcessor_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_4setcwd(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_cwd); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10parameters___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10parameters_2__del__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10properties___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10properties_2__del__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_6setSourceFromXdmValue(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_val); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_8setSourceFromFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10setOutputFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_11xslMessages___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_12transformFileToFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_source, char *__pyx_v_out, PyObject *__pyx_v_xslt); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_14transformFileToString(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_source, PyObject *__pyx_v_xslt); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_16transformFileToValue(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_source, PyObject *__pyx_v_xslt); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_18compileFromFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_xslt); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_20compileFromString(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_xslt); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_22compileFromXdmNode(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_n); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_24transformToString(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_26transformToValue(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_28transformToFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_30exceptionOccurred(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10exceptions___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10exceptions_2__del__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_7pysaxon_3sxn_SaxonProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3sxn_XPathProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3sxn_XsltProcessor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3sxn_MyException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7pysaxon_3sxn_SaxonApiException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;

/* "pysaxon/sxn.pyx":17
 * 
 *     property errorCode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string ec
 *             ec = self.e.errorCode
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_9errorCode_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_9errorCode_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_11MyException_9errorCode___get__(((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_9errorCode___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self) {
  std::string __pyx_v_ec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":19
 *         def __get__(self):
 *             cdef string ec
 *             ec = self.e.errorCode             # <<<<<<<<<<<<<<
 *             if ec.length() == 0:
 *                 return None
 */
  __pyx_t_1 = __pyx_v_self->e.errorCode;
  __pyx_v_ec = __pyx_t_1;

  /* "pysaxon/sxn.pyx":20
 *             cdef string ec
 *             ec = self.e.errorCode
 *             if ec.length() == 0:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_2 = ((__pyx_v_ec.length() == 0) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":21
 *             ec = self.e.errorCode
 *             if ec.length() == 0:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return ec
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/sxn.pyx":20
 *             cdef string ec
 *             ec = self.e.errorCode
 *             if ec.length() == 0:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "pysaxon/sxn.pyx":23
 *                 return None
 *             else:
 *                 return ec             # <<<<<<<<<<<<<<
 * 
 *     property errorMessage:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_ec); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 23, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pysaxon/sxn.pyx":17
 * 
 *     property errorCode:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string ec
 *             ec = self.e.errorCode
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.sxn.MyException.errorCode.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":26
 * 
 *     property errorMessage:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string em
 *             m = self.e.errorMessage
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_12errorMessage_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_12errorMessage_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_11MyException_12errorMessage___get__(((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_12errorMessage___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self) {
  std::string __pyx_v_em;
  CYTHON_UNUSED std::string __pyx_v_m;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::string __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":28
 *         def __get__(self):
 *             cdef string em
 *             m = self.e.errorMessage             # <<<<<<<<<<<<<<
 *             if em.length() == 0:
 *                 return None
 */
  __pyx_t_1 = __pyx_v_self->e.errorMessage;
  __pyx_v_m = __pyx_t_1;

  /* "pysaxon/sxn.pyx":29
 *             cdef string em
 *             m = self.e.errorMessage
 *             if em.length() == 0:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  __pyx_t_2 = ((__pyx_v_em.length() == 0) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":30
 *             m = self.e.errorMessage
 *             if em.length() == 0:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return em
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/sxn.pyx":29
 *             cdef string em
 *             m = self.e.errorMessage
 *             if em.length() == 0:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
 */
  }

  /* "pysaxon/sxn.pyx":32
 *                 return None
 *             else:
 *                 return em             # <<<<<<<<<<<<<<
 * 
 *     property linenumber:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_em); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 32, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "pysaxon/sxn.pyx":26
 * 
 *     property errorMessage:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef string em
 *             m = self.e.errorMessage
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pysaxon.sxn.MyException.errorMessage.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":35
 * 
 *     property linenumber:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.linenumber
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_10linenumber_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_10linenumber_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_11MyException_10linenumber___get__(((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_10linenumber___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":36
 *     property linenumber:
 *         def __get__(self):
 *             return self.e.linenumber             # <<<<<<<<<<<<<<
 * 
 *     property isType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->e.linenumber); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":35
 * 
 *     property linenumber:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.linenumber
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.MyException.linenumber.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":39
 * 
 *     property isType:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.e.isType
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_6isType_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_6isType_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_11MyException_6isType___get__(((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_6isType___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":40
 *     property isType:
 *         def __get__(self):
 *             return <bint>self.e.isType             # <<<<<<<<<<<<<<
 * 
 *     property isStatic:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->e.isType != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":39
 * 
 *     property isType:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.e.isType
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.MyException.isType.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":43
 * 
 *     property isStatic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.e.isStatic
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_8isStatic_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_8isStatic_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_11MyException_8isStatic___get__(((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_8isStatic___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":44
 *     property isStatic:
 *         def __get__(self):
 *             return <bint>self.e.isStatic             # <<<<<<<<<<<<<<
 * 
 *     property isGlobal:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->e.isStatic != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":43
 * 
 *     property isStatic:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.e.isStatic
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.MyException.isStatic.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":47
 * 
 *     property isGlobal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.e.isGlobal
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_8isGlobal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_11MyException_8isGlobal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_11MyException_8isGlobal___get__(((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_11MyException_8isGlobal___get__(struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":48
 *     property isGlobal:
 *         def __get__(self):
 *             return <bint>self.e.isGlobal             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->e.isGlobal != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":47
 * 
 *     property isGlobal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.e.isGlobal
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.MyException.isGlobal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":58
 *     cdef cpp.SaxonApiException *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_17SaxonApiException_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_17SaxonApiException_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_17SaxonApiException___cinit__(((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_17SaxonApiException___cinit__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pysaxon/sxn.pyx":59
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pysaxon/sxn.pyx":58
 *     cdef cpp.SaxonApiException *thisptr
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":61
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3sxn_17SaxonApiException_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3sxn_17SaxonApiException_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3sxn_17SaxonApiException_2__dealloc__(((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3sxn_17SaxonApiException_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/sxn.pyx":62
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "pysaxon/sxn.pyx":63
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(self):
 */
    delete __pyx_v_self->thisptr;

    /* "pysaxon/sxn.pyx":62
 * 
 *     def __dealloc__(self):
 *         if self.thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "pysaxon/sxn.pyx":61
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr != NULL:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/sxn.pyx":65
 *             del self.thisptr
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         cdef SaxonApiException e
 *         e = SaxonApiException()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_17SaxonApiException_4__copy__(((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_4__copy__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_e = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  SaxonApiException *__pyx_t_2;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "pysaxon/sxn.pyx":67
 *     def __copy__(self):
 *         cdef SaxonApiException e
 *         e = SaxonApiException()             # <<<<<<<<<<<<<<
 *         e.thisptr = new cpp.SaxonApiException(self.thisptr[0])
 *         return e
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_SaxonApiException), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_e = ((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":68
 *         cdef SaxonApiException e
 *         e = SaxonApiException()
 *         e.thisptr = new cpp.SaxonApiException(self.thisptr[0])             # <<<<<<<<<<<<<<
 *         return e
 * 
 */
  try {
    __pyx_t_2 = new SaxonApiException((__pyx_v_self->thisptr[0]));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 68, __pyx_L1_error)
  }
  __pyx_v_e->thisptr = __pyx_t_2;

  /* "pysaxon/sxn.pyx":69
 *         e = SaxonApiException()
 *         e.thisptr = new cpp.SaxonApiException(self.thisptr[0])
 *         return e             # <<<<<<<<<<<<<<
 * 
 *     def clear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_e));
  __pyx_r = ((PyObject *)__pyx_v_e);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":65
 *             del self.thisptr
 * 
 *     def __copy__(self):             # <<<<<<<<<<<<<<
 *         cdef SaxonApiException e
 *         e = SaxonApiException()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonApiException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":71
 *         return e
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_7clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_7clear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_17SaxonApiException_6clear(((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_6clear(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear", 0);

  /* "pysaxon/sxn.pyx":72
 * 
 *     def clear(self):
 *         self.thisptr.clear()             # <<<<<<<<<<<<<<
 * 
 *     property count:
 */
  try {
    __pyx_v_self->thisptr->clear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 72, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":71
 *         return e
 * 
 *     def clear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonApiException.clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":75
 * 
 *     property count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.count()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_5count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_5count_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_17SaxonApiException_5count___get__(((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_5count___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":76
 *     property count:
 *         def __get__(self):
 *             return self.thisptr.count()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->count();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 76, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":75
 * 
 *     property count:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.count()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonApiException.count.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":78
 *             return self.thisptr.count()
 * 
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         cdef MyException mye
 *         mye =  MyException()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_17SaxonApiException_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonApiException.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_17SaxonApiException_8__getitem__(((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_17SaxonApiException_8__getitem__(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_mye = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  MyException __pyx_t_2;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "pysaxon/sxn.pyx":80
 *     def __getitem__(self, int i):
 *         cdef MyException mye
 *         mye =  MyException()             # <<<<<<<<<<<<<<
 *         mye.e = self.thisptr.getException(i)
 *         return mye
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_MyException), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mye = ((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":81
 *         cdef MyException mye
 *         mye =  MyException()
 *         mye.e = self.thisptr.getException(i)             # <<<<<<<<<<<<<<
 *         return mye
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getException(__pyx_v_i);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 81, __pyx_L1_error)
  }
  __pyx_v_mye->e = __pyx_t_2;

  /* "pysaxon/sxn.pyx":82
 *         mye =  MyException()
 *         mye.e = self.thisptr.getException(i)
 *         return mye             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mye));
  __pyx_r = ((PyObject *)__pyx_v_mye);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":78
 *             return self.thisptr.count()
 * 
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         cdef MyException mye
 *         mye =  MyException()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonApiException.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mye);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":92
 *     """SaxonProcessor extension type."""
 * 
 *     def __cinit__(self, what=None, init=False):             # <<<<<<<<<<<<<<
 *         cdef char *conf_file
 *         global _init
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_what = 0;
  PyObject *__pyx_v_init = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_what,&__pyx_n_s_init,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_what);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_init);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 92, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_what = values[0];
    __pyx_v_init = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 92, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor___cinit__(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), __pyx_v_what, __pyx_v_init);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_14SaxonProcessor___cinit__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, PyObject *__pyx_v_what, PyObject *__pyx_v_init) {
  char *__pyx_v_conf_file;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char *__pyx_t_5;
  SaxonProcessor *__pyx_t_6;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pysaxon/sxn.pyx":96
 *         global _init
 * 
 *         print 'In SaxonProcessor.__cinit__()'             # <<<<<<<<<<<<<<
 *         print 'what =', what
 *         print 'init =', init
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_SaxonProcessor___cinit) < 0) __PYX_ERR(0, 96, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":97
 * 
 *         print 'In SaxonProcessor.__cinit__()'
 *         print 'what =', what             # <<<<<<<<<<<<<<
 *         print 'init =', init
 *         print 'global _init =', _init
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_what_2);
  __Pyx_GIVEREF(__pyx_kp_s_what_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_what_2);
  __Pyx_INCREF(__pyx_v_what);
  __Pyx_GIVEREF(__pyx_v_what);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_what);
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":98
 *         print 'In SaxonProcessor.__cinit__()'
 *         print 'what =', what
 *         print 'init =', init             # <<<<<<<<<<<<<<
 *         print 'global _init =', _init
 *         if isinstance(what, bytes):
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_init_2);
  __Pyx_GIVEREF(__pyx_kp_s_init_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_init_2);
  __Pyx_INCREF(__pyx_v_init);
  __Pyx_GIVEREF(__pyx_v_init);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_init);
  if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":99
 *         print 'what =', what
 *         print 'init =', init
 *         print 'global _init =', _init             # <<<<<<<<<<<<<<
 *         if isinstance(what, bytes):
 *             conf_file = what
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_7pysaxon_3sxn__init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_global__init);
  __Pyx_GIVEREF(__pyx_kp_s_global__init);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_global__init);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pysaxon/sxn.pyx":100
 *         print 'init =', init
 *         print 'global _init =', _init
 *         if isinstance(what, bytes):             # <<<<<<<<<<<<<<
 *             conf_file = what
 *             self.thisptr = new cpp.SaxonProcessor(conf_file)
 */
  __pyx_t_3 = PyBytes_Check(__pyx_v_what); 
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "pysaxon/sxn.pyx":101
 *         print 'global _init =', _init
 *         if isinstance(what, bytes):
 *             conf_file = what             # <<<<<<<<<<<<<<
 *             self.thisptr = new cpp.SaxonProcessor(conf_file)
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_what); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
    __pyx_v_conf_file = __pyx_t_5;

    /* "pysaxon/sxn.pyx":102
 *         if isinstance(what, bytes):
 *             conf_file = what
 *             self.thisptr = new cpp.SaxonProcessor(conf_file)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr = new cpp.SaxonProcessor(<bint>bool(what))
 */
    try {
      __pyx_t_6 = new SaxonProcessor(__pyx_v_conf_file);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 102, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_6;

    /* "pysaxon/sxn.pyx":100
 *         print 'init =', init
 *         print 'global _init =', _init
 *         if isinstance(what, bytes):             # <<<<<<<<<<<<<<
 *             conf_file = what
 *             self.thisptr = new cpp.SaxonProcessor(conf_file)
 */
    goto __pyx_L3;
  }

  /* "pysaxon/sxn.pyx":104
 *             self.thisptr = new cpp.SaxonProcessor(conf_file)
 *         else:
 *             self.thisptr = new cpp.SaxonProcessor(<bint>bool(what))             # <<<<<<<<<<<<<<
 * 
 *         print_ptr('SaxonProcessor*', self.thisptr)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_what); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 104, __pyx_L1_error)
    try {
      __pyx_t_6 = new SaxonProcessor(((!(!__pyx_t_4)) != 0));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 104, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_6;
  }
  __pyx_L3:;

  /* "pysaxon/sxn.pyx":106
 *             self.thisptr = new cpp.SaxonProcessor(<bint>bool(what))
 * 
 *         print_ptr('SaxonProcessor*', self.thisptr)             # <<<<<<<<<<<<<<
 * 
 *         if not (init or _init):
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"SaxonProcessor*"), __pyx_v_self->thisptr);

  /* "pysaxon/sxn.pyx":108
 *         print_ptr('SaxonProcessor*', self.thisptr)
 * 
 *         if not (init or _init):             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'SaxonProcessor "init" object never created')
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_init); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  if (!__pyx_t_3) {
  } else {
    __pyx_t_4 = __pyx_t_3;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_7pysaxon_3sxn__init != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  __pyx_t_3 = ((!__pyx_t_4) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":109
 * 
 *         if not (init or _init):
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'SaxonProcessor "init" object never created')
 *         elif init and _init:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 109, __pyx_L1_error)

    /* "pysaxon/sxn.pyx":108
 *         print_ptr('SaxonProcessor*', self.thisptr)
 * 
 *         if not (init or _init):             # <<<<<<<<<<<<<<
 *             raise RuntimeError(
 *                 'SaxonProcessor "init" object never created')
 */
  }

  /* "pysaxon/sxn.pyx":111
 *             raise RuntimeError(
 *                 'SaxonProcessor "init" object never created')
 *         elif init and _init:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')
 *         if init:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_init); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
  if (__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_7pysaxon_3sxn__init != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":112
 *                 'SaxonProcessor "init" object never created')
 *         elif init and _init:
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')             # <<<<<<<<<<<<<<
 *         if init:
 *             _init = 1
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 112, __pyx_L1_error)

    /* "pysaxon/sxn.pyx":111
 *             raise RuntimeError(
 *                 'SaxonProcessor "init" object never created')
 *         elif init and _init:             # <<<<<<<<<<<<<<
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')
 *         if init:
 */
  }

  /* "pysaxon/sxn.pyx":113
 *         elif init and _init:
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')
 *         if init:             # <<<<<<<<<<<<<<
 *             _init = 1
 *             self._init = 1
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_init); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 113, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":114
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')
 *         if init:
 *             _init = 1             # <<<<<<<<<<<<<<
 *             self._init = 1
 *         else:
 */
    __pyx_v_7pysaxon_3sxn__init = 1;

    /* "pysaxon/sxn.pyx":115
 *         if init:
 *             _init = 1
 *             self._init = 1             # <<<<<<<<<<<<<<
 *         else:
 *             self._init = 0
 */
    __pyx_v_self->_init = 1;

    /* "pysaxon/sxn.pyx":113
 *         elif init and _init:
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')
 *         if init:             # <<<<<<<<<<<<<<
 *             _init = 1
 *             self._init = 1
 */
    goto __pyx_L9;
  }

  /* "pysaxon/sxn.pyx":117
 *             self._init = 1
 *         else:
 *             self._init = 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  /*else*/ {
    __pyx_v_self->_init = 0;
  }
  __pyx_L9:;

  /* "pysaxon/sxn.pyx":92
 *     """SaxonProcessor extension type."""
 * 
 *     def __cinit__(self, what=None, init=False):             # <<<<<<<<<<<<<<
 *         cdef char *conf_file
 *         global _init
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":119
 *             self._init = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         global _init
 * 
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_2__dealloc__(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/sxn.pyx":122
 *         global _init
 * 
 *         print 'In SaxonProcessor.__dealloc__()'             # <<<<<<<<<<<<<<
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print 'global _init =', _init
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_SaxonProcessor___dealloc) < 0) __PYX_ERR(0, 122, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":123
 * 
 *         print 'In SaxonProcessor.__dealloc__()'
 *         print_ptr('SaxonProcessor*', self.thisptr)             # <<<<<<<<<<<<<<
 *         print 'global _init =', _init
 *         if self._init == 1:
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"SaxonProcessor*"), __pyx_v_self->thisptr);

  /* "pysaxon/sxn.pyx":124
 *         print 'In SaxonProcessor.__dealloc__()'
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print 'global _init =', _init             # <<<<<<<<<<<<<<
 *         if self._init == 1:
 *             print 'Calling release()'
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_7pysaxon_3sxn__init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_s_global__init);
  __Pyx_GIVEREF(__pyx_kp_s_global__init);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_s_global__init);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  if (__Pyx_Print(0, __pyx_t_2, 1) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pysaxon/sxn.pyx":125
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print 'global _init =', _init
 *         if self._init == 1:             # <<<<<<<<<<<<<<
 *             print 'Calling release()'
 *             self.thisptr.release()
 */
  __pyx_t_3 = ((__pyx_v_self->_init == 1) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":126
 *         print 'global _init =', _init
 *         if self._init == 1:
 *             print 'Calling release()'             # <<<<<<<<<<<<<<
 *             self.thisptr.release()
 *         print 'Destroying C++ SaxonProcessor*'
 */
    if (__Pyx_PrintOne(0, __pyx_kp_s_Calling_release) < 0) __PYX_ERR(0, 126, __pyx_L1_error)

    /* "pysaxon/sxn.pyx":127
 *         if self._init == 1:
 *             print 'Calling release()'
 *             self.thisptr.release()             # <<<<<<<<<<<<<<
 *         print 'Destroying C++ SaxonProcessor*'
 *         del self.thisptr
 */
    try {
      __pyx_v_self->thisptr->release();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 127, __pyx_L1_error)
    }

    /* "pysaxon/sxn.pyx":125
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print 'global _init =', _init
 *         if self._init == 1:             # <<<<<<<<<<<<<<
 *             print 'Calling release()'
 *             self.thisptr.release()
 */
  }

  /* "pysaxon/sxn.pyx":128
 *             print 'Calling release()'
 *             self.thisptr.release()
 *         print 'Destroying C++ SaxonProcessor*'             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_Destroying_C_SaxonProcessor) < 0) __PYX_ERR(0, 128, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":129
 *             self.thisptr.release()
 *         print 'Destroying C++ SaxonProcessor*'
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     property exceptionOccurred:
 */
  delete __pyx_v_self->thisptr;

  /* "pysaxon/sxn.pyx":119
 *             self._init = 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         global _init
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("pysaxon.sxn.SaxonProcessor.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/sxn.pyx":132
 * 
 *     property exceptionOccurred:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.thisptr.exceptionOccurred()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_17exceptionOccurred_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_17exceptionOccurred_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_17exceptionOccurred___get__(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_17exceptionOccurred___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":133
 *     property exceptionOccurred:
 *         def __get__(self):
 *             return <bint>self.thisptr.exceptionOccurred()             # <<<<<<<<<<<<<<
 * 
 *     def exceptionClear(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->exceptionOccurred();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 133, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":132
 * 
 *     property exceptionOccurred:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return <bint>self.thisptr.exceptionOccurred()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.exceptionOccurred.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":135
 *             return <bint>self.thisptr.exceptionOccurred()
 * 
 *     def exceptionClear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.exceptionClear()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_5exceptionClear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_5exceptionClear(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exceptionClear (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_4exceptionClear(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_4exceptionClear(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exceptionClear", 0);

  /* "pysaxon/sxn.pyx":136
 * 
 *     def exceptionClear(self):
 *         self.thisptr.exceptionClear()             # <<<<<<<<<<<<<<
 * 
 *     def getException(self):
 */
  try {
    __pyx_v_self->thisptr->exceptionClear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 136, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":135
 *             return <bint>self.thisptr.exceptionOccurred()
 * 
 *     def exceptionClear(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.exceptionClear()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.exceptionClear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":138
 *         self.thisptr.exceptionClear()
 * 
 *     def getException(self):             # <<<<<<<<<<<<<<
 *         cdef SaxonApiException e
 *         e = SaxonApiException()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_7getException(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_7getException(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getException (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_6getException(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_6getException(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *__pyx_v_e = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  SaxonApiException *__pyx_t_2;
  __Pyx_RefNannySetupContext("getException", 0);

  /* "pysaxon/sxn.pyx":140
 *     def getException(self):
 *         cdef SaxonApiException e
 *         e = SaxonApiException()             # <<<<<<<<<<<<<<
 *         e.thisptr = self.thisptr.getException()
 *         return e
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_SaxonApiException), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_e = ((struct __pyx_obj_7pysaxon_3sxn_SaxonApiException *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":141
 *         cdef SaxonApiException e
 *         e = SaxonApiException()
 *         e.thisptr = self.thisptr.getException()             # <<<<<<<<<<<<<<
 *         return e
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getException();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_v_e->thisptr = __pyx_t_2;

  /* "pysaxon/sxn.pyx":142
 *         e = SaxonApiException()
 *         e.thisptr = self.thisptr.getException()
 *         return e             # <<<<<<<<<<<<<<
 * 
 *     def setcwd(self, char* cwd):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_e));
  __pyx_r = ((PyObject *)__pyx_v_e);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":138
 *         self.thisptr.exceptionClear()
 * 
 *     def getException(self):             # <<<<<<<<<<<<<<
 *         cdef SaxonApiException e
 *         e = SaxonApiException()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.getException", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":144
 *         return e
 * 
 *     def setcwd(self, char* cwd):             # <<<<<<<<<<<<<<
 *         self.thisptr.setcwd(cwd)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_9setcwd(PyObject *__pyx_v_self, PyObject *__pyx_arg_cwd); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_9setcwd(PyObject *__pyx_v_self, PyObject *__pyx_arg_cwd) {
  char *__pyx_v_cwd;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setcwd (wrapper)", 0);
  assert(__pyx_arg_cwd); {
    __pyx_v_cwd = __Pyx_PyObject_AsString(__pyx_arg_cwd); if (unlikely((!__pyx_v_cwd) && PyErr_Occurred())) __PYX_ERR(0, 144, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.setcwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_8setcwd(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), ((char *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_8setcwd(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_cwd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setcwd", 0);

  /* "pysaxon/sxn.pyx":145
 * 
 *     def setcwd(self, char* cwd):
 *         self.thisptr.setcwd(cwd)             # <<<<<<<<<<<<<<
 * 
 *     property resourcesDirectory:
 */
  try {
    __pyx_v_self->thisptr->setcwd(__pyx_v_cwd);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 145, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":144
 *         return e
 * 
 *     def setcwd(self, char* cwd):             # <<<<<<<<<<<<<<
 *         self.thisptr.setcwd(cwd)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.setcwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":148
 * 
 *     property resourcesDirectory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getResourcesDirectory()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory___get__(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":149
 *     property resourcesDirectory:
 *         def __get__(self):
 *             return self.thisptr.getResourcesDirectory()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char* dir):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getResourcesDirectory();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 149, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":148
 * 
 *     property resourcesDirectory:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.getResourcesDirectory()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.resourcesDirectory.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":151
 *             return self.thisptr.getResourcesDirectory()
 * 
 *         def __set__(self, char* dir):             # <<<<<<<<<<<<<<
 *             self.thisptr.setResourcesDirectory(dir)
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_dir); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_dir) {
  char *__pyx_v_dir;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_dir); {
    __pyx_v_dir = __Pyx_PyObject_AsString(__pyx_arg_dir); if (unlikely((!__pyx_v_dir) && PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.resourcesDirectory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_2__set__(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), ((char *)__pyx_v_dir));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_2__set__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_dir) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "pysaxon/sxn.pyx":152
 * 
 *         def __set__(self, char* dir):
 *             self.thisptr.setResourcesDirectory(dir)             # <<<<<<<<<<<<<<
 * 
 *     def setConfigurationProperty(self, char* name, char* value):
 */
  try {
    __pyx_v_self->thisptr->setResourcesDirectory(__pyx_v_dir);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 152, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":151
 *             return self.thisptr.getResourcesDirectory()
 * 
 *         def __set__(self, char* dir):             # <<<<<<<<<<<<<<
 *             self.thisptr.setResourcesDirectory(dir)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.resourcesDirectory.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":154
 *             self.thisptr.setResourcesDirectory(dir)
 * 
 *     def setConfigurationProperty(self, char* name, char* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.setConfigurationProperty(name, value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_11setConfigurationProperty(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_11setConfigurationProperty(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  char *__pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConfigurationProperty (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setConfigurationProperty", 1, 2, 2, 1); __PYX_ERR(0, 154, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setConfigurationProperty") < 0)) __PYX_ERR(0, 154, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setConfigurationProperty", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 154, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.setConfigurationProperty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_10setConfigurationProperty(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_10setConfigurationProperty(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setConfigurationProperty", 0);

  /* "pysaxon/sxn.pyx":155
 * 
 *     def setConfigurationProperty(self, char* name, char* value):
 *         self.thisptr.setConfigurationProperty(name, value)             # <<<<<<<<<<<<<<
 * 
 *     def clearConfigurationProperties(self):
 */
  try {
    __pyx_v_self->thisptr->setConfigurationProperty(__pyx_v_name, __pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 155, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":154
 *             self.thisptr.setResourcesDirectory(dir)
 * 
 *     def setConfigurationProperty(self, char* name, char* value):             # <<<<<<<<<<<<<<
 *         self.thisptr.setConfigurationProperty(name, value)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.setConfigurationProperty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":157
 *         self.thisptr.setConfigurationProperty(name, value)
 * 
 *     def clearConfigurationProperties(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clearConfigurationProperties()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_13clearConfigurationProperties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_13clearConfigurationProperties(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearConfigurationProperties (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_12clearConfigurationProperties(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_12clearConfigurationProperties(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearConfigurationProperties", 0);

  /* "pysaxon/sxn.pyx":158
 * 
 *     def clearConfigurationProperties(self):
 *         self.thisptr.clearConfigurationProperties()             # <<<<<<<<<<<<<<
 * 
 *     property version:
 */
  try {
    __pyx_v_self->thisptr->clearConfigurationProperties();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 158, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":157
 *         self.thisptr.setConfigurationProperty(name, value)
 * 
 *     def clearConfigurationProperties(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.clearConfigurationProperties()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.clearConfigurationProperties", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":162
 *     property version:
 *         """Get the Saxon version."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.version()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_7version_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_7version_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_7version___get__(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_7version___get__(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":163
 *         """Get the Saxon version."""
 *         def __get__(self):
 *             return self.thisptr.version()             # <<<<<<<<<<<<<<
 * 
 *     def parseXmlFromString(self, char *xml):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->version();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 163, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":162
 *     property version:
 *         """Get the Saxon version."""
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.version()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.version.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":165
 *             return self.thisptr.version()
 * 
 *     def parseXmlFromString(self, char *xml):             # <<<<<<<<<<<<<<
 *         """Parse a lexical representation of the source document and return it
 *         as a Node object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_15parseXmlFromString(PyObject *__pyx_v_self, PyObject *__pyx_arg_xml); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_14parseXmlFromString[] = "Parse a lexical representation of the source document and return it\n        as a Node object.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_15parseXmlFromString(PyObject *__pyx_v_self, PyObject *__pyx_arg_xml) {
  char *__pyx_v_xml;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parseXmlFromString (wrapper)", 0);
  assert(__pyx_arg_xml); {
    __pyx_v_xml = __Pyx_PyObject_AsString(__pyx_arg_xml); if (unlikely((!__pyx_v_xml) && PyErr_Occurred())) __PYX_ERR(0, 165, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.parseXmlFromString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_14parseXmlFromString(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), ((char *)__pyx_v_xml));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_14parseXmlFromString(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_xml) {
  XdmNode *__pyx_v_nptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XdmNode *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("parseXmlFromString", 0);

  /* "pysaxon/sxn.pyx":169
 *         as a Node object.
 *         """
 *         cdef cpp.XdmNode *nptr = NULL             # <<<<<<<<<<<<<<
 *         print 'In SaxonProcessor.parseXmlFromString()'
 *         print_ptr('SaxonProcessor*', self.thisptr)
 */
  __pyx_v_nptr = NULL;

  /* "pysaxon/sxn.pyx":170
 *         """
 *         cdef cpp.XdmNode *nptr = NULL
 *         print 'In SaxonProcessor.parseXmlFromString()'             # <<<<<<<<<<<<<<
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print_ptr('before XdmNode*', nptr)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_SaxonProcessor_parseXmlFromSt) < 0) __PYX_ERR(0, 170, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":171
 *         cdef cpp.XdmNode *nptr = NULL
 *         print 'In SaxonProcessor.parseXmlFromString()'
 *         print_ptr('SaxonProcessor*', self.thisptr)             # <<<<<<<<<<<<<<
 *         print_ptr('before XdmNode*', nptr)
 *         nptr = self.thisptr.parseXmlFromString(xml)
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"SaxonProcessor*"), __pyx_v_self->thisptr);

  /* "pysaxon/sxn.pyx":172
 *         print 'In SaxonProcessor.parseXmlFromString()'
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print_ptr('before XdmNode*', nptr)             # <<<<<<<<<<<<<<
 *         nptr = self.thisptr.parseXmlFromString(xml)
 *         print_ptr('after XdmNode*', nptr)
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"before XdmNode*"), __pyx_v_nptr);

  /* "pysaxon/sxn.pyx":173
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print_ptr('before XdmNode*', nptr)
 *         nptr = self.thisptr.parseXmlFromString(xml)             # <<<<<<<<<<<<<<
 *         print_ptr('after XdmNode*', nptr)
 *         return make_node(nptr, b'or error')
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->parseXmlFromString(__pyx_v_xml);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 173, __pyx_L1_error)
  }
  __pyx_v_nptr = __pyx_t_1;

  /* "pysaxon/sxn.pyx":174
 *         print_ptr('before XdmNode*', nptr)
 *         nptr = self.thisptr.parseXmlFromString(xml)
 *         print_ptr('after XdmNode*', nptr)             # <<<<<<<<<<<<<<
 *         return make_node(nptr, b'or error')
 * 
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"after XdmNode*"), __pyx_v_nptr);

  /* "pysaxon/sxn.pyx":175
 *         nptr = self.thisptr.parseXmlFromString(xml)
 *         print_ptr('after XdmNode*', nptr)
 *         return make_node(nptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 *     def parseXmlFromFile(self, char *xmlfile):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pysaxon_3xdm_make_node(__pyx_v_nptr, ((char *)"or error")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":165
 *             return self.thisptr.version()
 * 
 *     def parseXmlFromString(self, char *xml):             # <<<<<<<<<<<<<<
 *         """Parse a lexical representation of the source document and return it
 *         as a Node object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.parseXmlFromString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":177
 *         return make_node(nptr, b'or error')
 * 
 *     def parseXmlFromFile(self, char *xmlfile):             # <<<<<<<<<<<<<<
 *         """Parse a source document file and return it as a Node object."""
 *         cdef cpp.XdmNode *nptr = NULL
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_17parseXmlFromFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_xmlfile); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_16parseXmlFromFile[] = "Parse a source document file and return it as a Node object.";
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_17parseXmlFromFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_xmlfile) {
  char *__pyx_v_xmlfile;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parseXmlFromFile (wrapper)", 0);
  assert(__pyx_arg_xmlfile); {
    __pyx_v_xmlfile = __Pyx_PyObject_AsString(__pyx_arg_xmlfile); if (unlikely((!__pyx_v_xmlfile) && PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.parseXmlFromFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_16parseXmlFromFile(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), ((char *)__pyx_v_xmlfile));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_16parseXmlFromFile(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_xmlfile) {
  XdmNode *__pyx_v_nptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XdmNode *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("parseXmlFromFile", 0);

  /* "pysaxon/sxn.pyx":179
 *     def parseXmlFromFile(self, char *xmlfile):
 *         """Parse a source document file and return it as a Node object."""
 *         cdef cpp.XdmNode *nptr = NULL             # <<<<<<<<<<<<<<
 *         nptr = self.thisptr.parseXmlFromFile(xmlfile)
 *         return make_node(nptr, b'or error')
 */
  __pyx_v_nptr = NULL;

  /* "pysaxon/sxn.pyx":180
 *         """Parse a source document file and return it as a Node object."""
 *         cdef cpp.XdmNode *nptr = NULL
 *         nptr = self.thisptr.parseXmlFromFile(xmlfile)             # <<<<<<<<<<<<<<
 *         return make_node(nptr, b'or error')
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->parseXmlFromFile(__pyx_v_xmlfile);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 180, __pyx_L1_error)
  }
  __pyx_v_nptr = __pyx_t_1;

  /* "pysaxon/sxn.pyx":181
 *         cdef cpp.XdmNode *nptr = NULL
 *         nptr = self.thisptr.parseXmlFromFile(xmlfile)
 *         return make_node(nptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 *     def parseXmlFromUri(self, char *uri):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pysaxon_3xdm_make_node(__pyx_v_nptr, ((char *)"or error")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":177
 *         return make_node(nptr, b'or error')
 * 
 *     def parseXmlFromFile(self, char *xmlfile):             # <<<<<<<<<<<<<<
 *         """Parse a source document file and return it as a Node object."""
 *         cdef cpp.XdmNode *nptr = NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.parseXmlFromFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":183
 *         return make_node(nptr, b'or error')
 * 
 *     def parseXmlFromUri(self, char *uri):             # <<<<<<<<<<<<<<
 *         """Parse a source document available by URI and return it as a Node
 *         object."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_19parseXmlFromUri(PyObject *__pyx_v_self, PyObject *__pyx_arg_uri); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_18parseXmlFromUri[] = "Parse a source document available by URI and return it as a Node\n        object.";
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_19parseXmlFromUri(PyObject *__pyx_v_self, PyObject *__pyx_arg_uri) {
  char *__pyx_v_uri;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parseXmlFromUri (wrapper)", 0);
  assert(__pyx_arg_uri); {
    __pyx_v_uri = __Pyx_PyObject_AsString(__pyx_arg_uri); if (unlikely((!__pyx_v_uri) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.parseXmlFromUri", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18parseXmlFromUri(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), ((char *)__pyx_v_uri));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_18parseXmlFromUri(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, char *__pyx_v_uri) {
  XdmNode *__pyx_v_nptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XdmNode *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("parseXmlFromUri", 0);

  /* "pysaxon/sxn.pyx":186
 *         """Parse a source document available by URI and return it as a Node
 *         object."""
 *         cdef cpp.XdmNode *nptr = NULL             # <<<<<<<<<<<<<<
 *         nptr = self.thisptr.parseXmlFromUri(uri)
 *         return make_node(nptr, b'or error')
 */
  __pyx_v_nptr = NULL;

  /* "pysaxon/sxn.pyx":187
 *         object."""
 *         cdef cpp.XdmNode *nptr = NULL
 *         nptr = self.thisptr.parseXmlFromUri(uri)             # <<<<<<<<<<<<<<
 *         return make_node(nptr, b'or error')
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->parseXmlFromUri(__pyx_v_uri);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 187, __pyx_L1_error)
  }
  __pyx_v_nptr = __pyx_t_1;

  /* "pysaxon/sxn.pyx":188
 *         cdef cpp.XdmNode *nptr = NULL
 *         nptr = self.thisptr.parseXmlFromUri(uri)
 *         return make_node(nptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 *     def newXPathProcessor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pysaxon_3xdm_make_node(__pyx_v_nptr, ((char *)"or error")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":183
 *         return make_node(nptr, b'or error')
 * 
 *     def parseXmlFromUri(self, char *uri):             # <<<<<<<<<<<<<<
 *         """Parse a source document available by URI and return it as a Node
 *         object."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.parseXmlFromUri", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":190
 *         return make_node(nptr, b'or error')
 * 
 *     def newXPathProcessor(self):             # <<<<<<<<<<<<<<
 *         """Create an XPathProcessor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_21newXPathProcessor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_20newXPathProcessor[] = "Create an XPathProcessor.\n\n        An XPathProcessor is used to compile XPath expressions.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_21newXPathProcessor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("newXPathProcessor (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_20newXPathProcessor(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_20newXPathProcessor(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_xp = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  XPathProcessor *__pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("newXPathProcessor", 0);

  /* "pysaxon/sxn.pyx":195
 *         An XPathProcessor is used to compile XPath expressions.
 *         """
 *         cdef XPathProcessor xp = XPathProcessor(raw=True)             # <<<<<<<<<<<<<<
 *         print 'In SaxonProcessor.newXPathProcessor()'
 *         print_ptr('SaxonProcessor*', self.thisptr)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_raw, Py_True) < 0) __PYX_ERR(0, 195, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_XPathProcessor), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_xp = ((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "pysaxon/sxn.pyx":196
 *         """
 *         cdef XPathProcessor xp = XPathProcessor(raw=True)
 *         print 'In SaxonProcessor.newXPathProcessor()'             # <<<<<<<<<<<<<<
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print_ptr('before XPathProcessor*', xp.thisptr)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_SaxonProcessor_newXPathProces) < 0) __PYX_ERR(0, 196, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":197
 *         cdef XPathProcessor xp = XPathProcessor(raw=True)
 *         print 'In SaxonProcessor.newXPathProcessor()'
 *         print_ptr('SaxonProcessor*', self.thisptr)             # <<<<<<<<<<<<<<
 *         print_ptr('before XPathProcessor*', xp.thisptr)
 *         xp.thisptr = self.thisptr.newXPathProcessor()
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"SaxonProcessor*"), __pyx_v_self->thisptr);

  /* "pysaxon/sxn.pyx":198
 *         print 'In SaxonProcessor.newXPathProcessor()'
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print_ptr('before XPathProcessor*', xp.thisptr)             # <<<<<<<<<<<<<<
 *         xp.thisptr = self.thisptr.newXPathProcessor()
 *         print_ptr('after XPathProcessor*', xp.thisptr)
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"before XPathProcessor*"), __pyx_v_xp->thisptr);

  /* "pysaxon/sxn.pyx":199
 *         print_ptr('SaxonProcessor*', self.thisptr)
 *         print_ptr('before XPathProcessor*', xp.thisptr)
 *         xp.thisptr = self.thisptr.newXPathProcessor()             # <<<<<<<<<<<<<<
 *         print_ptr('after XPathProcessor*', xp.thisptr)
 *         if xp.thisptr == NULL:
 */
  try {
    __pyx_t_3 = __pyx_v_self->thisptr->newXPathProcessor();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 199, __pyx_L1_error)
  }
  __pyx_v_xp->thisptr = __pyx_t_3;

  /* "pysaxon/sxn.pyx":200
 *         print_ptr('before XPathProcessor*', xp.thisptr)
 *         xp.thisptr = self.thisptr.newXPathProcessor()
 *         print_ptr('after XPathProcessor*', xp.thisptr)             # <<<<<<<<<<<<<<
 *         if xp.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"after XPathProcessor*"), __pyx_v_xp->thisptr);

  /* "pysaxon/sxn.pyx":201
 *         xp.thisptr = self.thisptr.newXPathProcessor()
 *         print_ptr('after XPathProcessor*', xp.thisptr)
 *         if xp.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError('Failed to create XsltProcessor object')
 *         return xp
 */
  __pyx_t_4 = ((__pyx_v_xp->thisptr == NULL) != 0);
  if (__pyx_t_4) {

    /* "pysaxon/sxn.pyx":202
 *         print_ptr('after XPathProcessor*', xp.thisptr)
 *         if xp.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')             # <<<<<<<<<<<<<<
 *         return xp
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 202, __pyx_L1_error)

    /* "pysaxon/sxn.pyx":201
 *         xp.thisptr = self.thisptr.newXPathProcessor()
 *         print_ptr('after XPathProcessor*', xp.thisptr)
 *         if xp.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError('Failed to create XsltProcessor object')
 *         return xp
 */
  }

  /* "pysaxon/sxn.pyx":203
 *         if xp.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')
 *         return xp             # <<<<<<<<<<<<<<
 * 
 *     def newXsltProcessor(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_xp));
  __pyx_r = ((PyObject *)__pyx_v_xp);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":190
 *         return make_node(nptr, b'or error')
 * 
 *     def newXPathProcessor(self):             # <<<<<<<<<<<<<<
 *         """Create an XPathProcessor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.newXPathProcessor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_xp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":205
 *         return xp
 * 
 *     def newXsltProcessor(self):             # <<<<<<<<<<<<<<
 *         """Create an XsltProcessor.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_23newXsltProcessor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_22newXsltProcessor[] = "Create an XsltProcessor.\n\n        An XsltProcessor is used to compile XSLT stylesheets.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_23newXsltProcessor(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("newXsltProcessor (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_22newXsltProcessor(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_22newXsltProcessor(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_xsl = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XsltProcessor *__pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("newXsltProcessor", 0);

  /* "pysaxon/sxn.pyx":210
 *         An XsltProcessor is used to compile XSLT stylesheets.
 *         """
 *         cdef XsltProcessor xsl = XsltProcessor()             # <<<<<<<<<<<<<<
 *         xsl.thisptr = self.thisptr.newXsltProcessor()
 *         if xsl.thisptr == NULL:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_XsltProcessor), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_xsl = ((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":211
 *         """
 *         cdef XsltProcessor xsl = XsltProcessor()
 *         xsl.thisptr = self.thisptr.newXsltProcessor()             # <<<<<<<<<<<<<<
 *         if xsl.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->newXsltProcessor();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 211, __pyx_L1_error)
  }
  __pyx_v_xsl->thisptr = __pyx_t_2;

  /* "pysaxon/sxn.pyx":212
 *         cdef XsltProcessor xsl = XsltProcessor()
 *         xsl.thisptr = self.thisptr.newXsltProcessor()
 *         if xsl.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError('Failed to create XsltProcessor object')
 *         return xsl
 */
  __pyx_t_3 = ((__pyx_v_xsl->thisptr == NULL) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":213
 *         xsl.thisptr = self.thisptr.newXsltProcessor()
 *         if xsl.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')             # <<<<<<<<<<<<<<
 *         return xsl
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 213, __pyx_L1_error)

    /* "pysaxon/sxn.pyx":212
 *         cdef XsltProcessor xsl = XsltProcessor()
 *         xsl.thisptr = self.thisptr.newXsltProcessor()
 *         if xsl.thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError('Failed to create XsltProcessor object')
 *         return xsl
 */
  }

  /* "pysaxon/sxn.pyx":214
 *         if xsl.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')
 *         return xsl             # <<<<<<<<<<<<<<
 * 
 *     def getStringValue(self, Item it not None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_xsl));
  __pyx_r = ((PyObject *)__pyx_v_xsl);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":205
 *         return xp
 * 
 *     def newXsltProcessor(self):             # <<<<<<<<<<<<<<
 *         """Create an XsltProcessor.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.newXsltProcessor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_xsl);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":216
 *         return xsl
 * 
 *     def getStringValue(self, Item it not None):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getStringValue(<cpp.XdmItem*>it.thisptr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_25getStringValue(PyObject *__pyx_v_self, PyObject *__pyx_v_it); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_25getStringValue(PyObject *__pyx_v_self, PyObject *__pyx_v_it) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getStringValue (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_it), __pyx_ptype_7pysaxon_3xdm_Item, 0, "it", 0))) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14SaxonProcessor_24getStringValue(((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)__pyx_v_self), ((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_it));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14SaxonProcessor_24getStringValue(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_it) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getStringValue", 0);

  /* "pysaxon/sxn.pyx":217
 * 
 *     def getStringValue(self, Item it not None):
 *         return self.thisptr.getStringValue(<cpp.XdmItem*>it.thisptr)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getStringValue(((XdmItem *)__pyx_v_it->__pyx_base.thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 217, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":216
 *         return xsl
 * 
 *     def getStringValue(self, Item it not None):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getStringValue(<cpp.XdmItem*>it.thisptr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.SaxonProcessor.getStringValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":223
 *     """XPathProcessor extension type."""
 * 
 *     def __cinit__(self, SaxonProcessor proc=None, bytes cwd=b'',             # <<<<<<<<<<<<<<
 *                   bint raw=False):
 *         cdef string temp
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_proc = 0;
  PyObject *__pyx_v_cwd = 0;
  int __pyx_v_raw;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proc,&__pyx_n_s_cwd,&__pyx_n_s_raw,0};
    PyObject* values[3] = {0,0,0};
    values[0] = (PyObject *)((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)Py_None);
    values[1] = ((PyObject*)__pyx_kp_b__5);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_proc);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_cwd);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_raw);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 223, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_proc = ((struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *)values[0]);
    __pyx_v_cwd = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_raw = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_raw == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
    } else {

      /* "pysaxon/sxn.pyx":224
 * 
 *     def __cinit__(self, SaxonProcessor proc=None, bytes cwd=b'',
 *                   bint raw=False):             # <<<<<<<<<<<<<<
 *         cdef string temp
 *         if raw:
 */
      __pyx_v_raw = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 223, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_proc), __pyx_ptype_7pysaxon_3sxn_SaxonProcessor, 1, "proc", 0))) __PYX_ERR(0, 223, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cwd), (&PyBytes_Type), 1, "cwd", 1))) __PYX_ERR(0, 223, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor___cinit__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), __pyx_v_proc, __pyx_v_cwd, __pyx_v_raw);

  /* "pysaxon/sxn.pyx":223
 *     """XPathProcessor extension type."""
 * 
 *     def __cinit__(self, SaxonProcessor proc=None, bytes cwd=b'',             # <<<<<<<<<<<<<<
 *                   bint raw=False):
 *         cdef string temp
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor___cinit__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor *__pyx_v_proc, PyObject *__pyx_v_cwd, int __pyx_v_raw) {
  std::string __pyx_v_temp;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  XPathProcessor *__pyx_t_3;
  std::string __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pysaxon/sxn.pyx":226
 *                   bint raw=False):
 *         cdef string temp
 *         if raw:             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 *         else:
 */
  __pyx_t_1 = (__pyx_v_raw != 0);
  if (__pyx_t_1) {

    /* "pysaxon/sxn.pyx":227
 *         cdef string temp
 *         if raw:
 *             self.thisptr = NULL             # <<<<<<<<<<<<<<
 *         else:
 *             if proc is None:
 */
    __pyx_v_self->thisptr = NULL;

    /* "pysaxon/sxn.pyx":226
 *                   bint raw=False):
 *         cdef string temp
 *         if raw:             # <<<<<<<<<<<<<<
 *             self.thisptr = NULL
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pysaxon/sxn.pyx":229
 *             self.thisptr = NULL
 *         else:
 *             if proc is None:             # <<<<<<<<<<<<<<
 *                 self.thisptr = new cpp.XPathProcessor()
 *             else:
 */
  /*else*/ {
    __pyx_t_1 = (((PyObject *)__pyx_v_proc) == Py_None);
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "pysaxon/sxn.pyx":230
 *         else:
 *             if proc is None:
 *                 self.thisptr = new cpp.XPathProcessor()             # <<<<<<<<<<<<<<
 *             else:
 *                 temp = cwd
 */
      try {
        __pyx_t_3 = new XPathProcessor();
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 230, __pyx_L1_error)
      }
      __pyx_v_self->thisptr = __pyx_t_3;

      /* "pysaxon/sxn.pyx":229
 *             self.thisptr = NULL
 *         else:
 *             if proc is None:             # <<<<<<<<<<<<<<
 *                 self.thisptr = new cpp.XPathProcessor()
 *             else:
 */
      goto __pyx_L4;
    }

    /* "pysaxon/sxn.pyx":232
 *                 self.thisptr = new cpp.XPathProcessor()
 *             else:
 *                 temp = cwd             # <<<<<<<<<<<<<<
 *                 self.thisptr = new cpp.XPathProcessor(proc.thisptr, temp)
 * 
 */
    /*else*/ {
      __pyx_t_4 = __pyx_convert_string_from_py_std__in_string(__pyx_v_cwd); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 232, __pyx_L1_error)
      __pyx_v_temp = __pyx_t_4;

      /* "pysaxon/sxn.pyx":233
 *             else:
 *                 temp = cwd
 *                 self.thisptr = new cpp.XPathProcessor(proc.thisptr, temp)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      try {
        __pyx_t_3 = new XPathProcessor(__pyx_v_proc->thisptr, __pyx_v_temp);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 233, __pyx_L1_error)
      }
      __pyx_v_self->thisptr = __pyx_t_3;
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pysaxon/sxn.pyx":223
 *     """XPathProcessor extension type."""
 * 
 *     def __cinit__(self, SaxonProcessor proc=None, bytes cwd=b'',             # <<<<<<<<<<<<<<
 *                   bint raw=False):
 *         cdef string temp
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":235
 *                 self.thisptr = new cpp.XPathProcessor(proc.thisptr, temp)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3sxn_14XPathProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3sxn_14XPathProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3sxn_14XPathProcessor_2__dealloc__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3sxn_14XPathProcessor_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/sxn.pyx":236
 * 
 *     def __dealloc__(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (__pyx_t_1) {

    /* "pysaxon/sxn.pyx":237
 *     def __dealloc__(self):
 *         if self.thisptr:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def setcwd(self, char *cwd):
 */
    delete __pyx_v_self->thisptr;

    /* "pysaxon/sxn.pyx":236
 * 
 *     def __dealloc__(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "pysaxon/sxn.pyx":235
 *                 self.thisptr = new cpp.XPathProcessor(proc.thisptr, temp)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/sxn.pyx":239
 *             del self.thisptr
 * 
 *     def setcwd(self, char *cwd):             # <<<<<<<<<<<<<<
 *         """Set the current working directory to ``cwd``."""
 *         self.thisptr.setcwd(cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_5setcwd(PyObject *__pyx_v_self, PyObject *__pyx_arg_cwd); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_4setcwd[] = "Set the current working directory to ``cwd``.";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_5setcwd(PyObject *__pyx_v_self, PyObject *__pyx_arg_cwd) {
  char *__pyx_v_cwd;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setcwd (wrapper)", 0);
  assert(__pyx_arg_cwd); {
    __pyx_v_cwd = __Pyx_PyObject_AsString(__pyx_arg_cwd); if (unlikely((!__pyx_v_cwd) && PyErr_Occurred())) __PYX_ERR(0, 239, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setcwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_4setcwd(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_4setcwd(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_cwd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setcwd", 0);

  /* "pysaxon/sxn.pyx":241
 *     def setcwd(self, char *cwd):
 *         """Set the current working directory to ``cwd``."""
 *         self.thisptr.setcwd(cwd)             # <<<<<<<<<<<<<<
 * 
 *     def setBaseURI(self, char *uri):
 */
  try {
    __pyx_v_self->thisptr->setcwd(__pyx_v_cwd);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 241, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":239
 *             del self.thisptr
 * 
 *     def setcwd(self, char *cwd):             # <<<<<<<<<<<<<<
 *         """Set the current working directory to ``cwd``."""
 *         self.thisptr.setcwd(cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setcwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":243
 *         self.thisptr.setcwd(cwd)
 * 
 *     def setBaseURI(self, char *uri):             # <<<<<<<<<<<<<<
 *         """Set the static base URI for XPath expressions compiled using this
 *         XPath processor.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_7setBaseURI(PyObject *__pyx_v_self, PyObject *__pyx_arg_uri); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_6setBaseURI[] = "Set the static base URI for XPath expressions compiled using this\n        XPath processor.\n\n        The base URI is part of the static context, and is used to resolve any\n        relative URIs appearing within an XPath expression. If no static base\n        URI is supplied then the current working directory is used.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_7setBaseURI(PyObject *__pyx_v_self, PyObject *__pyx_arg_uri) {
  char *__pyx_v_uri;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBaseURI (wrapper)", 0);
  assert(__pyx_arg_uri); {
    __pyx_v_uri = __Pyx_PyObject_AsString(__pyx_arg_uri); if (unlikely((!__pyx_v_uri) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setBaseURI", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_6setBaseURI(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_uri));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_6setBaseURI(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_uri) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBaseURI", 0);

  /* "pysaxon/sxn.pyx":251
 *         URI is supplied then the current working directory is used.
 *         """
 *         self.thisptr.setBaseURI(uri)             # <<<<<<<<<<<<<<
 * 
 *     def declareNamespace(self, char *prefix, char *uri):
 */
  try {
    __pyx_v_self->thisptr->setBaseURI(__pyx_v_uri);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 251, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":243
 *         self.thisptr.setcwd(cwd)
 * 
 *     def setBaseURI(self, char *uri):             # <<<<<<<<<<<<<<
 *         """Set the static base URI for XPath expressions compiled using this
 *         XPath processor.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setBaseURI", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":253
 *         self.thisptr.setBaseURI(uri)
 * 
 *     def declareNamespace(self, char *prefix, char *uri):             # <<<<<<<<<<<<<<
 *         """Declare a namespace binding as part of the static context for XPath
 *         expressions.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_9declareNamespace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_8declareNamespace[] = "Declare a namespace binding as part of the static context for XPath\n        expressions.\n\n        :arg char* prefix: The namespace prefix. If the value is a zero-length\n            string, this method sets the default namespace for elements and\n            types.\n        :arg char* uri: The namespace URI. It is possible to specify a zero-\n            length string to \"undeclare\" a namespace; in this case the prefix\n            will not be available for use, except in the case where the prefix\n            is also a zero length string, in which case the absence of a prefix\n            implies that the name is in no namespace.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_9declareNamespace(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_prefix;
  char *__pyx_v_uri;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("declareNamespace (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_prefix,&__pyx_n_s_uri,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_prefix)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_uri)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("declareNamespace", 1, 2, 2, 1); __PYX_ERR(0, 253, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "declareNamespace") < 0)) __PYX_ERR(0, 253, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_prefix = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_prefix) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
    __pyx_v_uri = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_uri) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("declareNamespace", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.declareNamespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_8declareNamespace(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), __pyx_v_prefix, __pyx_v_uri);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_8declareNamespace(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_prefix, char *__pyx_v_uri) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("declareNamespace", 0);

  /* "pysaxon/sxn.pyx":266
 *             implies that the name is in no namespace.
 *         """
 *         self.thisptr.declareNamespace(prefix, uri)             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, char *xpath):
 */
  try {
    __pyx_v_self->thisptr->declareNamespace(__pyx_v_prefix, __pyx_v_uri);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 266, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":253
 *         self.thisptr.setBaseURI(uri)
 * 
 *     def declareNamespace(self, char *prefix, char *uri):             # <<<<<<<<<<<<<<
 *         """Declare a namespace binding as part of the static context for XPath
 *         expressions.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.declareNamespace", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":268
 *         self.thisptr.declareNamespace(prefix, uri)
 * 
 *     def evaluate(self, char *xpath):             # <<<<<<<<<<<<<<
 *         """Compile and evaluate an XPath expression.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_11evaluate(PyObject *__pyx_v_self, PyObject *__pyx_arg_xpath); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_10evaluate[] = "Compile and evaluate an XPath expression.\n\n        Return xdm.Value object.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_11evaluate(PyObject *__pyx_v_self, PyObject *__pyx_arg_xpath) {
  char *__pyx_v_xpath;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  assert(__pyx_arg_xpath); {
    __pyx_v_xpath = __Pyx_PyObject_AsString(__pyx_arg_xpath); if (unlikely((!__pyx_v_xpath) && PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10evaluate(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_xpath));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10evaluate(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_xpath) {
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_val = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XdmValue *__pyx_t_2;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "pysaxon/sxn.pyx":273
 *         Return xdm.Value object.
 *         """
 *         cdef Value val = Value()             # <<<<<<<<<<<<<<
 *         val.thisptr = self.thisptr.evaluate(xpath)
 *         return val
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_val = ((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":274
 *         """
 *         cdef Value val = Value()
 *         val.thisptr = self.thisptr.evaluate(xpath)             # <<<<<<<<<<<<<<
 *         return val
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->evaluate(__pyx_v_xpath);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_v_val->thisptr = __pyx_t_2;

  /* "pysaxon/sxn.pyx":275
 *         cdef Value val = Value()
 *         val.thisptr = self.thisptr.evaluate(xpath)
 *         return val             # <<<<<<<<<<<<<<
 * 
 *     def evaluate_single(self, char *xpath):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_val));
  __pyx_r = ((PyObject *)__pyx_v_val);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":268
 *         self.thisptr.declareNamespace(prefix, uri)
 * 
 *     def evaluate(self, char *xpath):             # <<<<<<<<<<<<<<
 *         """Compile and evaluate an XPath expression.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":277
 *         return val
 * 
 *     def evaluate_single(self, char *xpath):             # <<<<<<<<<<<<<<
 *         """Compile and evaluate an XPath expression. The result is expected to
 *         be a single xdm.Item.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_13evaluate_single(PyObject *__pyx_v_self, PyObject *__pyx_arg_xpath); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_12evaluate_single[] = "Compile and evaluate an XPath expression. The result is expected to\n        be a single xdm.Item.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_13evaluate_single(PyObject *__pyx_v_self, PyObject *__pyx_arg_xpath) {
  char *__pyx_v_xpath;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate_single (wrapper)", 0);
  assert(__pyx_arg_xpath); {
    __pyx_v_xpath = __Pyx_PyObject_AsString(__pyx_arg_xpath); if (unlikely((!__pyx_v_xpath) && PyErr_Occurred())) __PYX_ERR(0, 277, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.evaluate_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_12evaluate_single(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_xpath));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_12evaluate_single(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_xpath) {
  XdmItem *__pyx_v_iptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  XdmItem *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("evaluate_single", 0);

  /* "pysaxon/sxn.pyx":281
 *         be a single xdm.Item.
 *         """
 *         cdef cpp.XdmItem *iptr = NULL             # <<<<<<<<<<<<<<
 *         print 'In XPathProcessor.evaluate_single()'
 *         print_ptr('XPathProcessor*', self.thisptr)
 */
  __pyx_v_iptr = NULL;

  /* "pysaxon/sxn.pyx":282
 *         """
 *         cdef cpp.XdmItem *iptr = NULL
 *         print 'In XPathProcessor.evaluate_single()'             # <<<<<<<<<<<<<<
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         print_ptr('before XdmItem*', iptr)
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_XPathProcessor_evaluate_singl) < 0) __PYX_ERR(0, 282, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":283
 *         cdef cpp.XdmItem *iptr = NULL
 *         print 'In XPathProcessor.evaluate_single()'
 *         print_ptr('XPathProcessor*', self.thisptr)             # <<<<<<<<<<<<<<
 *         print_ptr('before XdmItem*', iptr)
 *         iptr = self.thisptr.evaluateSingle(xpath)
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"XPathProcessor*"), __pyx_v_self->thisptr);

  /* "pysaxon/sxn.pyx":284
 *         print 'In XPathProcessor.evaluate_single()'
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         print_ptr('before XdmItem*', iptr)             # <<<<<<<<<<<<<<
 *         iptr = self.thisptr.evaluateSingle(xpath)
 *         print_ptr('after XdmItem*', iptr)
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"before XdmItem*"), __pyx_v_iptr);

  /* "pysaxon/sxn.pyx":285
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         print_ptr('before XdmItem*', iptr)
 *         iptr = self.thisptr.evaluateSingle(xpath)             # <<<<<<<<<<<<<<
 *         print_ptr('after XdmItem*', iptr)
 *         return make_item(iptr, b'or error')
 */
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->evaluateSingle(__pyx_v_xpath);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 285, __pyx_L1_error)
  }
  __pyx_v_iptr = __pyx_t_1;

  /* "pysaxon/sxn.pyx":286
 *         print_ptr('before XdmItem*', iptr)
 *         iptr = self.thisptr.evaluateSingle(xpath)
 *         print_ptr('after XdmItem*', iptr)             # <<<<<<<<<<<<<<
 *         return make_item(iptr, b'or error')
 * 
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"after XdmItem*"), __pyx_v_iptr);

  /* "pysaxon/sxn.pyx":287
 *         iptr = self.thisptr.evaluateSingle(xpath)
 *         print_ptr('after XdmItem*', iptr)
 *         return make_item(iptr, b'or error')             # <<<<<<<<<<<<<<
 * 
 *     def evaluate_bool(self, char *xpath):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_7pysaxon_3xdm_make_item(__pyx_v_iptr, ((char *)"or error")); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":277
 *         return val
 * 
 *     def evaluate_single(self, char *xpath):             # <<<<<<<<<<<<<<
 *         """Compile and evaluate an XPath expression. The result is expected to
 *         be a single xdm.Item.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.evaluate_single", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":289
 *         return make_item(iptr, b'or error')
 * 
 *     def evaluate_bool(self, char *xpath):             # <<<<<<<<<<<<<<
 *         """Evaluate the XPath expression, returning the effective boolean value
 *         of the result.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_15evaluate_bool(PyObject *__pyx_v_self, PyObject *__pyx_arg_xpath); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_14evaluate_bool[] = "Evaluate the XPath expression, returning the effective boolean value\n        of the result.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_15evaluate_bool(PyObject *__pyx_v_self, PyObject *__pyx_arg_xpath) {
  char *__pyx_v_xpath;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate_bool (wrapper)", 0);
  assert(__pyx_arg_xpath); {
    __pyx_v_xpath = __Pyx_PyObject_AsString(__pyx_arg_xpath); if (unlikely((!__pyx_v_xpath) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.evaluate_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_14evaluate_bool(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_xpath));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_14evaluate_bool(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_xpath) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("evaluate_bool", 0);

  /* "pysaxon/sxn.pyx":293
 *         of the result.
 *         """
 *         return <bint>self.thisptr.effectiveBooleanValue(xpath)             # <<<<<<<<<<<<<<
 * 
 *     def setContextItem(self, Item it):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->effectiveBooleanValue(__pyx_v_xpath);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 293, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":289
 *         return make_item(iptr, b'or error')
 * 
 *     def evaluate_bool(self, char *xpath):             # <<<<<<<<<<<<<<
 *         """Evaluate the XPath expression, returning the effective boolean value
 *         of the result.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.evaluate_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":295
 *         return <bint>self.thisptr.effectiveBooleanValue(xpath)
 * 
 *     def setContextItem(self, Item it):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmItem *ptr
 *         print 'In XPathProcessor.setContextItem()'
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_17setContextItem(PyObject *__pyx_v_self, PyObject *__pyx_v_it); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_17setContextItem(PyObject *__pyx_v_self, PyObject *__pyx_v_it) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setContextItem (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_it), __pyx_ptype_7pysaxon_3xdm_Item, 1, "it", 0))) __PYX_ERR(0, 295, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_16setContextItem(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_it));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_16setContextItem(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_it) {
  XdmItem *__pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("setContextItem", 0);

  /* "pysaxon/sxn.pyx":297
 *     def setContextItem(self, Item it):
 *         cdef cpp.XdmItem *ptr
 *         print 'In XPathProcessor.setContextItem()'             # <<<<<<<<<<<<<<
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         if not isinstance(it, (Item, Node)):
 */
  if (__Pyx_PrintOne(0, __pyx_kp_s_In_XPathProcessor_setContextItem) < 0) __PYX_ERR(0, 297, __pyx_L1_error)

  /* "pysaxon/sxn.pyx":298
 *         cdef cpp.XdmItem *ptr
 *         print 'In XPathProcessor.setContextItem()'
 *         print_ptr('XPathProcessor*', self.thisptr)             # <<<<<<<<<<<<<<
 *         if not isinstance(it, (Item, Node)):
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"XPathProcessor*"), __pyx_v_self->thisptr);

  /* "pysaxon/sxn.pyx":299
 *         print 'In XPathProcessor.setContextItem()'
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         if not isinstance(it, (Item, Node)):             # <<<<<<<<<<<<<<
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')
 *         ptr = <cpp.XdmItem*>it.thisptr
 */
  __pyx_t_2 = __Pyx_TypeCheck(((PyObject *)__pyx_v_it), __pyx_ptype_7pysaxon_3xdm_Item); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_TypeCheck(((PyObject *)__pyx_v_it), __pyx_ptype_7pysaxon_3xdm_Node); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":300
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         if not isinstance(it, (Item, Node)):
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')             # <<<<<<<<<<<<<<
 *         ptr = <cpp.XdmItem*>it.thisptr
 *         print_ptr('XdmItem*', ptr)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 300, __pyx_L1_error)

    /* "pysaxon/sxn.pyx":299
 *         print 'In XPathProcessor.setContextItem()'
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         if not isinstance(it, (Item, Node)):             # <<<<<<<<<<<<<<
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')
 *         ptr = <cpp.XdmItem*>it.thisptr
 */
  }

  /* "pysaxon/sxn.pyx":301
 *         if not isinstance(it, (Item, Node)):
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')
 *         ptr = <cpp.XdmItem*>it.thisptr             # <<<<<<<<<<<<<<
 *         print_ptr('XdmItem*', ptr)
 *         self.thisptr.setContextItem(ptr)
 */
  __pyx_v_ptr = ((XdmItem *)__pyx_v_it->__pyx_base.thisptr);

  /* "pysaxon/sxn.pyx":302
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')
 *         ptr = <cpp.XdmItem*>it.thisptr
 *         print_ptr('XdmItem*', ptr)             # <<<<<<<<<<<<<<
 *         self.thisptr.setContextItem(ptr)
 * 
 */
  __pyx_f_7pysaxon_3xdm_print_ptr(((char *)"XdmItem*"), __pyx_v_ptr);

  /* "pysaxon/sxn.pyx":303
 *         ptr = <cpp.XdmItem*>it.thisptr
 *         print_ptr('XdmItem*', ptr)
 *         self.thisptr.setContextItem(ptr)             # <<<<<<<<<<<<<<
 * 
 *     def setContextFile(self, char *filename):
 */
  try {
    __pyx_v_self->thisptr->setContextItem(__pyx_v_ptr);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 303, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":295
 *         return <bint>self.thisptr.effectiveBooleanValue(xpath)
 * 
 *     def setContextItem(self, Item it):             # <<<<<<<<<<<<<<
 *         cdef cpp.XdmItem *ptr
 *         print 'In XPathProcessor.setContextItem()'
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setContextItem", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":305
 *         self.thisptr.setContextItem(ptr)
 * 
 *     def setContextFile(self, char *filename):             # <<<<<<<<<<<<<<
 *         """Set the context item from file."""
 *         self.thisptr.setContextFile(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_19setContextFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_18setContextFile[] = "Set the context item from file.";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_19setContextFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setContextFile (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyObject_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) __PYX_ERR(0, 305, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setContextFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_18setContextFile(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_18setContextFile(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setContextFile", 0);

  /* "pysaxon/sxn.pyx":307
 *     def setContextFile(self, char *filename):
 *         """Set the context item from file."""
 *         self.thisptr.setContextFile(filename)             # <<<<<<<<<<<<<<
 * 
 *     def setParameter(self, char *name, Value val):
 */
  try {
    __pyx_v_self->thisptr->setContextFile(__pyx_v_filename);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 307, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":305
 *         self.thisptr.setContextItem(ptr)
 * 
 *     def setContextFile(self, char *filename):             # <<<<<<<<<<<<<<
 *         """Set the context item from file."""
 *         self.thisptr.setContextFile(filename)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setContextFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":309
 *         self.thisptr.setContextFile(filename)
 * 
 *     def setParameter(self, char *name, Value val):             # <<<<<<<<<<<<<<
 *         """Set a parameter value used in the query."""
 *         self.thisptr.setParameter(name, <cpp.XdmValue*>val.thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_21setParameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_20setParameter[] = "Set a parameter value used in the query.";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_21setParameter(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_val = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParameter (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_val,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setParameter", 1, 2, 2, 1); __PYX_ERR(0, 309, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setParameter") < 0)) __PYX_ERR(0, 309, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 309, __pyx_L3_error)
    __pyx_v_val = ((struct __pyx_obj_7pysaxon_3xdm_Value *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setParameter", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 309, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val), __pyx_ptype_7pysaxon_3xdm_Value, 1, "val", 0))) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_20setParameter(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_val);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_20setParameter(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_name, struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setParameter", 0);

  /* "pysaxon/sxn.pyx":311
 *     def setParameter(self, char *name, Value val):
 *         """Set a parameter value used in the query."""
 *         self.thisptr.setParameter(name, <cpp.XdmValue*>val.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def removeParameter(self, char *name):
 */
  try {
    __pyx_v_self->thisptr->setParameter(__pyx_v_name, ((XdmValue *)__pyx_v_val->thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 311, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":309
 *         self.thisptr.setContextFile(filename)
 * 
 *     def setParameter(self, char *name, Value val):             # <<<<<<<<<<<<<<
 *         """Set a parameter value used in the query."""
 *         self.thisptr.setParameter(name, <cpp.XdmValue*>val.thisptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":313
 *         self.thisptr.setParameter(name, <cpp.XdmValue*>val.thisptr)
 * 
 *     def removeParameter(self, char *name):             # <<<<<<<<<<<<<<
 *         """Remove a parameter named ``name``."""
 *         return <bint>self.thisptr.removeParameter(name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_23removeParameter(PyObject *__pyx_v_self, PyObject *__pyx_arg_name); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_22removeParameter[] = "Remove a parameter named ``name``.";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_23removeParameter(PyObject *__pyx_v_self, PyObject *__pyx_arg_name) {
  char *__pyx_v_name;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("removeParameter (wrapper)", 0);
  assert(__pyx_arg_name); {
    __pyx_v_name = __Pyx_PyObject_AsString(__pyx_arg_name); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.removeParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_22removeParameter(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), ((char *)__pyx_v_name));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_22removeParameter(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("removeParameter", 0);

  /* "pysaxon/sxn.pyx":315
 *     def removeParameter(self, char *name):
 *         """Remove a parameter named ``name``."""
 *         return <bint>self.thisptr.removeParameter(name)             # <<<<<<<<<<<<<<
 * 
 *     property parameters:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->removeParameter(__pyx_v_name);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 315, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":313
 *         self.thisptr.setParameter(name, <cpp.XdmValue*>val.thisptr)
 * 
 *     def removeParameter(self, char *name):             # <<<<<<<<<<<<<<
 *         """Remove a parameter named ``name``."""
 *         return <bint>self.thisptr.removeParameter(name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.removeParameter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":318
 * 
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all parameters as a dictionary of names (string) and
 *             xdm.Value objects.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_10parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_10parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10parameters___get__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10parameters___get__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  PyObject *__pyx_v_params = 0;
  std::map<std::string,XdmValue *>  __pyx_v_m;
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_v = 0;
  std::pair<std::string,XdmValue *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_FakeReference<std::map<std::string,XdmValue *> > __pyx_t_2;
  std::map<std::string,XdmValue *> ::iterator __pyx_t_3;
  std::pair<std::string,XdmValue *>  __pyx_t_4;
  XdmValue *__pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":322
 *             xdm.Value objects.
 *             """
 *             cdef params = {}             # <<<<<<<<<<<<<<
 *             cdef map[string, cpp.XdmValue*] m
 *             cdef Value v
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_params = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":325
 *             cdef map[string, cpp.XdmValue*] m
 *             cdef Value v
 *             m = self.thisptr.getParameters()             # <<<<<<<<<<<<<<
 *             for it in m:
 *                 v = Value()
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getParameters();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 325, __pyx_L1_error)
  }
  __pyx_v_m = __pyx_t_2;

  /* "pysaxon/sxn.pyx":326
 *             cdef Value v
 *             m = self.thisptr.getParameters()
 *             for it in m:             # <<<<<<<<<<<<<<
 *                 v = Value()
 *                 v.thisptr = it.second
 */
  __pyx_t_3 = __pyx_v_m.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_m.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_it = __pyx_t_4;

    /* "pysaxon/sxn.pyx":327
 *             m = self.thisptr.getParameters()
 *             for it in m:
 *                 v = Value()             # <<<<<<<<<<<<<<
 *                 v.thisptr = it.second
 *                 params[it.first] = v
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, ((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pysaxon/sxn.pyx":328
 *             for it in m:
 *                 v = Value()
 *                 v.thisptr = it.second             # <<<<<<<<<<<<<<
 *                 params[it.first] = v
 *             return params
 */
    __pyx_t_5 = __pyx_v_it.second;
    __pyx_v_v->thisptr = __pyx_t_5;

    /* "pysaxon/sxn.pyx":329
 *                 v = Value()
 *                 v.thisptr = it.second
 *                 params[it.first] = v             # <<<<<<<<<<<<<<
 *             return params
 * 
 */
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_it.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_v_params, __pyx_t_1, ((PyObject *)__pyx_v_v)) < 0)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pysaxon/sxn.pyx":326
 *             cdef Value v
 *             m = self.thisptr.getParameters()
 *             for it in m:             # <<<<<<<<<<<<<<
 *                 v = Value()
 *                 v.thisptr = it.second
 */
  }

  /* "pysaxon/sxn.pyx":330
 *                 v.thisptr = it.second
 *                 params[it.first] = v
 *             return params             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_params);
  __pyx_r = __pyx_v_params;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":318
 * 
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all parameters as a dictionary of names (string) and
 *             xdm.Value objects.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_params);
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":332
 *             return params
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear parameter values set."""
 *             self.thisptr.clearParameters(<bint>1)
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10parameters_3__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10parameters_3__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10parameters_2__del__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10parameters_2__del__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pysaxon/sxn.pyx":334
 *         def __del__(self):
 *             """Clear parameter values set."""
 *             self.thisptr.clearParameters(<bint>1)             # <<<<<<<<<<<<<<
 * 
 *     def setProperty(self, char *name, char *value):
 */
  try {
    __pyx_v_self->thisptr->clearParameters(1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 334, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":332
 *             return params
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear parameter values set."""
 *             self.thisptr.clearParameters(<bint>1)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.parameters.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":336
 *             self.thisptr.clearParameters(<bint>1)
 * 
 *     def setProperty(self, char *name, char *value):             # <<<<<<<<<<<<<<
 *         """Set a property specific to the processor in use.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_25setProperty(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_24setProperty[] = "Set a property specific to the processor in use.\n\n        :arg char* name: Property's name.\n        :arg char* value: Property's value.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_25setProperty(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_name;
  char *__pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setProperty (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setProperty", 1, 2, 2, 1); __PYX_ERR(0, 336, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setProperty") < 0)) __PYX_ERR(0, 336, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_name = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_name) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
    __pyx_v_value = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setProperty", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 336, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setProperty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_24setProperty(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self), __pyx_v_name, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_24setProperty(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self, char *__pyx_v_name, char *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setProperty", 0);

  /* "pysaxon/sxn.pyx":342
 *         :arg char* value: Property's value.
 *         """
 *         self.thisptr.setProperty(name, value)             # <<<<<<<<<<<<<<
 * 
 *     property properties:
 */
  try {
    __pyx_v_self->thisptr->setProperty(__pyx_v_name, __pyx_v_value);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 342, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":336
 *             self.thisptr.clearParameters(<bint>1)
 * 
 *     def setProperty(self, char *name, char *value):             # <<<<<<<<<<<<<<
 *         """Set a property specific to the processor in use.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.setProperty", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":345
 * 
 *     property properties:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all properties as a dictionary."""
 *             return self.thisptr.getProperties()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_10properties_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_10properties_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10properties___get__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10properties___get__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::map<std::string,std::string> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":347
 *         def __get__(self):
 *             """Get all properties as a dictionary."""
 *             return self.thisptr.getProperties()             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getProperties();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 347, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":345
 * 
 *     property properties:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all properties as a dictionary."""
 *             return self.thisptr.getProperties()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.properties.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":349
 *             return self.thisptr.getProperties()
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear property values set."""
 *             self.thisptr.clearProperties()
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10properties_3__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10properties_3__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10properties_2__del__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10properties_2__del__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pysaxon/sxn.pyx":351
 *         def __del__(self):
 *             """Clear property values set."""
 *             self.thisptr.clearProperties()             # <<<<<<<<<<<<<<
 * 
 *     def exceptionOccurred(self):
 */
  try {
    __pyx_v_self->thisptr->clearProperties();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 351, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":349
 *             return self.thisptr.getProperties()
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear property values set."""
 *             self.thisptr.clearProperties()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.properties.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":353
 *             self.thisptr.clearProperties()
 * 
 *     def exceptionOccurred(self):             # <<<<<<<<<<<<<<
 *         """Check for pending exceptions without creating a local reference to
 *         the exception object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_27exceptionOccurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_14XPathProcessor_26exceptionOccurred[] = "Check for pending exceptions without creating a local reference to\n        the exception object.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_27exceptionOccurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exceptionOccurred (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_26exceptionOccurred(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_26exceptionOccurred(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("exceptionOccurred", 0);

  /* "pysaxon/sxn.pyx":357
 *         the exception object.
 *         """
 *         return <bint>self.thisptr.exceptionOccurred()             # <<<<<<<<<<<<<<
 * 
 *     property exceptions:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->exceptionOccurred();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 357, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong((__pyx_t_1 != 0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":353
 *             self.thisptr.clearProperties()
 * 
 *     def exceptionOccurred(self):             # <<<<<<<<<<<<<<
 *         """Check for pending exceptions without creating a local reference to
 *         the exception object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.exceptionOccurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":360
 * 
 *     property exceptions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get exception error messages and their codes as a list of
 *             MyException objects or None.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_10exceptions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_14XPathProcessor_10exceptions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10exceptions___get__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_14XPathProcessor_10exceptions___get__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_mye = 0;
  PyObject *__pyx_v_errors = 0;
  int __pyx_v_count;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  const char *__pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":365
 *             """
 *             cdef MyException mye
 *             cdef list errors = []             # <<<<<<<<<<<<<<
 *             cdef int count, i
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_errors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":368
 *             cdef int count, i
 * 
 *             if not self.thisptr.exceptionOccurred():             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->exceptionOccurred();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 368, __pyx_L1_error)
  }
  __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":369
 * 
 *             if not self.thisptr.exceptionOccurred():
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             count = self.thisptr.exceptionCount()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/sxn.pyx":368
 *             cdef int count, i
 * 
 *             if not self.thisptr.exceptionOccurred():             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  }

  /* "pysaxon/sxn.pyx":371
 *                 return None
 * 
 *             count = self.thisptr.exceptionCount()             # <<<<<<<<<<<<<<
 *             if count == 0:
 *                 return None
 */
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->exceptionCount();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 371, __pyx_L1_error)
  }
  __pyx_v_count = __pyx_t_4;

  /* "pysaxon/sxn.pyx":372
 * 
 *             count = self.thisptr.exceptionCount()
 *             if count == 0:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  __pyx_t_3 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":373
 *             count = self.thisptr.exceptionCount()
 *             if count == 0:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             for i in range(count):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/sxn.pyx":372
 * 
 *             count = self.thisptr.exceptionCount()
 *             if count == 0:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  }

  /* "pysaxon/sxn.pyx":375
 *                 return None
 * 
 *             for i in range(count):             # <<<<<<<<<<<<<<
 *                 mye = MyException()
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 */
  __pyx_t_4 = __pyx_v_count;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "pysaxon/sxn.pyx":376
 * 
 *             for i in range(count):
 *                 mye = MyException()             # <<<<<<<<<<<<<<
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_MyException), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 376, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_mye, ((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pysaxon/sxn.pyx":377
 *             for i in range(count):
 *                 mye = MyException()
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))             # <<<<<<<<<<<<<<
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 *                 mye.e.linenumber = -1
 */
    try {
      __pyx_t_6 = __pyx_v_self->thisptr->getErrorCode(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 377, __pyx_L1_error)
    }
    __pyx_v_mye->e.errorCode.assign(__pyx_t_6);

    /* "pysaxon/sxn.pyx":378
 *                 mye = MyException()
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))             # <<<<<<<<<<<<<<
 *                 mye.e.linenumber = -1
 *                 mye.e.isType = 1
 */
    try {
      __pyx_t_6 = __pyx_v_self->thisptr->getErrorMessage(__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 378, __pyx_L1_error)
    }
    __pyx_v_mye->e.errorMessage.assign(__pyx_t_6);

    /* "pysaxon/sxn.pyx":379
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 *                 mye.e.linenumber = -1             # <<<<<<<<<<<<<<
 *                 mye.e.isType = 1
 *                 mye.e.isGlobal = 1
 */
    __pyx_v_mye->e.linenumber = -1;

    /* "pysaxon/sxn.pyx":380
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 *                 mye.e.linenumber = -1
 *                 mye.e.isType = 1             # <<<<<<<<<<<<<<
 *                 mye.e.isGlobal = 1
 *                 mye.e.isStatic = 1
 */
    __pyx_v_mye->e.isType = 1;

    /* "pysaxon/sxn.pyx":381
 *                 mye.e.linenumber = -1
 *                 mye.e.isType = 1
 *                 mye.e.isGlobal = 1             # <<<<<<<<<<<<<<
 *                 mye.e.isStatic = 1
 *                 errors.append(mye)
 */
    __pyx_v_mye->e.isGlobal = 1;

    /* "pysaxon/sxn.pyx":382
 *                 mye.e.isType = 1
 *                 mye.e.isGlobal = 1
 *                 mye.e.isStatic = 1             # <<<<<<<<<<<<<<
 *                 errors.append(mye)
 * 
 */
    __pyx_v_mye->e.isStatic = 1;

    /* "pysaxon/sxn.pyx":383
 *                 mye.e.isGlobal = 1
 *                 mye.e.isStatic = 1
 *                 errors.append(mye)             # <<<<<<<<<<<<<<
 * 
 *             return errors
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_errors, ((PyObject *)__pyx_v_mye)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 383, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":385
 *                 errors.append(mye)
 * 
 *             return errors             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_errors);
  __pyx_r = __pyx_v_errors;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":360
 * 
 *     property exceptions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get exception error messages and their codes as a list of
 *             MyException objects or None.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.exceptions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mye);
  __Pyx_XDECREF(__pyx_v_errors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":387
 *             return errors
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear any exception thrown."""
 *             self.thisptr.exceptionClear()
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10exceptions_3__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10exceptions_3__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10exceptions_2__del__(((struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_14XPathProcessor_10exceptions_2__del__(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pysaxon/sxn.pyx":389
 *         def __del__(self):
 *             """Clear any exception thrown."""
 *             self.thisptr.exceptionClear()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_v_self->thisptr->exceptionClear();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 389, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":387
 *             return errors
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear any exception thrown."""
 *             self.thisptr.exceptionClear()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XPathProcessor.exceptions.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":395
 *     """XsltProcessor extension type."""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor___cinit__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor___cinit__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pysaxon/sxn.pyx":396
 * 
 *     def __cinit__(self):
 *         self.thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = NULL;

  /* "pysaxon/sxn.pyx":395
 *     """XsltProcessor extension type."""
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":398
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.releaseStylesheet()
 */

/* Python wrapper */
static void __pyx_pw_7pysaxon_3sxn_13XsltProcessor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7pysaxon_3sxn_13XsltProcessor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7pysaxon_3sxn_13XsltProcessor_2__dealloc__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7pysaxon_3sxn_13XsltProcessor_2__dealloc__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pysaxon/sxn.pyx":399
 * 
 *     def __dealloc__(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.releaseStylesheet()
 *             del self.thisptr
 */
  __pyx_t_1 = (__pyx_v_self->thisptr != 0);
  if (__pyx_t_1) {

    /* "pysaxon/sxn.pyx":400
 *     def __dealloc__(self):
 *         if self.thisptr:
 *             self.thisptr.releaseStylesheet()             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
    __pyx_v_self->thisptr->releaseStylesheet();

    /* "pysaxon/sxn.pyx":401
 *         if self.thisptr:
 *             self.thisptr.releaseStylesheet()
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def setcwd(self, char *cwd):
 */
    delete __pyx_v_self->thisptr;

    /* "pysaxon/sxn.pyx":399
 * 
 *     def __dealloc__(self):
 *         if self.thisptr:             # <<<<<<<<<<<<<<
 *             self.thisptr.releaseStylesheet()
 *             del self.thisptr
 */
  }

  /* "pysaxon/sxn.pyx":398
 *         self.thisptr = NULL
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.thisptr:
 *             self.thisptr.releaseStylesheet()
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pysaxon/sxn.pyx":403
 *             del self.thisptr
 * 
 *     def setcwd(self, char *cwd):             # <<<<<<<<<<<<<<
 *         """Set the current working directory to ``cwd``."""
 *         self.thisptr.setcwd(cwd)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_5setcwd(PyObject *__pyx_v_self, PyObject *__pyx_arg_cwd); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_4setcwd[] = "Set the current working directory to ``cwd``.";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_5setcwd(PyObject *__pyx_v_self, PyObject *__pyx_arg_cwd) {
  char *__pyx_v_cwd;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setcwd (wrapper)", 0);
  assert(__pyx_arg_cwd); {
    __pyx_v_cwd = __Pyx_PyObject_AsString(__pyx_arg_cwd); if (unlikely((!__pyx_v_cwd) && PyErr_Occurred())) __PYX_ERR(0, 403, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setcwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_4setcwd(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((char *)__pyx_v_cwd));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_4setcwd(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_cwd) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setcwd", 0);

  /* "pysaxon/sxn.pyx":405
 *     def setcwd(self, char *cwd):
 *         """Set the current working directory to ``cwd``."""
 *         self.thisptr.setcwd(cwd)             # <<<<<<<<<<<<<<
 * 
 *     property parameters:
 */
  try {
    __pyx_v_self->thisptr->setcwd(__pyx_v_cwd);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 405, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":403
 *             del self.thisptr
 * 
 *     def setcwd(self, char *cwd):             # <<<<<<<<<<<<<<
 *         """Set the current working directory to ``cwd``."""
 *         self.thisptr.setcwd(cwd)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setcwd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":408
 * 
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all parameters as a dictionary of names (string) and
 *             xdm.Value objects.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_10parameters_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_10parameters_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10parameters___get__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10parameters___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  PyObject *__pyx_v_params = 0;
  std::map<std::string,XdmValue *>  __pyx_v_m;
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_v = 0;
  std::pair<std::string,XdmValue *>  __pyx_v_it;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_FakeReference<std::map<std::string,XdmValue *> > __pyx_t_2;
  std::map<std::string,XdmValue *> ::iterator __pyx_t_3;
  std::pair<std::string,XdmValue *>  __pyx_t_4;
  XdmValue *__pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":412
 *             xdm.Value objects.
 *             """
 *             cdef params = {}             # <<<<<<<<<<<<<<
 *             cdef map[string, cpp.XdmValue*] m
 *             cdef Value v
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_params = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":415
 *             cdef map[string, cpp.XdmValue*] m
 *             cdef Value v
 *             m = self.thisptr.getParameters()             # <<<<<<<<<<<<<<
 *             for it in m:
 *                 v = Value()
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getParameters();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 415, __pyx_L1_error)
  }
  __pyx_v_m = __pyx_t_2;

  /* "pysaxon/sxn.pyx":416
 *             cdef Value v
 *             m = self.thisptr.getParameters()
 *             for it in m:             # <<<<<<<<<<<<<<
 *                 v = Value()
 *                 v.thisptr = it.second
 */
  __pyx_t_3 = __pyx_v_m.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_m.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_it = __pyx_t_4;

    /* "pysaxon/sxn.pyx":417
 *             m = self.thisptr.getParameters()
 *             for it in m:
 *                 v = Value()             # <<<<<<<<<<<<<<
 *                 v.thisptr = it.second
 *                 params[it.first] = v
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_v, ((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pysaxon/sxn.pyx":418
 *             for it in m:
 *                 v = Value()
 *                 v.thisptr = it.second             # <<<<<<<<<<<<<<
 *                 params[it.first] = v
 *             return params
 */
    __pyx_t_5 = __pyx_v_it.second;
    __pyx_v_v->thisptr = __pyx_t_5;

    /* "pysaxon/sxn.pyx":419
 *                 v = Value()
 *                 v.thisptr = it.second
 *                 params[it.first] = v             # <<<<<<<<<<<<<<
 *             return params
 * 
 */
    __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_it.first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(PyObject_SetItem(__pyx_v_params, __pyx_t_1, ((PyObject *)__pyx_v_v)) < 0)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "pysaxon/sxn.pyx":416
 *             cdef Value v
 *             m = self.thisptr.getParameters()
 *             for it in m:             # <<<<<<<<<<<<<<
 *                 v = Value()
 *                 v.thisptr = it.second
 */
  }

  /* "pysaxon/sxn.pyx":420
 *                 v.thisptr = it.second
 *                 params[it.first] = v
 *             return params             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_params);
  __pyx_r = __pyx_v_params;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":408
 * 
 *     property parameters:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all parameters as a dictionary of names (string) and
 *             xdm.Value objects.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.parameters.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_params);
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":422
 *             return params
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear parameter values set."""
 *             self.thisptr.clearParameters(<bint>1)
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10parameters_3__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10parameters_3__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10parameters_2__del__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10parameters_2__del__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pysaxon/sxn.pyx":424
 *         def __del__(self):
 *             """Clear parameter values set."""
 *             self.thisptr.clearParameters(<bint>1)             # <<<<<<<<<<<<<<
 * 
 *     property properties:
 */
  try {
    __pyx_v_self->thisptr->clearParameters(1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 424, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":422
 *             return params
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear parameter values set."""
 *             self.thisptr.clearParameters(<bint>1)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.parameters.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":427
 * 
 *     property properties:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all properties as a dictionary."""
 *             return self.thisptr.getProperties()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_10properties_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_10properties_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10properties___get__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10properties___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_FakeReference<std::map<std::string,std::string> > __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":429
 *         def __get__(self):
 *             """Get all properties as a dictionary."""
 *             return self.thisptr.getProperties()             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->getProperties();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 429, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":427
 * 
 *     property properties:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get all properties as a dictionary."""
 *             return self.thisptr.getProperties()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.properties.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":431
 *             return self.thisptr.getProperties()
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear property values set."""
 *             self.thisptr.clearProperties()
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10properties_3__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10properties_3__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10properties_2__del__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10properties_2__del__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pysaxon/sxn.pyx":433
 *         def __del__(self):
 *             """Clear property values set."""
 *             self.thisptr.clearProperties()             # <<<<<<<<<<<<<<
 * 
 *     def setSourceFromXdmValue(self, Item val):
 */
  try {
    __pyx_v_self->thisptr->clearProperties();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 433, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":431
 *             return self.thisptr.getProperties()
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear property values set."""
 *             self.thisptr.clearProperties()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.properties.__del__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":435
 *             self.thisptr.clearProperties()
 * 
 *     def setSourceFromXdmValue(self, Item val):             # <<<<<<<<<<<<<<
 *         """Set the source document from a xdm.Item object for the
 *         transformation."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_7setSourceFromXdmValue(PyObject *__pyx_v_self, PyObject *__pyx_v_val); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_6setSourceFromXdmValue[] = "Set the source document from a xdm.Item object for the\n        transformation.";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_7setSourceFromXdmValue(PyObject *__pyx_v_self, PyObject *__pyx_v_val) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSourceFromXdmValue (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_val), __pyx_ptype_7pysaxon_3xdm_Item, 1, "val", 0))) __PYX_ERR(0, 435, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_6setSourceFromXdmValue(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((struct __pyx_obj_7pysaxon_3xdm_Item *)__pyx_v_val));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_6setSourceFromXdmValue(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Item *__pyx_v_val) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSourceFromXdmValue", 0);

  /* "pysaxon/sxn.pyx":438
 *         """Set the source document from a xdm.Item object for the
 *         transformation."""
 *         self.thisptr.setSourceFromXdmValue(<cpp.XdmItem*>val.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def setSourceFromFile(self, char *filename):
 */
  try {
    __pyx_v_self->thisptr->setSourceFromXdmValue(((XdmItem *)__pyx_v_val->__pyx_base.thisptr));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 438, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":435
 *             self.thisptr.clearProperties()
 * 
 *     def setSourceFromXdmValue(self, Item val):             # <<<<<<<<<<<<<<
 *         """Set the source document from a xdm.Item object for the
 *         transformation."""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setSourceFromXdmValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":440
 *         self.thisptr.setSourceFromXdmValue(<cpp.XdmItem*>val.thisptr)
 * 
 *     def setSourceFromFile(self, char *filename):             # <<<<<<<<<<<<<<
 *         """Set the source from file for the transformation."""
 *         self.thisptr.setSourceFromFile(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_9setSourceFromFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_8setSourceFromFile[] = "Set the source from file for the transformation.";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_9setSourceFromFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSourceFromFile (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyObject_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) __PYX_ERR(0, 440, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setSourceFromFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_8setSourceFromFile(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((char *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_8setSourceFromFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setSourceFromFile", 0);

  /* "pysaxon/sxn.pyx":442
 *     def setSourceFromFile(self, char *filename):
 *         """Set the source from file for the transformation."""
 *         self.thisptr.setSourceFromFile(filename)             # <<<<<<<<<<<<<<
 * 
 *     def setOutputFile(self, char *filename):
 */
  try {
    __pyx_v_self->thisptr->setSourceFromFile(__pyx_v_filename);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 442, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":440
 *         self.thisptr.setSourceFromXdmValue(<cpp.XdmItem*>val.thisptr)
 * 
 *     def setSourceFromFile(self, char *filename):             # <<<<<<<<<<<<<<
 *         """Set the source from file for the transformation."""
 *         self.thisptr.setSourceFromFile(filename)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setSourceFromFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":444
 *         self.thisptr.setSourceFromFile(filename)
 * 
 *     def setOutputFile(self, char *filename):             # <<<<<<<<<<<<<<
 *         """Set the output file of where the transformation result is sent."""
 *         self.thisptr.setOutputFile(filename)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_11setOutputFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_10setOutputFile[] = "Set the output file of where the transformation result is sent.";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_11setOutputFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOutputFile (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyObject_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setOutputFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10setOutputFile(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((char *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10setOutputFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setOutputFile", 0);

  /* "pysaxon/sxn.pyx":446
 *     def setOutputFile(self, char *filename):
 *         """Set the output file of where the transformation result is sent."""
 *         self.thisptr.setOutputFile(filename)             # <<<<<<<<<<<<<<
 * 
 *     property xslMessages:
 */
  try {
    __pyx_v_self->thisptr->setOutputFile(__pyx_v_filename);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 446, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":444
 *         self.thisptr.setSourceFromFile(filename)
 * 
 *     def setOutputFile(self, char *filename):             # <<<<<<<<<<<<<<
 *         """Set the output file of where the transformation result is sent."""
 *         self.thisptr.setOutputFile(filename)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.setOutputFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":449
 * 
 *     property xslMessages:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get the messages written using the ``xsl:message`` instruction
 *             as an xdm.Value object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_11xslMessages_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_11xslMessages_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_11xslMessages___get__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_11xslMessages___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_v = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  XdmValue *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":453
 *             as an xdm.Value object.
 *             """
 *             cdef Value v = Value()             # <<<<<<<<<<<<<<
 *             v.thisptr = self.thisptr.getXslMessages()
 *             return v
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":454
 *             """
 *             cdef Value v = Value()
 *             v.thisptr = self.thisptr.getXslMessages()             # <<<<<<<<<<<<<<
 *             return v
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->thisptr->getXslMessages();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 454, __pyx_L1_error)
  }
  __pyx_v_v->thisptr = __pyx_t_2;

  /* "pysaxon/sxn.pyx":455
 *             cdef Value v = Value()
 *             v.thisptr = self.thisptr.getXslMessages()
 *             return v             # <<<<<<<<<<<<<<
 * 
 *     def transformFileToFile(self, char* source, char *out, xslt=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = ((PyObject *)__pyx_v_v);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":449
 * 
 *     property xslMessages:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get the messages written using the ``xsl:message`` instruction
 *             as an xdm.Value object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.xslMessages.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":457
 *             return v
 * 
 *     def transformFileToFile(self, char* source, char *out, xslt=None):             # <<<<<<<<<<<<<<
 *         """Perform a one shot transformation from a file to a file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_13transformFileToFile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_12transformFileToFile[] = "Perform a one shot transformation from a file to a file.\n\n        :arg bytes source: Source document file name.\n        :arg bytes out: File name where to store the transformation's result.\n        :arg bytes xslt: XSLT file name. If None, the most recently compiled\n            stylesheet is used.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_13transformFileToFile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_source;
  char *__pyx_v_out;
  PyObject *__pyx_v_xslt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformFileToFile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_out,&__pyx_n_s_xslt,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_out)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transformFileToFile", 0, 2, 3, 1); __PYX_ERR(0, 457, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xslt);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transformFileToFile") < 0)) __PYX_ERR(0, 457, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_source) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L3_error)
    __pyx_v_out = __Pyx_PyObject_AsString(values[1]); if (unlikely((!__pyx_v_out) && PyErr_Occurred())) __PYX_ERR(0, 457, __pyx_L3_error)
    __pyx_v_xslt = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transformFileToFile", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 457, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformFileToFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_12transformFileToFile(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), __pyx_v_source, __pyx_v_out, __pyx_v_xslt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_12transformFileToFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_source, char *__pyx_v_out, PyObject *__pyx_v_xslt) {
  char *__pyx_v_xslt_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  char *__pyx_t_3;
  __Pyx_RefNannySetupContext("transformFileToFile", 0);

  /* "pysaxon/sxn.pyx":465
 *             stylesheet is used.
 *         """
 *         cdef char *xslt_c = NULL             # <<<<<<<<<<<<<<
 *         if xslt is not None:
 *             xslt_c = xslt
 */
  __pyx_v_xslt_c = NULL;

  /* "pysaxon/sxn.pyx":466
 *         """
 *         cdef char *xslt_c = NULL
 *         if xslt is not None:             # <<<<<<<<<<<<<<
 *             xslt_c = xslt
 *         self.thisptr.transformFileToFile(source, xslt_c, out)
 */
  __pyx_t_1 = (__pyx_v_xslt != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":467
 *         cdef char *xslt_c = NULL
 *         if xslt is not None:
 *             xslt_c = xslt             # <<<<<<<<<<<<<<
 *         self.thisptr.transformFileToFile(source, xslt_c, out)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_xslt); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
    __pyx_v_xslt_c = __pyx_t_3;

    /* "pysaxon/sxn.pyx":466
 *         """
 *         cdef char *xslt_c = NULL
 *         if xslt is not None:             # <<<<<<<<<<<<<<
 *             xslt_c = xslt
 *         self.thisptr.transformFileToFile(source, xslt_c, out)
 */
  }

  /* "pysaxon/sxn.pyx":468
 *         if xslt is not None:
 *             xslt_c = xslt
 *         self.thisptr.transformFileToFile(source, xslt_c, out)             # <<<<<<<<<<<<<<
 * 
 *     def transformFileToString(self, char *source, xslt=None):
 */
  try {
    __pyx_v_self->thisptr->transformFileToFile(__pyx_v_source, __pyx_v_xslt_c, __pyx_v_out);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 468, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":457
 *             return v
 * 
 *     def transformFileToFile(self, char* source, char *out, xslt=None):             # <<<<<<<<<<<<<<
 *         """Perform a one shot transformation from a file to a file.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformFileToFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":470
 *         self.thisptr.transformFileToFile(source, xslt_c, out)
 * 
 *     def transformFileToString(self, char *source, xslt=None):             # <<<<<<<<<<<<<<
 *         """Perform a one shot transformation from a file to a string.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_15transformFileToString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_14transformFileToString[] = "Perform a one shot transformation from a file to a string.\n\n        :arg bytes source: Source document file name.\n        :arg bytes xslt: XSLT file name. If None, the most recently compiled\n            stylesheet is used.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_15transformFileToString(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_source;
  PyObject *__pyx_v_xslt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformFileToString (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_xslt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xslt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transformFileToString") < 0)) __PYX_ERR(0, 470, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_source) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L3_error)
    __pyx_v_xslt = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transformFileToString", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 470, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformFileToString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_14transformFileToString(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), __pyx_v_source, __pyx_v_xslt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_14transformFileToString(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_source, PyObject *__pyx_v_xslt) {
  char *__pyx_v_xslt_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  char *__pyx_t_3;
  const char *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("transformFileToString", 0);

  /* "pysaxon/sxn.pyx":477
 *             stylesheet is used.
 *         """
 *         cdef char *xslt_c = NULL             # <<<<<<<<<<<<<<
 *         if xslt is not None:
 *             xslt_c = xslt
 */
  __pyx_v_xslt_c = NULL;

  /* "pysaxon/sxn.pyx":478
 *         """
 *         cdef char *xslt_c = NULL
 *         if xslt is not None:             # <<<<<<<<<<<<<<
 *             xslt_c = xslt
 *         return self.thisptr.transformFileToString(source, xslt_c)
 */
  __pyx_t_1 = (__pyx_v_xslt != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":479
 *         cdef char *xslt_c = NULL
 *         if xslt is not None:
 *             xslt_c = xslt             # <<<<<<<<<<<<<<
 *         return self.thisptr.transformFileToString(source, xslt_c)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_AsString(__pyx_v_xslt); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L1_error)
    __pyx_v_xslt_c = __pyx_t_3;

    /* "pysaxon/sxn.pyx":478
 *         """
 *         cdef char *xslt_c = NULL
 *         if xslt is not None:             # <<<<<<<<<<<<<<
 *             xslt_c = xslt
 *         return self.thisptr.transformFileToString(source, xslt_c)
 */
  }

  /* "pysaxon/sxn.pyx":480
 *         if xslt is not None:
 *             xslt_c = xslt
 *         return self.thisptr.transformFileToString(source, xslt_c)             # <<<<<<<<<<<<<<
 * 
 *     def transformFileToValue(self, char *source, xslt=None):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_4 = __pyx_v_self->thisptr->transformFileToString(__pyx_v_source, __pyx_v_xslt_c);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 480, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":470
 *         self.thisptr.transformFileToFile(source, xslt_c, out)
 * 
 *     def transformFileToString(self, char *source, xslt=None):             # <<<<<<<<<<<<<<
 *         """Perform a one shot transformation from a file to a string.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformFileToString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":482
 *         return self.thisptr.transformFileToString(source, xslt_c)
 * 
 *     def transformFileToValue(self, char *source, xslt=None):             # <<<<<<<<<<<<<<
 *         """Perform a one shot transformation from a file to an xdm.Value.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_17transformFileToValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_16transformFileToValue[] = "Perform a one shot transformation from a file to an xdm.Value.\n\n        :arg bytes source: Source document file name.\n        :arg bytes xslt: XSLT file name. If None, the most recently compiled\n            stylesheet is used.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_17transformFileToValue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char *__pyx_v_source;
  PyObject *__pyx_v_xslt = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformFileToValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_source,&__pyx_n_s_xslt,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_source)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_xslt);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transformFileToValue") < 0)) __PYX_ERR(0, 482, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_source = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_source) && PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
    __pyx_v_xslt = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transformFileToValue", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 482, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformFileToValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_16transformFileToValue(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), __pyx_v_source, __pyx_v_xslt);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_16transformFileToValue(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_source, PyObject *__pyx_v_xslt) {
  char *__pyx_v_xslt_c;
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_v = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("transformFileToValue", 0);

  /* "pysaxon/sxn.pyx":489
 *             stylesheet is used.
 *         """
 *         cdef char *xslt_c = NULL             # <<<<<<<<<<<<<<
 *         cdef Value v = Value()
 *         if xslt is not None:
 */
  __pyx_v_xslt_c = NULL;

  /* "pysaxon/sxn.pyx":490
 *         """
 *         cdef char *xslt_c = NULL
 *         cdef Value v = Value()             # <<<<<<<<<<<<<<
 *         if xslt is not None:
 *             xslt_c = xslt
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":491
 *         cdef char *xslt_c = NULL
 *         cdef Value v = Value()
 *         if xslt is not None:             # <<<<<<<<<<<<<<
 *             xslt_c = xslt
 *         v.thisptr = self.thisptr.transformFileToValue(source, xslt_c)
 */
  __pyx_t_2 = (__pyx_v_xslt != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "pysaxon/sxn.pyx":492
 *         cdef Value v = Value()
 *         if xslt is not None:
 *             xslt_c = xslt             # <<<<<<<<<<<<<<
 *         v.thisptr = self.thisptr.transformFileToValue(source, xslt_c)
 *         return v
 */
    __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_xslt); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L1_error)
    __pyx_v_xslt_c = __pyx_t_4;

    /* "pysaxon/sxn.pyx":491
 *         cdef char *xslt_c = NULL
 *         cdef Value v = Value()
 *         if xslt is not None:             # <<<<<<<<<<<<<<
 *             xslt_c = xslt
 *         v.thisptr = self.thisptr.transformFileToValue(source, xslt_c)
 */
  }

  /* "pysaxon/sxn.pyx":493
 *         if xslt is not None:
 *             xslt_c = xslt
 *         v.thisptr = self.thisptr.transformFileToValue(source, xslt_c)             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_v_v->thisptr = __pyx_v_self->thisptr->transformFileToValue(__pyx_v_source, __pyx_v_xslt_c);

  /* "pysaxon/sxn.pyx":494
 *             xslt_c = xslt
 *         v.thisptr = self.thisptr.transformFileToValue(source, xslt_c)
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     def compileFromFile(self, char *xslt):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = ((PyObject *)__pyx_v_v);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":482
 *         return self.thisptr.transformFileToString(source, xslt_c)
 * 
 *     def transformFileToValue(self, char *source, xslt=None):             # <<<<<<<<<<<<<<
 *         """Perform a one shot transformation from a file to an xdm.Value.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformFileToValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":496
 *         return v
 * 
 *     def compileFromFile(self, char *xslt):             # <<<<<<<<<<<<<<
 *         """Compile a stylesheet stored in a file.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_19compileFromFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_xslt); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_18compileFromFile[] = "Compile a stylesheet stored in a file.\n\n        :arg bytes xslt: XSLT file name.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_19compileFromFile(PyObject *__pyx_v_self, PyObject *__pyx_arg_xslt) {
  char *__pyx_v_xslt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compileFromFile (wrapper)", 0);
  assert(__pyx_arg_xslt); {
    __pyx_v_xslt = __Pyx_PyObject_AsString(__pyx_arg_xslt); if (unlikely((!__pyx_v_xslt) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.compileFromFile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_18compileFromFile(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((char *)__pyx_v_xslt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_18compileFromFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_xslt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compileFromFile", 0);

  /* "pysaxon/sxn.pyx":501
 *         :arg bytes xslt: XSLT file name.
 *         """
 *         self.thisptr.compileFromFile(xslt)             # <<<<<<<<<<<<<<
 * 
 *     def compileFromString(self, char *xslt):
 */
  __pyx_v_self->thisptr->compileFromFile(__pyx_v_xslt);

  /* "pysaxon/sxn.pyx":496
 *         return v
 * 
 *     def compileFromFile(self, char *xslt):             # <<<<<<<<<<<<<<
 *         """Compile a stylesheet stored in a file.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":503
 *         self.thisptr.compileFromFile(xslt)
 * 
 *     def compileFromString(self, char *xslt):             # <<<<<<<<<<<<<<
 *         """Compile a stylesheet stored in a string.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_21compileFromString(PyObject *__pyx_v_self, PyObject *__pyx_arg_xslt); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_20compileFromString[] = "Compile a stylesheet stored in a string.\n\n        :arg bytes xslt: XSLT content.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_21compileFromString(PyObject *__pyx_v_self, PyObject *__pyx_arg_xslt) {
  char *__pyx_v_xslt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compileFromString (wrapper)", 0);
  assert(__pyx_arg_xslt); {
    __pyx_v_xslt = __Pyx_PyObject_AsString(__pyx_arg_xslt); if (unlikely((!__pyx_v_xslt) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.compileFromString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_20compileFromString(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((char *)__pyx_v_xslt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_20compileFromString(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, char *__pyx_v_xslt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compileFromString", 0);

  /* "pysaxon/sxn.pyx":508
 *         :arg bytes xslt: XSLT content.
 *         """
 *         self.thisptr.compileFromString(xslt)             # <<<<<<<<<<<<<<
 * 
 *     def compileFromXdmNode(self, Node n not None):
 */
  __pyx_v_self->thisptr->compileFromString(__pyx_v_xslt);

  /* "pysaxon/sxn.pyx":503
 *         self.thisptr.compileFromFile(xslt)
 * 
 *     def compileFromString(self, char *xslt):             # <<<<<<<<<<<<<<
 *         """Compile a stylesheet stored in a string.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":510
 *         self.thisptr.compileFromString(xslt)
 * 
 *     def compileFromXdmNode(self, Node n not None):             # <<<<<<<<<<<<<<
 *         """Compile a stylesheet stored in an xdm.Node."""
 *         self.thisptr.compileFromXdmNode(<cpp.XdmNode*>n.thisptr)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_23compileFromXdmNode(PyObject *__pyx_v_self, PyObject *__pyx_v_n); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_22compileFromXdmNode[] = "Compile a stylesheet stored in an xdm.Node.";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_23compileFromXdmNode(PyObject *__pyx_v_self, PyObject *__pyx_v_n) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compileFromXdmNode (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_n), __pyx_ptype_7pysaxon_3xdm_Node, 0, "n", 0))) __PYX_ERR(0, 510, __pyx_L1_error)
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_22compileFromXdmNode(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self), ((struct __pyx_obj_7pysaxon_3xdm_Node *)__pyx_v_n));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_22compileFromXdmNode(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self, struct __pyx_obj_7pysaxon_3xdm_Node *__pyx_v_n) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compileFromXdmNode", 0);

  /* "pysaxon/sxn.pyx":512
 *     def compileFromXdmNode(self, Node n not None):
 *         """Compile a stylesheet stored in an xdm.Node."""
 *         self.thisptr.compileFromXdmNode(<cpp.XdmNode*>n.thisptr)             # <<<<<<<<<<<<<<
 * 
 *     def transformToString(self):
 */
  __pyx_v_self->thisptr->compileFromXdmNode(((XdmNode *)__pyx_v_n->__pyx_base.__pyx_base.thisptr));

  /* "pysaxon/sxn.pyx":510
 *         self.thisptr.compileFromString(xslt)
 * 
 *     def compileFromXdmNode(self, Node n not None):             # <<<<<<<<<<<<<<
 *         """Compile a stylesheet stored in an xdm.Node."""
 *         self.thisptr.compileFromXdmNode(<cpp.XdmNode*>n.thisptr)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":514
 *         self.thisptr.compileFromXdmNode(<cpp.XdmNode*>n.thisptr)
 * 
 *     def transformToString(self):             # <<<<<<<<<<<<<<
 *         """Perform the transformation based upon what has been cached and
 *         return the result as a bytes object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_25transformToString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_24transformToString[] = "Perform the transformation based upon what has been cached and\n        return the result as a bytes object.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_25transformToString(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformToString (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_24transformToString(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_24transformToString(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("transformToString", 0);

  /* "pysaxon/sxn.pyx":518
 *         return the result as a bytes object.
 *         """
 *         return self.thisptr.transformToString()             # <<<<<<<<<<<<<<
 * 
 *     def transformToValue(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->thisptr->transformToString()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":514
 *         self.thisptr.compileFromXdmNode(<cpp.XdmNode*>n.thisptr)
 * 
 *     def transformToString(self):             # <<<<<<<<<<<<<<
 *         """Perform the transformation based upon what has been cached and
 *         return the result as a bytes object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformToString", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":520
 *         return self.thisptr.transformToString()
 * 
 *     def transformToValue(self):             # <<<<<<<<<<<<<<
 *         """Perform the transformation based upon what has been cached and
 *         return the result as an xdm.Value object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_27transformToValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_26transformToValue[] = "Perform the transformation based upon what has been cached and\n        return the result as an xdm.Value object.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_27transformToValue(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformToValue (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_26transformToValue(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_26transformToValue(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3xdm_Value *__pyx_v_v = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("transformToValue", 0);

  /* "pysaxon/sxn.pyx":524
 *         return the result as an xdm.Value object.
 *         """
 *         cdef Value v = Value()             # <<<<<<<<<<<<<<
 *         v.thisptr = self.thisptr.transformToValue()
 *         return v
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3xdm_Value), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_7pysaxon_3xdm_Value *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":525
 *         """
 *         cdef Value v = Value()
 *         v.thisptr = self.thisptr.transformToValue()             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __pyx_v_v->thisptr = __pyx_v_self->thisptr->transformToValue();

  /* "pysaxon/sxn.pyx":526
 *         cdef Value v = Value()
 *         v.thisptr = self.thisptr.transformToValue()
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     def transformToFile(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = ((PyObject *)__pyx_v_v);
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":520
 *         return self.thisptr.transformToString()
 * 
 *     def transformToValue(self):             # <<<<<<<<<<<<<<
 *         """Perform the transformation based upon what has been cached and
 *         return the result as an xdm.Value object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.transformToValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":528
 *         return v
 * 
 *     def transformToFile(self):             # <<<<<<<<<<<<<<
 *         """Perform the transformation based upon what has been cached and
 *         return the result in a file.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_29transformToFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_28transformToFile[] = "Perform the transformation based upon what has been cached and\n        return the result in a file.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_29transformToFile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformToFile (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_28transformToFile(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_28transformToFile(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformToFile", 0);

  /* "pysaxon/sxn.pyx":532
 *         return the result in a file.
 *         """
 *         self.thisptr.transformToFile()             # <<<<<<<<<<<<<<
 * 
 *     def exceptionOccurred(self):
 */
  __pyx_v_self->thisptr->transformToFile();

  /* "pysaxon/sxn.pyx":528
 *         return v
 * 
 *     def transformToFile(self):             # <<<<<<<<<<<<<<
 *         """Perform the transformation based upon what has been cached and
 *         return the result in a file.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":534
 *         self.thisptr.transformToFile()
 * 
 *     def exceptionOccurred(self):             # <<<<<<<<<<<<<<
 *         """Check for pending exceptions without creating a local reference to
 *         the exception object.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_31exceptionOccurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7pysaxon_3sxn_13XsltProcessor_30exceptionOccurred[] = "Check for pending exceptions without creating a local reference to\n        the exception object.\n        ";
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_31exceptionOccurred(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exceptionOccurred (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_30exceptionOccurred(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_30exceptionOccurred(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("exceptionOccurred", 0);

  /* "pysaxon/sxn.pyx":538
 *         the exception object.
 *         """
 *         return <bint>self.thisptr.exceptionOccurred()             # <<<<<<<<<<<<<<
 * 
 *     property exceptions:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->thisptr->exceptionOccurred() != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":534
 *         self.thisptr.transformToFile()
 * 
 *     def exceptionOccurred(self):             # <<<<<<<<<<<<<<
 *         """Check for pending exceptions without creating a local reference to
 *         the exception object.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.exceptionOccurred", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":541
 * 
 *     property exceptions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get exception error messages and their codes as a list of
 *             MyException objects or None.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_10exceptions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7pysaxon_3sxn_13XsltProcessor_10exceptions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10exceptions___get__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7pysaxon_3sxn_13XsltProcessor_10exceptions___get__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  struct __pyx_obj_7pysaxon_3sxn_MyException *__pyx_v_mye = 0;
  PyObject *__pyx_v_errors = 0;
  int __pyx_v_count;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "pysaxon/sxn.pyx":546
 *             """
 *             cdef MyException mye
 *             cdef list errors = []             # <<<<<<<<<<<<<<
 *             cdef int count, i
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_errors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "pysaxon/sxn.pyx":549
 *             cdef int count, i
 * 
 *             if not self.thisptr.exceptionOccurred():             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->thisptr->exceptionOccurred() != 0)) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":550
 * 
 *             if not self.thisptr.exceptionOccurred():
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             count = self.thisptr.exceptionCount()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/sxn.pyx":549
 *             cdef int count, i
 * 
 *             if not self.thisptr.exceptionOccurred():             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  }

  /* "pysaxon/sxn.pyx":552
 *                 return None
 * 
 *             count = self.thisptr.exceptionCount()             # <<<<<<<<<<<<<<
 *             if count == 0:
 *                 return None
 */
  __pyx_v_count = __pyx_v_self->thisptr->exceptionCount();

  /* "pysaxon/sxn.pyx":553
 * 
 *             count = self.thisptr.exceptionCount()
 *             if count == 0:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  __pyx_t_2 = ((__pyx_v_count == 0) != 0);
  if (__pyx_t_2) {

    /* "pysaxon/sxn.pyx":554
 *             count = self.thisptr.exceptionCount()
 *             if count == 0:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *             for i in range(count):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "pysaxon/sxn.pyx":553
 * 
 *             count = self.thisptr.exceptionCount()
 *             if count == 0:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
  }

  /* "pysaxon/sxn.pyx":556
 *                 return None
 * 
 *             for i in range(count):             # <<<<<<<<<<<<<<
 *                 mye = MyException()
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 */
  __pyx_t_3 = __pyx_v_count;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "pysaxon/sxn.pyx":557
 * 
 *             for i in range(count):
 *                 mye = MyException()             # <<<<<<<<<<<<<<
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7pysaxon_3sxn_MyException), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_mye, ((struct __pyx_obj_7pysaxon_3sxn_MyException *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "pysaxon/sxn.pyx":558
 *             for i in range(count):
 *                 mye = MyException()
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))             # <<<<<<<<<<<<<<
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 *                 mye.e.linenumber = -1
 */
    __pyx_v_mye->e.errorCode.assign(__pyx_v_self->thisptr->getErrorCode(__pyx_v_i));

    /* "pysaxon/sxn.pyx":559
 *                 mye = MyException()
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))             # <<<<<<<<<<<<<<
 *                 mye.e.linenumber = -1
 *                 mye.e.isType = 1
 */
    __pyx_v_mye->e.errorMessage.assign(__pyx_v_self->thisptr->getErrorMessage(__pyx_v_i));

    /* "pysaxon/sxn.pyx":560
 *                 mye.e.errorCode.assign(self.thisptr.getErrorCode(i))
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 *                 mye.e.linenumber = -1             # <<<<<<<<<<<<<<
 *                 mye.e.isType = 1
 *                 mye.e.isGlobal = 1
 */
    __pyx_v_mye->e.linenumber = -1;

    /* "pysaxon/sxn.pyx":561
 *                 mye.e.errorMessage.assign(self.thisptr.getErrorMessage(i))
 *                 mye.e.linenumber = -1
 *                 mye.e.isType = 1             # <<<<<<<<<<<<<<
 *                 mye.e.isGlobal = 1
 *                 mye.e.isStatic = 1
 */
    __pyx_v_mye->e.isType = 1;

    /* "pysaxon/sxn.pyx":562
 *                 mye.e.linenumber = -1
 *                 mye.e.isType = 1
 *                 mye.e.isGlobal = 1             # <<<<<<<<<<<<<<
 *                 mye.e.isStatic = 1
 *                 errors.append(mye)
 */
    __pyx_v_mye->e.isGlobal = 1;

    /* "pysaxon/sxn.pyx":563
 *                 mye.e.isType = 1
 *                 mye.e.isGlobal = 1
 *                 mye.e.isStatic = 1             # <<<<<<<<<<<<<<
 *                 errors.append(mye)
 * 
 */
    __pyx_v_mye->e.isStatic = 1;

    /* "pysaxon/sxn.pyx":564
 *                 mye.e.isGlobal = 1
 *                 mye.e.isStatic = 1
 *                 errors.append(mye)             # <<<<<<<<<<<<<<
 * 
 *             return errors
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_errors, ((PyObject *)__pyx_v_mye)); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 564, __pyx_L1_error)
  }

  /* "pysaxon/sxn.pyx":566
 *                 errors.append(mye)
 * 
 *             return errors             # <<<<<<<<<<<<<<
 * 
 *         def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_errors);
  __pyx_r = __pyx_v_errors;
  goto __pyx_L0;

  /* "pysaxon/sxn.pyx":541
 * 
 *     property exceptions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             """Get exception error messages and their codes as a list of
 *             MyException objects or None.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pysaxon.sxn.XsltProcessor.exceptions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mye);
  __Pyx_XDECREF(__pyx_v_errors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pysaxon/sxn.pyx":568
 *             return errors
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear any exception thrown."""
 *             self.thisptr.exceptionClear()
 */

/* Python wrapper */
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10exceptions_3__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10exceptions_3__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10exceptions_2__del__(((struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7pysaxon_3sxn_13XsltProcessor_10exceptions_2__del__(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "pysaxon/sxn.pyx":570
 *         def __del__(self):
 *             """Clear any exception thrown."""
 *             self.thisptr.exceptionClear()             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->thisptr->exceptionClear();

  /* "pysaxon/sxn.pyx":568
 *             return errors
 * 
 *         def __del__(self):             # <<<<<<<<<<<<<<
 *             """Clear any exception thrown."""
 *             self.thisptr.exceptionClear()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) __PYX_ERR(1, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

static PyObject *__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(std::map<std::string,std::string>  const &__pyx_v_s) {
  PyObject *__pyx_v_o = NULL;
  std::map<std::string,std::string> ::value_type const *__pyx_v_key_value;
  std::map<std::string,std::string> ::const_iterator __pyx_v_iter;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string", 0);

  /* "map.to_py":228
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):
 *     o = {}             # <<<<<<<<<<<<<<
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "map.to_py":230
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()             # <<<<<<<<<<<<<<
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 */
  __pyx_v_iter = __pyx_v_s.begin();

  /* "map.to_py":231
 *     cdef const map[X,Y].value_type *key_value
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():             # <<<<<<<<<<<<<<
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 */
  while (1) {
    __pyx_t_2 = ((__pyx_v_iter != __pyx_v_s.end()) != 0);
    if (!__pyx_t_2) break;

    /* "map.to_py":232
 *     cdef map[X,Y].const_iterator iter = s.begin()
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)             # <<<<<<<<<<<<<<
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 */
    __pyx_v_key_value = (&(*__pyx_v_iter));

    /* "map.to_py":233
 *     while iter != s.end():
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)             # <<<<<<<<<<<<<<
 *         cython.operator.preincrement(iter)
 *     return o
 */
    __pyx_t_1 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->second); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyObject_string_to_py_std__in_string(__pyx_v_key_value->first); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PyDict_SetItem(__pyx_v_o, __pyx_t_3, __pyx_t_1) < 0)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "map.to_py":234
 *         key_value = &cython.operator.dereference(iter)
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)             # <<<<<<<<<<<<<<
 *     return o
 */
    (++__pyx_v_iter);
  }

  /* "map.to_py":235
 *         o[X_to_py(key_value.first)] = Y_to_py(key_value.second)
 *         cython.operator.preincrement(iter)
 *     return o             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("map.to_py.__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_7pysaxon_3sxn_SaxonProcessor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3sxn_SaxonProcessor(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_14SaxonProcessor_exceptionOccurred(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_17exceptionOccurred_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_14SaxonProcessor_resourcesDirectory(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_14SaxonProcessor_resourcesDirectory(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_18resourcesDirectory_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_14SaxonProcessor_version(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_14SaxonProcessor_7version_1__get__(o);
}

static PyMethodDef __pyx_methods_7pysaxon_3sxn_SaxonProcessor[] = {
  {"exceptionClear", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_5exceptionClear, METH_NOARGS, 0},
  {"getException", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_7getException, METH_NOARGS, 0},
  {"setcwd", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_9setcwd, METH_O, 0},
  {"setConfigurationProperty", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_11setConfigurationProperty, METH_VARARGS|METH_KEYWORDS, 0},
  {"clearConfigurationProperties", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_13clearConfigurationProperties, METH_NOARGS, 0},
  {"parseXmlFromString", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_15parseXmlFromString, METH_O, __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_14parseXmlFromString},
  {"parseXmlFromFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_17parseXmlFromFile, METH_O, __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_16parseXmlFromFile},
  {"parseXmlFromUri", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_19parseXmlFromUri, METH_O, __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_18parseXmlFromUri},
  {"newXPathProcessor", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_21newXPathProcessor, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_20newXPathProcessor},
  {"newXsltProcessor", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_23newXsltProcessor, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_14SaxonProcessor_22newXsltProcessor},
  {"getStringValue", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14SaxonProcessor_25getStringValue, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3sxn_SaxonProcessor[] = {
  {(char *)"exceptionOccurred", __pyx_getprop_7pysaxon_3sxn_14SaxonProcessor_exceptionOccurred, 0, (char *)0, 0},
  {(char *)"resourcesDirectory", __pyx_getprop_7pysaxon_3sxn_14SaxonProcessor_resourcesDirectory, __pyx_setprop_7pysaxon_3sxn_14SaxonProcessor_resourcesDirectory, (char *)0, 0},
  {(char *)"version", __pyx_getprop_7pysaxon_3sxn_14SaxonProcessor_version, 0, (char *)"Get the Saxon version.", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3sxn_SaxonProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.sxn.SaxonProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3sxn_SaxonProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3sxn_SaxonProcessor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "SaxonProcessor extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pysaxon_3sxn_SaxonProcessor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3sxn_SaxonProcessor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3sxn_SaxonProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3sxn_XPathProcessor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pysaxon_3sxn_14XPathProcessor_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3sxn_XPathProcessor(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3sxn_14XPathProcessor_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_14XPathProcessor_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10parameters_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_14XPathProcessor_parameters(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    PyErr_SetString(PyExc_NotImplementedError, "__set__");
    return -1;
  }
  else {
    return __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10parameters_3__del__(o);
  }
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_14XPathProcessor_properties(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10properties_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_14XPathProcessor_properties(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    PyErr_SetString(PyExc_NotImplementedError, "__set__");
    return -1;
  }
  else {
    return __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10properties_3__del__(o);
  }
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_14XPathProcessor_exceptions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10exceptions_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_14XPathProcessor_exceptions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    PyErr_SetString(PyExc_NotImplementedError, "__set__");
    return -1;
  }
  else {
    return __pyx_pw_7pysaxon_3sxn_14XPathProcessor_10exceptions_3__del__(o);
  }
}

static PyMethodDef __pyx_methods_7pysaxon_3sxn_XPathProcessor[] = {
  {"setcwd", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_5setcwd, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_4setcwd},
  {"setBaseURI", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_7setBaseURI, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_6setBaseURI},
  {"declareNamespace", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_9declareNamespace, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_8declareNamespace},
  {"evaluate", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_11evaluate, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_10evaluate},
  {"evaluate_single", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_13evaluate_single, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_12evaluate_single},
  {"evaluate_bool", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_15evaluate_bool, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_14evaluate_bool},
  {"setContextItem", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_17setContextItem, METH_O, 0},
  {"setContextFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_19setContextFile, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_18setContextFile},
  {"setParameter", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_21setParameter, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_20setParameter},
  {"removeParameter", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_23removeParameter, METH_O, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_22removeParameter},
  {"setProperty", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_25setProperty, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_24setProperty},
  {"exceptionOccurred", (PyCFunction)__pyx_pw_7pysaxon_3sxn_14XPathProcessor_27exceptionOccurred, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_14XPathProcessor_26exceptionOccurred},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3sxn_XPathProcessor[] = {
  {(char *)"parameters", __pyx_getprop_7pysaxon_3sxn_14XPathProcessor_parameters, __pyx_setprop_7pysaxon_3sxn_14XPathProcessor_parameters, (char *)0, 0},
  {(char *)"properties", __pyx_getprop_7pysaxon_3sxn_14XPathProcessor_properties, __pyx_setprop_7pysaxon_3sxn_14XPathProcessor_properties, (char *)0, 0},
  {(char *)"exceptions", __pyx_getprop_7pysaxon_3sxn_14XPathProcessor_exceptions, __pyx_setprop_7pysaxon_3sxn_14XPathProcessor_exceptions, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3sxn_XPathProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.sxn.XPathProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3sxn_XPathProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3sxn_XPathProcessor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "XPathProcessor extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pysaxon_3sxn_XPathProcessor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3sxn_XPathProcessor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3sxn_XPathProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3sxn_XsltProcessor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pysaxon_3sxn_13XsltProcessor_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3sxn_XsltProcessor(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3sxn_13XsltProcessor_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_13XsltProcessor_parameters(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10parameters_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_13XsltProcessor_parameters(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    PyErr_SetString(PyExc_NotImplementedError, "__set__");
    return -1;
  }
  else {
    return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10parameters_3__del__(o);
  }
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_13XsltProcessor_properties(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10properties_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_13XsltProcessor_properties(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    PyErr_SetString(PyExc_NotImplementedError, "__set__");
    return -1;
  }
  else {
    return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10properties_3__del__(o);
  }
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_13XsltProcessor_xslMessages(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_11xslMessages_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_13XsltProcessor_exceptions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10exceptions_1__get__(o);
}

static int __pyx_setprop_7pysaxon_3sxn_13XsltProcessor_exceptions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    PyErr_SetString(PyExc_NotImplementedError, "__set__");
    return -1;
  }
  else {
    return __pyx_pw_7pysaxon_3sxn_13XsltProcessor_10exceptions_3__del__(o);
  }
}

static PyMethodDef __pyx_methods_7pysaxon_3sxn_XsltProcessor[] = {
  {"setcwd", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_5setcwd, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_4setcwd},
  {"setSourceFromXdmValue", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_7setSourceFromXdmValue, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_6setSourceFromXdmValue},
  {"setSourceFromFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_9setSourceFromFile, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_8setSourceFromFile},
  {"setOutputFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_11setOutputFile, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_10setOutputFile},
  {"transformFileToFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_13transformFileToFile, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_12transformFileToFile},
  {"transformFileToString", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_15transformFileToString, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_14transformFileToString},
  {"transformFileToValue", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_17transformFileToValue, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_16transformFileToValue},
  {"compileFromFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_19compileFromFile, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_18compileFromFile},
  {"compileFromString", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_21compileFromString, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_20compileFromString},
  {"compileFromXdmNode", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_23compileFromXdmNode, METH_O, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_22compileFromXdmNode},
  {"transformToString", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_25transformToString, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_24transformToString},
  {"transformToValue", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_27transformToValue, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_26transformToValue},
  {"transformToFile", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_29transformToFile, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_28transformToFile},
  {"exceptionOccurred", (PyCFunction)__pyx_pw_7pysaxon_3sxn_13XsltProcessor_31exceptionOccurred, METH_NOARGS, __pyx_doc_7pysaxon_3sxn_13XsltProcessor_30exceptionOccurred},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3sxn_XsltProcessor[] = {
  {(char *)"parameters", __pyx_getprop_7pysaxon_3sxn_13XsltProcessor_parameters, __pyx_setprop_7pysaxon_3sxn_13XsltProcessor_parameters, (char *)0, 0},
  {(char *)"properties", __pyx_getprop_7pysaxon_3sxn_13XsltProcessor_properties, __pyx_setprop_7pysaxon_3sxn_13XsltProcessor_properties, (char *)0, 0},
  {(char *)"xslMessages", __pyx_getprop_7pysaxon_3sxn_13XsltProcessor_xslMessages, 0, (char *)0, 0},
  {(char *)"exceptions", __pyx_getprop_7pysaxon_3sxn_13XsltProcessor_exceptions, __pyx_setprop_7pysaxon_3sxn_13XsltProcessor_exceptions, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3sxn_XsltProcessor = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.sxn.XsltProcessor", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3sxn_XsltProcessor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3sxn_XsltProcessor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "XsltProcessor extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pysaxon_3sxn_XsltProcessor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3sxn_XsltProcessor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3sxn_XsltProcessor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3sxn_MyException(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3sxn_MyException(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_11MyException_errorCode(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_11MyException_9errorCode_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_11MyException_errorMessage(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_11MyException_12errorMessage_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_11MyException_linenumber(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_11MyException_10linenumber_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_11MyException_isType(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_11MyException_6isType_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_11MyException_isStatic(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_11MyException_8isStatic_1__get__(o);
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_11MyException_isGlobal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_11MyException_8isGlobal_1__get__(o);
}

static struct PyGetSetDef __pyx_getsets_7pysaxon_3sxn_MyException[] = {
  {(char *)"errorCode", __pyx_getprop_7pysaxon_3sxn_11MyException_errorCode, 0, (char *)0, 0},
  {(char *)"errorMessage", __pyx_getprop_7pysaxon_3sxn_11MyException_errorMessage, 0, (char *)0, 0},
  {(char *)"linenumber", __pyx_getprop_7pysaxon_3sxn_11MyException_linenumber, 0, (char *)0, 0},
  {(char *)"isType", __pyx_getprop_7pysaxon_3sxn_11MyException_isType, 0, (char *)0, 0},
  {(char *)"isStatic", __pyx_getprop_7pysaxon_3sxn_11MyException_isStatic, 0, (char *)0, 0},
  {(char *)"isGlobal", __pyx_getprop_7pysaxon_3sxn_11MyException_isGlobal, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7pysaxon_3sxn_MyException = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.sxn.MyException", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3sxn_MyException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3sxn_MyException, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "MyException extension type", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3sxn_MyException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3sxn_MyException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7pysaxon_3sxn_SaxonApiException(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  o = (*t->tp_alloc)(t, 0);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7pysaxon_3sxn_17SaxonApiException_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_7pysaxon_3sxn_SaxonApiException(PyObject *o) {
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7pysaxon_3sxn_17SaxonApiException_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_7pysaxon_3sxn_SaxonApiException(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_7pysaxon_3sxn_17SaxonApiException_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7pysaxon_3sxn_17SaxonApiException_5count_1__get__(o);
}

static PyMethodDef __pyx_methods_7pysaxon_3sxn_SaxonApiException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_7pysaxon_3sxn_17SaxonApiException_5__copy__, METH_NOARGS, 0},
  {"clear", (PyCFunction)__pyx_pw_7pysaxon_3sxn_17SaxonApiException_7clear, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7pysaxon_3sxn_SaxonApiException[] = {
  {(char *)"count", __pyx_getprop_7pysaxon_3sxn_17SaxonApiException_count, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_SaxonApiException = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_7pysaxon_3sxn_SaxonApiException, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SaxonApiException = {
  0, /*mp_length*/
  __pyx_pw_7pysaxon_3sxn_17SaxonApiException_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_7pysaxon_3sxn_SaxonApiException = {
  PyVarObject_HEAD_INIT(0, 0)
  "pysaxon.sxn.SaxonApiException", /*tp_name*/
  sizeof(struct __pyx_obj_7pysaxon_3sxn_SaxonApiException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7pysaxon_3sxn_SaxonApiException, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_SaxonApiException, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SaxonApiException, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  "Saxon API Exception extension type.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7pysaxon_3sxn_SaxonApiException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7pysaxon_3sxn_SaxonApiException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7pysaxon_3sxn_SaxonApiException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "sxn",
    __pyx_k_Define_extension_types_for_MyExc, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Calling_release, __pyx_k_Calling_release, sizeof(__pyx_k_Calling_release), 0, 0, 1, 0},
  {&__pyx_kp_s_Destroying_C_SaxonProcessor, __pyx_k_Destroying_C_SaxonProcessor, sizeof(__pyx_k_Destroying_C_SaxonProcessor), 0, 0, 1, 0},
  {&__pyx_kp_s_Failed_to_create_XsltProcessor_o, __pyx_k_Failed_to_create_XsltProcessor_o, sizeof(__pyx_k_Failed_to_create_XsltProcessor_o), 0, 0, 1, 0},
  {&__pyx_kp_s_In_SaxonProcessor___cinit, __pyx_k_In_SaxonProcessor___cinit, sizeof(__pyx_k_In_SaxonProcessor___cinit), 0, 0, 1, 0},
  {&__pyx_kp_s_In_SaxonProcessor___dealloc, __pyx_k_In_SaxonProcessor___dealloc, sizeof(__pyx_k_In_SaxonProcessor___dealloc), 0, 0, 1, 0},
  {&__pyx_kp_s_In_SaxonProcessor_newXPathProces, __pyx_k_In_SaxonProcessor_newXPathProces, sizeof(__pyx_k_In_SaxonProcessor_newXPathProces), 0, 0, 1, 0},
  {&__pyx_kp_s_In_SaxonProcessor_parseXmlFromSt, __pyx_k_In_SaxonProcessor_parseXmlFromSt, sizeof(__pyx_k_In_SaxonProcessor_parseXmlFromSt), 0, 0, 1, 0},
  {&__pyx_kp_s_In_XPathProcessor_evaluate_singl, __pyx_k_In_XPathProcessor_evaluate_singl, sizeof(__pyx_k_In_XPathProcessor_evaluate_singl), 0, 0, 1, 0},
  {&__pyx_kp_s_In_XPathProcessor_setContextItem, __pyx_k_In_XPathProcessor_setContextItem, sizeof(__pyx_k_In_XPathProcessor_setContextItem), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_one_init_SaxonProcessor_obj, __pyx_k_Only_one_init_SaxonProcessor_obj, sizeof(__pyx_k_Only_one_init_SaxonProcessor_obj), 0, 0, 1, 0},
  {&__pyx_kp_s_Only_xdm_Item_or_xdm_Node_object, __pyx_k_Only_xdm_Item_or_xdm_Node_object, sizeof(__pyx_k_Only_xdm_Item_or_xdm_Node_object), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_SaxonProcessor_init_object_never, __pyx_k_SaxonProcessor_init_object_never, sizeof(__pyx_k_SaxonProcessor_init_object_never), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_b__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 0, 0, 0},
  {&__pyx_n_s_cwd, __pyx_k_cwd, sizeof(__pyx_k_cwd), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_global__init, __pyx_k_global__init, sizeof(__pyx_k_global__init), 0, 0, 1, 0},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_s_init_2, __pyx_k_init_2, sizeof(__pyx_k_init_2), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_out, __pyx_k_out, sizeof(__pyx_k_out), 0, 0, 1, 1},
  {&__pyx_n_s_prefix, __pyx_k_prefix, sizeof(__pyx_k_prefix), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_proc, __pyx_k_proc, sizeof(__pyx_k_proc), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_raw, __pyx_k_raw, sizeof(__pyx_k_raw), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_uri, __pyx_k_uri, sizeof(__pyx_k_uri), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_what, __pyx_k_what, sizeof(__pyx_k_what), 0, 0, 1, 1},
  {&__pyx_kp_s_what_2, __pyx_k_what_2, sizeof(__pyx_k_what_2), 0, 0, 1, 0},
  {&__pyx_n_s_xslt, __pyx_k_xslt, sizeof(__pyx_k_xslt), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 202, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 375, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pysaxon/sxn.pyx":109
 * 
 *         if not (init or _init):
 *             raise RuntimeError(             # <<<<<<<<<<<<<<
 *                 'SaxonProcessor "init" object never created')
 *         elif init and _init:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_SaxonProcessor_init_object_never); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "pysaxon/sxn.pyx":112
 *                 'SaxonProcessor "init" object never created')
 *         elif init and _init:
 *             raise RuntimeError('Only one "init" SaxonProcessor object allowed')             # <<<<<<<<<<<<<<
 *         if init:
 *             _init = 1
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Only_one_init_SaxonProcessor_obj); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "pysaxon/sxn.pyx":202
 *         print_ptr('after XPathProcessor*', xp.thisptr)
 *         if xp.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')             # <<<<<<<<<<<<<<
 *         return xp
 * 
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_create_XsltProcessor_o); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "pysaxon/sxn.pyx":213
 *         xsl.thisptr = self.thisptr.newXsltProcessor()
 *         if xsl.thisptr == NULL:
 *             raise ValueError('Failed to create XsltProcessor object')             # <<<<<<<<<<<<<<
 *         return xsl
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_create_XsltProcessor_o); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "pysaxon/sxn.pyx":300
 *         print_ptr('XPathProcessor*', self.thisptr)
 *         if not isinstance(it, (Item, Node)):
 *             raise TypeError('Only xdm.Item or xdm.Node objects can set context')             # <<<<<<<<<<<<<<
 *         ptr = <cpp.XdmItem*>it.thisptr
 *         print_ptr('XdmItem*', ptr)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Only_xdm_Item_or_xdm_Node_object); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initsxn(void); /*proto*/
PyMODINIT_FUNC initsxn(void)
#else
PyMODINIT_FUNC PyInit_sxn(void); /*proto*/
PyMODINIT_FUNC PyInit_sxn(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_sxn(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("sxn", __pyx_methods, __pyx_k_Define_extension_types_for_MyExc, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pysaxon__sxn) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pysaxon.sxn")) {
      if (unlikely(PyDict_SetItemString(modules, "pysaxon.sxn", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_7pysaxon_3sxn_SaxonProcessor) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_type_7pysaxon_3sxn_SaxonProcessor.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "SaxonProcessor", (PyObject *)&__pyx_type_7pysaxon_3sxn_SaxonProcessor) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3sxn_SaxonProcessor = &__pyx_type_7pysaxon_3sxn_SaxonProcessor;
  if (PyType_Ready(&__pyx_type_7pysaxon_3sxn_XPathProcessor) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_type_7pysaxon_3sxn_XPathProcessor.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "XPathProcessor", (PyObject *)&__pyx_type_7pysaxon_3sxn_XPathProcessor) < 0) __PYX_ERR(0, 220, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3sxn_XPathProcessor = &__pyx_type_7pysaxon_3sxn_XPathProcessor;
  if (PyType_Ready(&__pyx_type_7pysaxon_3sxn_XsltProcessor) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_type_7pysaxon_3sxn_XsltProcessor.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "XsltProcessor", (PyObject *)&__pyx_type_7pysaxon_3sxn_XsltProcessor) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3sxn_XsltProcessor = &__pyx_type_7pysaxon_3sxn_XsltProcessor;
  if (PyType_Ready(&__pyx_type_7pysaxon_3sxn_MyException) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __pyx_type_7pysaxon_3sxn_MyException.tp_print = 0;
  __pyx_ptype_7pysaxon_3sxn_MyException = &__pyx_type_7pysaxon_3sxn_MyException;
  if (PyType_Ready(&__pyx_type_7pysaxon_3sxn_SaxonApiException) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __pyx_type_7pysaxon_3sxn_SaxonApiException.tp_print = 0;
  __pyx_ptype_7pysaxon_3sxn_SaxonApiException = &__pyx_type_7pysaxon_3sxn_SaxonApiException;
  /*--- Type import code ---*/
  __pyx_ptype_7pysaxon_3xdm_Value = __Pyx_ImportType("pysaxon.xdm", "Value", sizeof(struct __pyx_obj_7pysaxon_3xdm_Value), 1); if (unlikely(!__pyx_ptype_7pysaxon_3xdm_Value)) __PYX_ERR(2, 4, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_Item = __Pyx_ImportType("pysaxon.xdm", "Item", sizeof(struct __pyx_obj_7pysaxon_3xdm_Item), 1); if (unlikely(!__pyx_ptype_7pysaxon_3xdm_Item)) __PYX_ERR(2, 9, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_Node = __Pyx_ImportType("pysaxon.xdm", "Node", sizeof(struct __pyx_obj_7pysaxon_3xdm_Node), 1); if (unlikely(!__pyx_ptype_7pysaxon_3xdm_Node)) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_ptype_7pysaxon_3xdm_AtomicValue = __Pyx_ImportType("pysaxon.xdm", "AtomicValue", sizeof(struct __pyx_obj_7pysaxon_3xdm_AtomicValue), 1); if (unlikely(!__pyx_ptype_7pysaxon_3xdm_AtomicValue)) __PYX_ERR(2, 17, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  __pyx_t_1 = __Pyx_ImportModule("pysaxon.xdm"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "make_item", (void (**)(void))&__pyx_f_7pysaxon_3xdm_make_item, "PyObject *(XdmItem *, char *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "make_node", (void (**)(void))&__pyx_f_7pysaxon_3xdm_make_node, "PyObject *(XdmNode *, char *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "print_ptr", (void (**)(void))&__pyx_f_7pysaxon_3xdm_print_ptr, "void (char *, void *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pysaxon/sxn.pyx":86
 * 
 * # Global boolean flag indicating whether Saxon/C Java VM has started...
 * cdef int _init = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_7pysaxon_3sxn__init = 0;

  /* "pysaxon/sxn.pyx":1
 * """Define extension types for MyException, SaxonApiException, and             # <<<<<<<<<<<<<<
 * SaxonProcessor."""
 * from libcpp.string cimport string
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "map.to_py":227
 * 
 * @cname("__pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string")
 * cdef object __pyx_convert_map_to_py_std_3a__3a_string____std_3a__3a_string(const map[X,Y]& s):             # <<<<<<<<<<<<<<
 *     o = {}
 *     cdef const map[X,Y].value_type *key_value
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pysaxon.sxn", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pysaxon.sxn");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyErrFetchRestore */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
  static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* PrintOne */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
  #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
